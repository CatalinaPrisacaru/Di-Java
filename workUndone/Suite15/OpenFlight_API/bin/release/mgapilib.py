# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mgapilib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


MVERSION_API = _mgapilib.MVERSION_API
MVERSION_TOOLS = _mgapilib.MVERSION_TOOLS
_MVERSION_API = _mgapilib._MVERSION_API
MVERSION_OPENFLIGHT = _mgapilib.MVERSION_OPENFLIGHT
MSTAT_OK = _mgapilib.MSTAT_OK
MG_FALSE = _mgapilib.MG_FALSE
MG_TRUE = _mgapilib.MG_TRUE
MTYPE_NULL = _mgapilib.MTYPE_NULL
MTYPE_CHAR = _mgapilib.MTYPE_CHAR
MTYPE_UCHAR = _mgapilib.MTYPE_UCHAR
MTYPE_SHORT = _mgapilib.MTYPE_SHORT
MTYPE_USHORT = _mgapilib.MTYPE_USHORT
MTYPE_INT = _mgapilib.MTYPE_INT
MTYPE_UINT = _mgapilib.MTYPE_UINT
MTYPE_FLOAT = _mgapilib.MTYPE_FLOAT
MTYPE_DOUBLE = _mgapilib.MTYPE_DOUBLE
MTYPE_FLAG = _mgapilib.MTYPE_FLAG
MTYPE_ENUM = _mgapilib.MTYPE_ENUM
MTYPE_TEXT = _mgapilib.MTYPE_TEXT
MTYPE_ROOT = _mgapilib.MTYPE_ROOT
MTYPE_BEAD = _mgapilib.MTYPE_BEAD
MTYPE_REC = _mgapilib.MTYPE_REC
MTYPE_DATA = _mgapilib.MTYPE_DATA
MTYPE_XFORM = _mgapilib.MTYPE_XFORM
MTYPE_XML = _mgapilib.MTYPE_XML
MTYPE_DOUBLE2 = _mgapilib.MTYPE_DOUBLE2
MTYPE_DOUBLE3 = _mgapilib.MTYPE_DOUBLE3
MXLL_TRANSLATE = _mgapilib.MXLL_TRANSLATE
MXLL_SCALE = _mgapilib.MXLL_SCALE
MXLL_ROTEDGE = _mgapilib.MXLL_ROTEDGE
MXLL_ROTPT = _mgapilib.MXLL_ROTPT
MXLL_PUT = _mgapilib.MXLL_PUT
MXLL_TOPOINT = _mgapilib.MXLL_TOPOINT
MXLL_GENERAL = _mgapilib.MXLL_GENERAL
class mgvectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvectorf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _mgapilib.mgvectorf_i_set
    __swig_getmethods__["i"] = _mgapilib.mgvectorf_i_get
    if _newclass:i = _swig_property(_mgapilib.mgvectorf_i_get, _mgapilib.mgvectorf_i_set)
    __swig_setmethods__["j"] = _mgapilib.mgvectorf_j_set
    __swig_getmethods__["j"] = _mgapilib.mgvectorf_j_get
    if _newclass:j = _swig_property(_mgapilib.mgvectorf_j_get, _mgapilib.mgvectorf_j_set)
    __swig_setmethods__["k"] = _mgapilib.mgvectorf_k_set
    __swig_getmethods__["k"] = _mgapilib.mgvectorf_k_get
    if _newclass:k = _swig_property(_mgapilib.mgvectorf_k_get, _mgapilib.mgvectorf_k_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvectorf
    __del__ = lambda self : None;
mgvectorf_swigregister = _mgapilib.mgvectorf_swigregister
mgvectorf_swigregister(mgvectorf)

class mgvectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvectord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _mgapilib.mgvectord_i_set
    __swig_getmethods__["i"] = _mgapilib.mgvectord_i_get
    if _newclass:i = _swig_property(_mgapilib.mgvectord_i_get, _mgapilib.mgvectord_i_set)
    __swig_setmethods__["j"] = _mgapilib.mgvectord_j_set
    __swig_getmethods__["j"] = _mgapilib.mgvectord_j_get
    if _newclass:j = _swig_property(_mgapilib.mgvectord_j_get, _mgapilib.mgvectord_j_set)
    __swig_setmethods__["k"] = _mgapilib.mgvectord_k_set
    __swig_getmethods__["k"] = _mgapilib.mgvectord_k_get
    if _newclass:k = _swig_property(_mgapilib.mgvectord_k_get, _mgapilib.mgvectord_k_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvectord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvectord
    __del__ = lambda self : None;
mgvectord_swigregister = _mgapilib.mgvectord_swigregister
mgvectord_swigregister(mgvectord)

class mgcoord3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgcoord3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgcoord3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mgapilib.mgcoord3f_x_set
    __swig_getmethods__["x"] = _mgapilib.mgcoord3f_x_get
    if _newclass:x = _swig_property(_mgapilib.mgcoord3f_x_get, _mgapilib.mgcoord3f_x_set)
    __swig_setmethods__["y"] = _mgapilib.mgcoord3f_y_set
    __swig_getmethods__["y"] = _mgapilib.mgcoord3f_y_get
    if _newclass:y = _swig_property(_mgapilib.mgcoord3f_y_get, _mgapilib.mgcoord3f_y_set)
    __swig_setmethods__["z"] = _mgapilib.mgcoord3f_z_set
    __swig_getmethods__["z"] = _mgapilib.mgcoord3f_z_get
    if _newclass:z = _swig_property(_mgapilib.mgcoord3f_z_get, _mgapilib.mgcoord3f_z_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgcoord3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgcoord3f
    __del__ = lambda self : None;
mgcoord3f_swigregister = _mgapilib.mgcoord3f_swigregister
mgcoord3f_swigregister(mgcoord3f)

class mgcoord3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgcoord3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgcoord3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mgapilib.mgcoord3d_x_set
    __swig_getmethods__["x"] = _mgapilib.mgcoord3d_x_get
    if _newclass:x = _swig_property(_mgapilib.mgcoord3d_x_get, _mgapilib.mgcoord3d_x_set)
    __swig_setmethods__["y"] = _mgapilib.mgcoord3d_y_set
    __swig_getmethods__["y"] = _mgapilib.mgcoord3d_y_get
    if _newclass:y = _swig_property(_mgapilib.mgcoord3d_y_get, _mgapilib.mgcoord3d_y_set)
    __swig_setmethods__["z"] = _mgapilib.mgcoord3d_z_set
    __swig_getmethods__["z"] = _mgapilib.mgcoord3d_z_get
    if _newclass:z = _swig_property(_mgapilib.mgcoord3d_z_get, _mgapilib.mgcoord3d_z_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgcoord3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgcoord3d
    __del__ = lambda self : None;
mgcoord3d_swigregister = _mgapilib.mgcoord3d_swigregister
mgcoord3d_swigregister(mgcoord3d)

class mgcoord2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgcoord2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgcoord2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mgapilib.mgcoord2d_x_set
    __swig_getmethods__["x"] = _mgapilib.mgcoord2d_x_get
    if _newclass:x = _swig_property(_mgapilib.mgcoord2d_x_get, _mgapilib.mgcoord2d_x_set)
    __swig_setmethods__["y"] = _mgapilib.mgcoord2d_y_set
    __swig_getmethods__["y"] = _mgapilib.mgcoord2d_y_get
    if _newclass:y = _swig_property(_mgapilib.mgcoord2d_y_get, _mgapilib.mgcoord2d_y_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgcoord2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgcoord2d
    __del__ = lambda self : None;
mgcoord2d_swigregister = _mgapilib.mgcoord2d_swigregister
mgcoord2d_swigregister(mgcoord2d)

class mglined(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mglined, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mglined, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _mgapilib.mglined_p1_set
    __swig_getmethods__["p1"] = _mgapilib.mglined_p1_get
    if _newclass:p1 = _swig_property(_mgapilib.mglined_p1_get, _mgapilib.mglined_p1_set)
    __swig_setmethods__["p2"] = _mgapilib.mglined_p2_set
    __swig_getmethods__["p2"] = _mgapilib.mglined_p2_get
    if _newclass:p2 = _swig_property(_mgapilib.mglined_p2_get, _mgapilib.mglined_p2_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mglined(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mglined
    __del__ = lambda self : None;
mglined_swigregister = _mgapilib.mglined_swigregister
mglined_swigregister(mglined)

class mgboxd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgboxd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgboxd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _mgapilib.mgboxd_min_set
    __swig_getmethods__["min"] = _mgapilib.mgboxd_min_get
    if _newclass:min = _swig_property(_mgapilib.mgboxd_min_get, _mgapilib.mgboxd_min_set)
    __swig_setmethods__["max"] = _mgapilib.mgboxd_max_set
    __swig_getmethods__["max"] = _mgapilib.mgboxd_max_get
    if _newclass:max = _swig_property(_mgapilib.mgboxd_max_get, _mgapilib.mgboxd_max_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgboxd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgboxd
    __del__ = lambda self : None;
mgboxd_swigregister = _mgapilib.mgboxd_swigregister
mgboxd_swigregister(mgboxd)

class mgcoord2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgcoord2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgcoord2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mgapilib.mgcoord2i_x_set
    __swig_getmethods__["x"] = _mgapilib.mgcoord2i_x_get
    if _newclass:x = _swig_property(_mgapilib.mgcoord2i_x_get, _mgapilib.mgcoord2i_x_set)
    __swig_setmethods__["y"] = _mgapilib.mgcoord2i_y_set
    __swig_getmethods__["y"] = _mgapilib.mgcoord2i_y_get
    if _newclass:y = _swig_property(_mgapilib.mgcoord2i_y_get, _mgapilib.mgcoord2i_y_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgcoord2i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgcoord2i
    __del__ = lambda self : None;
mgcoord2i_swigregister = _mgapilib.mgcoord2i_swigregister
mgcoord2i_swigregister(mgcoord2i)

class mgplaned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgplaned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgplaned, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _mgapilib.mgplaned_a_set
    __swig_getmethods__["a"] = _mgapilib.mgplaned_a_get
    if _newclass:a = _swig_property(_mgapilib.mgplaned_a_get, _mgapilib.mgplaned_a_set)
    __swig_setmethods__["b"] = _mgapilib.mgplaned_b_set
    __swig_getmethods__["b"] = _mgapilib.mgplaned_b_get
    if _newclass:b = _swig_property(_mgapilib.mgplaned_b_get, _mgapilib.mgplaned_b_set)
    __swig_setmethods__["c"] = _mgapilib.mgplaned_c_set
    __swig_getmethods__["c"] = _mgapilib.mgplaned_c_get
    if _newclass:c = _swig_property(_mgapilib.mgplaned_c_get, _mgapilib.mgplaned_c_set)
    __swig_setmethods__["d"] = _mgapilib.mgplaned_d_set
    __swig_getmethods__["d"] = _mgapilib.mgplaned_d_get
    if _newclass:d = _swig_property(_mgapilib.mgplaned_d_get, _mgapilib.mgplaned_d_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgplaned(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgplaned
    __del__ = lambda self : None;
mgplaned_swigregister = _mgapilib.mgplaned_swigregister
mgplaned_swigregister(mgplaned)

class mgprojcoord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgprojcoord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgprojcoord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lat"] = _mgapilib.mgprojcoord_lat_set
    __swig_getmethods__["lat"] = _mgapilib.mgprojcoord_lat_get
    if _newclass:lat = _swig_property(_mgapilib.mgprojcoord_lat_get, _mgapilib.mgprojcoord_lat_set)
    __swig_setmethods__["lon"] = _mgapilib.mgprojcoord_lon_set
    __swig_getmethods__["lon"] = _mgapilib.mgprojcoord_lon_get
    if _newclass:lon = _swig_property(_mgapilib.mgprojcoord_lon_get, _mgapilib.mgprojcoord_lon_set)
    __swig_setmethods__["height"] = _mgapilib.mgprojcoord_height_set
    __swig_getmethods__["height"] = _mgapilib.mgprojcoord_height_get
    if _newclass:height = _swig_property(_mgapilib.mgprojcoord_height_get, _mgapilib.mgprojcoord_height_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgprojcoord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgprojcoord
    __del__ = lambda self : None;
mgprojcoord_swigregister = _mgapilib.mgprojcoord_swigregister
mgprojcoord_swigregister(mgprojcoord)

mgGetCode = _mgapilib.mgGetCode
mgGetMyCode = _mgapilib.mgGetMyCode
mgIsCode = _mgapilib.mgIsCode
mgIsTypeUcval = _mgapilib.mgIsTypeUcval
mgIsTypeSval = _mgapilib.mgIsTypeSval
mgIsTypeUsval = _mgapilib.mgIsTypeUsval
mgIsTypeFval = _mgapilib.mgIsTypeFval
mgIsTypeIval = _mgapilib.mgIsTypeIval
mgIsTypeUival = _mgapilib.mgIsTypeUival
mgIsTypeDval = _mgapilib.mgIsTypeDval
mgIsTypeFlag = _mgapilib.mgIsTypeFlag
mgIsTypeText = _mgapilib.mgIsTypeText
mgIsTypeRec = _mgapilib.mgIsTypeRec
SITEIDLEN = _mgapilib.SITEIDLEN
SITEFNLEN = _mgapilib.SITEFNLEN
MACTION_GET = _mgapilib.MACTION_GET
MACTION_SET = _mgapilib.MACTION_SET
MACTION_PRINT = _mgapilib.MACTION_PRINT
dc = _mgapilib.dc
pointer = _mgapilib.pointer
structure = _mgapilib.structure
is_bad = _mgapilib.is_bad
is_record = _mgapilib.is_record
is_data = _mgapilib.is_data
class data_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.data_def_code_set
    __swig_getmethods__["code"] = _mgapilib.data_def_code_get
    if _newclass:code = _swig_property(_mgapilib.data_def_code_get, _mgapilib.data_def_code_set)
    __swig_setmethods__["type"] = _mgapilib.data_def_type_set
    __swig_getmethods__["type"] = _mgapilib.data_def_type_get
    if _newclass:type = _swig_property(_mgapilib.data_def_type_get, _mgapilib.data_def_type_set)
    __swig_setmethods__["key"] = _mgapilib.data_def_key_set
    __swig_getmethods__["key"] = _mgapilib.data_def_key_get
    if _newclass:key = _swig_property(_mgapilib.data_def_key_get, _mgapilib.data_def_key_set)
    __swig_setmethods__["display"] = _mgapilib.data_def_display_set
    __swig_getmethods__["display"] = _mgapilib.data_def_display_get
    if _newclass:display = _swig_property(_mgapilib.data_def_display_get, _mgapilib.data_def_display_set)
    __swig_setmethods__["edit"] = _mgapilib.data_def_edit_set
    __swig_getmethods__["edit"] = _mgapilib.data_def_edit_get
    if _newclass:edit = _swig_property(_mgapilib.data_def_edit_get, _mgapilib.data_def_edit_set)
    __swig_setmethods__["search"] = _mgapilib.data_def_search_set
    __swig_getmethods__["search"] = _mgapilib.data_def_search_get
    if _newclass:search = _swig_property(_mgapilib.data_def_search_get, _mgapilib.data_def_search_set)
    __swig_setmethods__["packed"] = _mgapilib.data_def_packed_set
    __swig_getmethods__["packed"] = _mgapilib.data_def_packed_get
    if _newclass:packed = _swig_property(_mgapilib.data_def_packed_get, _mgapilib.data_def_packed_set)
    __swig_setmethods__["flt"] = _mgapilib.data_def_flt_set
    __swig_getmethods__["flt"] = _mgapilib.data_def_flt_get
    if _newclass:flt = _swig_property(_mgapilib.data_def_flt_get, _mgapilib.data_def_flt_set)
    __swig_setmethods__["spare1"] = _mgapilib.data_def_spare1_set
    __swig_getmethods__["spare1"] = _mgapilib.data_def_spare1_get
    if _newclass:spare1 = _swig_property(_mgapilib.data_def_spare1_get, _mgapilib.data_def_spare1_set)
    __swig_setmethods__["siteid"] = _mgapilib.data_def_siteid_set
    __swig_getmethods__["siteid"] = _mgapilib.data_def_siteid_get
    if _newclass:siteid = _swig_property(_mgapilib.data_def_siteid_get, _mgapilib.data_def_siteid_set)
    __swig_setmethods__["verno"] = _mgapilib.data_def_verno_set
    __swig_getmethods__["verno"] = _mgapilib.data_def_verno_get
    if _newclass:verno = _swig_property(_mgapilib.data_def_verno_get, _mgapilib.data_def_verno_set)
    __swig_setmethods__["xcode"] = _mgapilib.data_def_xcode_set
    __swig_getmethods__["xcode"] = _mgapilib.data_def_xcode_get
    if _newclass:xcode = _swig_property(_mgapilib.data_def_xcode_get, _mgapilib.data_def_xcode_set)
    __swig_setmethods__["xstring"] = _mgapilib.data_def_xstring_set
    __swig_getmethods__["xstring"] = _mgapilib.data_def_xstring_get
    if _newclass:xstring = _swig_property(_mgapilib.data_def_xstring_get, _mgapilib.data_def_xstring_set)
    __swig_setmethods__["acnt"] = _mgapilib.data_def_acnt_set
    __swig_getmethods__["acnt"] = _mgapilib.data_def_acnt_get
    if _newclass:acnt = _swig_property(_mgapilib.data_def_acnt_get, _mgapilib.data_def_acnt_set)
    __swig_setmethods__["len"] = _mgapilib.data_def_len_set
    __swig_getmethods__["len"] = _mgapilib.data_def_len_get
    if _newclass:len = _swig_property(_mgapilib.data_def_len_get, _mgapilib.data_def_len_set)
    __swig_setmethods__["id"] = _mgapilib.data_def_id_set
    __swig_getmethods__["id"] = _mgapilib.data_def_id_get
    if _newclass:id = _swig_property(_mgapilib.data_def_id_get, _mgapilib.data_def_id_set)
    __swig_setmethods__["label"] = _mgapilib.data_def_label_set
    __swig_getmethods__["label"] = _mgapilib.data_def_label_get
    if _newclass:label = _swig_property(_mgapilib.data_def_label_get, _mgapilib.data_def_label_set)
    __swig_setmethods__["msg"] = _mgapilib.data_def_msg_set
    __swig_getmethods__["msg"] = _mgapilib.data_def_msg_get
    if _newclass:msg = _swig_property(_mgapilib.data_def_msg_get, _mgapilib.data_def_msg_set)
    __swig_setmethods__["comment"] = _mgapilib.data_def_comment_set
    __swig_getmethods__["comment"] = _mgapilib.data_def_comment_get
    if _newclass:comment = _swig_property(_mgapilib.data_def_comment_get, _mgapilib.data_def_comment_set)
    __swig_setmethods__["cnv"] = _mgapilib.data_def_cnv_set
    __swig_getmethods__["cnv"] = _mgapilib.data_def_cnv_get
    if _newclass:cnv = _swig_property(_mgapilib.data_def_cnv_get, _mgapilib.data_def_cnv_set)
    __swig_setmethods__["pre"] = _mgapilib.data_def_pre_set
    __swig_getmethods__["pre"] = _mgapilib.data_def_pre_get
    if _newclass:pre = _swig_property(_mgapilib.data_def_pre_get, _mgapilib.data_def_pre_set)
    __swig_setmethods__["act"] = _mgapilib.data_def_act_set
    __swig_getmethods__["act"] = _mgapilib.data_def_act_get
    if _newclass:act = _swig_property(_mgapilib.data_def_act_get, _mgapilib.data_def_act_set)
    __swig_setmethods__["path"] = _mgapilib.data_def_path_set
    __swig_getmethods__["path"] = _mgapilib.data_def_path_get
    if _newclass:path = _swig_property(_mgapilib.data_def_path_get, _mgapilib.data_def_path_set)
    __swig_setmethods__["spare2"] = _mgapilib.data_def_spare2_set
    __swig_getmethods__["spare2"] = _mgapilib.data_def_spare2_get
    if _newclass:spare2 = _swig_property(_mgapilib.data_def_spare2_get, _mgapilib.data_def_spare2_set)
    __swig_setmethods__["rtcom"] = _mgapilib.data_def_rtcom_set
    __swig_getmethods__["rtcom"] = _mgapilib.data_def_rtcom_get
    if _newclass:rtcom = _swig_property(_mgapilib.data_def_rtcom_get, _mgapilib.data_def_rtcom_set)
    __swig_setmethods__["minval"] = _mgapilib.data_def_minval_set
    __swig_getmethods__["minval"] = _mgapilib.data_def_minval_get
    if _newclass:minval = _swig_property(_mgapilib.data_def_minval_get, _mgapilib.data_def_minval_set)
    __swig_setmethods__["maxval"] = _mgapilib.data_def_maxval_set
    __swig_getmethods__["maxval"] = _mgapilib.data_def_maxval_get
    if _newclass:maxval = _swig_property(_mgapilib.data_def_maxval_get, _mgapilib.data_def_maxval_set)
    __swig_setmethods__["defval"] = _mgapilib.data_def_defval_set
    __swig_getmethods__["defval"] = _mgapilib.data_def_defval_get
    if _newclass:defval = _swig_property(_mgapilib.data_def_defval_get, _mgapilib.data_def_defval_set)
    __swig_setmethods__["defstr"] = _mgapilib.data_def_defstr_set
    __swig_getmethods__["defstr"] = _mgapilib.data_def_defstr_get
    if _newclass:defstr = _swig_property(_mgapilib.data_def_defstr_get, _mgapilib.data_def_defstr_set)
    __swig_setmethods__["def_set"] = _mgapilib.data_def_def_set_set
    __swig_getmethods__["def_set"] = _mgapilib.data_def_def_set_get
    if _newclass:def_set = _swig_property(_mgapilib.data_def_def_set_get, _mgapilib.data_def_def_set_set)
    __swig_setmethods__["limit_set"] = _mgapilib.data_def_limit_set_set
    __swig_getmethods__["limit_set"] = _mgapilib.data_def_limit_set_get
    if _newclass:limit_set = _swig_property(_mgapilib.data_def_limit_set_get, _mgapilib.data_def_limit_set_set)
    __swig_setmethods__["enum_set"] = _mgapilib.data_def_enum_set_set
    __swig_getmethods__["enum_set"] = _mgapilib.data_def_enum_set_get
    if _newclass:enum_set = _swig_property(_mgapilib.data_def_enum_set_get, _mgapilib.data_def_enum_set_set)
    __swig_setmethods__["spare3"] = _mgapilib.data_def_spare3_set
    __swig_getmethods__["spare3"] = _mgapilib.data_def_spare3_get
    if _newclass:spare3 = _swig_property(_mgapilib.data_def_spare3_get, _mgapilib.data_def_spare3_set)
    __swig_setmethods__["spare4"] = _mgapilib.data_def_spare4_set
    __swig_getmethods__["spare4"] = _mgapilib.data_def_spare4_get
    if _newclass:spare4 = _swig_property(_mgapilib.data_def_spare4_get, _mgapilib.data_def_spare4_set)
    __swig_setmethods__["rtdata"] = _mgapilib.data_def_rtdata_set
    __swig_getmethods__["rtdata"] = _mgapilib.data_def_rtdata_get
    if _newclass:rtdata = _swig_property(_mgapilib.data_def_rtdata_get, _mgapilib.data_def_rtdata_set)
    def __init__(self, *args): 
        this = _mgapilib.new_data_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_data_def
    __del__ = lambda self : None;
data_def_swigregister = _mgapilib.data_def_swigregister
data_def_swigregister(data_def)

class record_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, record_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, record_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.record_def_code_set
    __swig_getmethods__["code"] = _mgapilib.record_def_code_get
    if _newclass:code = _swig_property(_mgapilib.record_def_code_get, _mgapilib.record_def_code_set)
    __swig_setmethods__["type"] = _mgapilib.record_def_type_set
    __swig_getmethods__["type"] = _mgapilib.record_def_type_get
    if _newclass:type = _swig_property(_mgapilib.record_def_type_get, _mgapilib.record_def_type_set)
    __swig_setmethods__["key"] = _mgapilib.record_def_key_set
    __swig_getmethods__["key"] = _mgapilib.record_def_key_get
    if _newclass:key = _swig_property(_mgapilib.record_def_key_get, _mgapilib.record_def_key_set)
    __swig_setmethods__["display"] = _mgapilib.record_def_display_set
    __swig_getmethods__["display"] = _mgapilib.record_def_display_get
    if _newclass:display = _swig_property(_mgapilib.record_def_display_get, _mgapilib.record_def_display_set)
    __swig_setmethods__["edit"] = _mgapilib.record_def_edit_set
    __swig_getmethods__["edit"] = _mgapilib.record_def_edit_get
    if _newclass:edit = _swig_property(_mgapilib.record_def_edit_get, _mgapilib.record_def_edit_set)
    __swig_setmethods__["search"] = _mgapilib.record_def_search_set
    __swig_getmethods__["search"] = _mgapilib.record_def_search_get
    if _newclass:search = _swig_property(_mgapilib.record_def_search_get, _mgapilib.record_def_search_set)
    __swig_setmethods__["packed"] = _mgapilib.record_def_packed_set
    __swig_getmethods__["packed"] = _mgapilib.record_def_packed_get
    if _newclass:packed = _swig_property(_mgapilib.record_def_packed_get, _mgapilib.record_def_packed_set)
    __swig_setmethods__["flt"] = _mgapilib.record_def_flt_set
    __swig_getmethods__["flt"] = _mgapilib.record_def_flt_get
    if _newclass:flt = _swig_property(_mgapilib.record_def_flt_get, _mgapilib.record_def_flt_set)
    __swig_setmethods__["spare1"] = _mgapilib.record_def_spare1_set
    __swig_getmethods__["spare1"] = _mgapilib.record_def_spare1_get
    if _newclass:spare1 = _swig_property(_mgapilib.record_def_spare1_get, _mgapilib.record_def_spare1_set)
    __swig_setmethods__["siteid"] = _mgapilib.record_def_siteid_set
    __swig_getmethods__["siteid"] = _mgapilib.record_def_siteid_get
    if _newclass:siteid = _swig_property(_mgapilib.record_def_siteid_get, _mgapilib.record_def_siteid_set)
    __swig_setmethods__["verno"] = _mgapilib.record_def_verno_set
    __swig_getmethods__["verno"] = _mgapilib.record_def_verno_get
    if _newclass:verno = _swig_property(_mgapilib.record_def_verno_get, _mgapilib.record_def_verno_set)
    __swig_setmethods__["xcode"] = _mgapilib.record_def_xcode_set
    __swig_getmethods__["xcode"] = _mgapilib.record_def_xcode_get
    if _newclass:xcode = _swig_property(_mgapilib.record_def_xcode_get, _mgapilib.record_def_xcode_set)
    __swig_setmethods__["xstring"] = _mgapilib.record_def_xstring_set
    __swig_getmethods__["xstring"] = _mgapilib.record_def_xstring_get
    if _newclass:xstring = _swig_property(_mgapilib.record_def_xstring_get, _mgapilib.record_def_xstring_set)
    __swig_setmethods__["acnt"] = _mgapilib.record_def_acnt_set
    __swig_getmethods__["acnt"] = _mgapilib.record_def_acnt_get
    if _newclass:acnt = _swig_property(_mgapilib.record_def_acnt_get, _mgapilib.record_def_acnt_set)
    __swig_setmethods__["len"] = _mgapilib.record_def_len_set
    __swig_getmethods__["len"] = _mgapilib.record_def_len_get
    if _newclass:len = _swig_property(_mgapilib.record_def_len_get, _mgapilib.record_def_len_set)
    __swig_setmethods__["id"] = _mgapilib.record_def_id_set
    __swig_getmethods__["id"] = _mgapilib.record_def_id_get
    if _newclass:id = _swig_property(_mgapilib.record_def_id_get, _mgapilib.record_def_id_set)
    __swig_setmethods__["label"] = _mgapilib.record_def_label_set
    __swig_getmethods__["label"] = _mgapilib.record_def_label_get
    if _newclass:label = _swig_property(_mgapilib.record_def_label_get, _mgapilib.record_def_label_set)
    __swig_setmethods__["msg"] = _mgapilib.record_def_msg_set
    __swig_getmethods__["msg"] = _mgapilib.record_def_msg_get
    if _newclass:msg = _swig_property(_mgapilib.record_def_msg_get, _mgapilib.record_def_msg_set)
    __swig_setmethods__["comment"] = _mgapilib.record_def_comment_set
    __swig_getmethods__["comment"] = _mgapilib.record_def_comment_get
    if _newclass:comment = _swig_property(_mgapilib.record_def_comment_get, _mgapilib.record_def_comment_set)
    __swig_setmethods__["cnv"] = _mgapilib.record_def_cnv_set
    __swig_getmethods__["cnv"] = _mgapilib.record_def_cnv_get
    if _newclass:cnv = _swig_property(_mgapilib.record_def_cnv_get, _mgapilib.record_def_cnv_set)
    __swig_setmethods__["pre"] = _mgapilib.record_def_pre_set
    __swig_getmethods__["pre"] = _mgapilib.record_def_pre_get
    if _newclass:pre = _swig_property(_mgapilib.record_def_pre_get, _mgapilib.record_def_pre_set)
    __swig_setmethods__["act"] = _mgapilib.record_def_act_set
    __swig_getmethods__["act"] = _mgapilib.record_def_act_get
    if _newclass:act = _swig_property(_mgapilib.record_def_act_get, _mgapilib.record_def_act_set)
    __swig_setmethods__["path"] = _mgapilib.record_def_path_set
    __swig_getmethods__["path"] = _mgapilib.record_def_path_get
    if _newclass:path = _swig_property(_mgapilib.record_def_path_get, _mgapilib.record_def_path_set)
    __swig_setmethods__["spare2"] = _mgapilib.record_def_spare2_set
    __swig_getmethods__["spare2"] = _mgapilib.record_def_spare2_get
    if _newclass:spare2 = _swig_property(_mgapilib.record_def_spare2_get, _mgapilib.record_def_spare2_set)
    __swig_setmethods__["rtcom"] = _mgapilib.record_def_rtcom_set
    __swig_getmethods__["rtcom"] = _mgapilib.record_def_rtcom_get
    if _newclass:rtcom = _swig_property(_mgapilib.record_def_rtcom_get, _mgapilib.record_def_rtcom_set)
    __swig_setmethods__["ilev"] = _mgapilib.record_def_ilev_set
    __swig_getmethods__["ilev"] = _mgapilib.record_def_ilev_get
    if _newclass:ilev = _swig_property(_mgapilib.record_def_ilev_get, _mgapilib.record_def_ilev_set)
    __swig_setmethods__["spare5"] = _mgapilib.record_def_spare5_set
    __swig_getmethods__["spare5"] = _mgapilib.record_def_spare5_get
    if _newclass:spare5 = _swig_property(_mgapilib.record_def_spare5_get, _mgapilib.record_def_spare5_set)
    __swig_setmethods__["spare6"] = _mgapilib.record_def_spare6_set
    __swig_getmethods__["spare6"] = _mgapilib.record_def_spare6_get
    if _newclass:spare6 = _swig_property(_mgapilib.record_def_spare6_get, _mgapilib.record_def_spare6_set)
    __swig_setmethods__["nattr"] = _mgapilib.record_def_nattr_set
    __swig_getmethods__["nattr"] = _mgapilib.record_def_nattr_get
    if _newclass:nattr = _swig_property(_mgapilib.record_def_nattr_get, _mgapilib.record_def_nattr_set)
    __swig_setmethods__["nparent"] = _mgapilib.record_def_nparent_set
    __swig_getmethods__["nparent"] = _mgapilib.record_def_nparent_get
    if _newclass:nparent = _swig_property(_mgapilib.record_def_nparent_get, _mgapilib.record_def_nparent_set)
    __swig_setmethods__["nchild"] = _mgapilib.record_def_nchild_set
    __swig_getmethods__["nchild"] = _mgapilib.record_def_nchild_get
    if _newclass:nchild = _swig_property(_mgapilib.record_def_nchild_get, _mgapilib.record_def_nchild_set)
    __swig_setmethods__["nalias"] = _mgapilib.record_def_nalias_set
    __swig_getmethods__["nalias"] = _mgapilib.record_def_nalias_get
    if _newclass:nalias = _swig_property(_mgapilib.record_def_nalias_get, _mgapilib.record_def_nalias_set)
    __swig_setmethods__["attr"] = _mgapilib.record_def_attr_set
    __swig_getmethods__["attr"] = _mgapilib.record_def_attr_get
    if _newclass:attr = _swig_property(_mgapilib.record_def_attr_get, _mgapilib.record_def_attr_set)
    __swig_setmethods__["parent"] = _mgapilib.record_def_parent_set
    __swig_getmethods__["parent"] = _mgapilib.record_def_parent_get
    if _newclass:parent = _swig_property(_mgapilib.record_def_parent_get, _mgapilib.record_def_parent_set)
    __swig_setmethods__["child"] = _mgapilib.record_def_child_set
    __swig_getmethods__["child"] = _mgapilib.record_def_child_get
    if _newclass:child = _swig_property(_mgapilib.record_def_child_get, _mgapilib.record_def_child_set)
    __swig_setmethods__["alias"] = _mgapilib.record_def_alias_set
    __swig_getmethods__["alias"] = _mgapilib.record_def_alias_get
    if _newclass:alias = _swig_property(_mgapilib.record_def_alias_get, _mgapilib.record_def_alias_set)
    __swig_setmethods__["xlist"] = _mgapilib.record_def_xlist_set
    __swig_getmethods__["xlist"] = _mgapilib.record_def_xlist_get
    if _newclass:xlist = _swig_property(_mgapilib.record_def_xlist_get, _mgapilib.record_def_xlist_set)
    __swig_setmethods__["preid"] = _mgapilib.record_def_preid_set
    __swig_getmethods__["preid"] = _mgapilib.record_def_preid_get
    if _newclass:preid = _swig_property(_mgapilib.record_def_preid_get, _mgapilib.record_def_preid_set)
    __swig_setmethods__["maxid"] = _mgapilib.record_def_maxid_set
    __swig_getmethods__["maxid"] = _mgapilib.record_def_maxid_get
    if _newclass:maxid = _swig_property(_mgapilib.record_def_maxid_get, _mgapilib.record_def_maxid_set)
    __swig_setmethods__["rtrec"] = _mgapilib.record_def_rtrec_set
    __swig_getmethods__["rtrec"] = _mgapilib.record_def_rtrec_get
    if _newclass:rtrec = _swig_property(_mgapilib.record_def_rtrec_get, _mgapilib.record_def_rtrec_set)
    def __init__(self, *args): 
        this = _mgapilib.new_record_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_record_def
    __del__ = lambda self : None;
record_def_swigregister = _mgapilib.record_def_swigregister
record_def_swigregister(record_def)

class attr_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attr_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attr_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.attr_def_code_set
    __swig_getmethods__["code"] = _mgapilib.attr_def_code_get
    if _newclass:code = _swig_property(_mgapilib.attr_def_code_get, _mgapilib.attr_def_code_set)
    __swig_setmethods__["bit"] = _mgapilib.attr_def_bit_set
    __swig_getmethods__["bit"] = _mgapilib.attr_def_bit_get
    if _newclass:bit = _swig_property(_mgapilib.attr_def_bit_get, _mgapilib.attr_def_bit_set)
    __swig_setmethods__["ptr"] = _mgapilib.attr_def_ptr_set
    __swig_getmethods__["ptr"] = _mgapilib.attr_def_ptr_get
    if _newclass:ptr = _swig_property(_mgapilib.attr_def_ptr_get, _mgapilib.attr_def_ptr_set)
    __swig_setmethods__["delta"] = _mgapilib.attr_def_delta_set
    __swig_getmethods__["delta"] = _mgapilib.attr_def_delta_get
    if _newclass:delta = _swig_property(_mgapilib.attr_def_delta_get, _mgapilib.attr_def_delta_set)
    def __init__(self, *args): 
        this = _mgapilib.new_attr_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_attr_def
    __del__ = lambda self : None;
attr_def_swigregister = _mgapilib.attr_def_swigregister
attr_def_swigregister(attr_def)

class parent_def_str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parent_def_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parent_def_str, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mgapilib.parent_def_str_name_set
    __swig_getmethods__["name"] = _mgapilib.parent_def_str_name_get
    if _newclass:name = _swig_property(_mgapilib.parent_def_str_name_get, _mgapilib.parent_def_str_name_set)
    def __init__(self, *args): 
        this = _mgapilib.new_parent_def_str(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_parent_def_str
    __del__ = lambda self : None;
parent_def_str_swigregister = _mgapilib.parent_def_str_swigregister
parent_def_str_swigregister(parent_def_str)

class child_def_str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, child_def_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, child_def_str, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mgapilib.child_def_str_name_set
    __swig_getmethods__["name"] = _mgapilib.child_def_str_name_get
    if _newclass:name = _swig_property(_mgapilib.child_def_str_name_get, _mgapilib.child_def_str_name_set)
    def __init__(self, *args): 
        this = _mgapilib.new_child_def_str(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_child_def_str
    __del__ = lambda self : None;
child_def_str_swigregister = _mgapilib.child_def_str_swigregister
child_def_str_swigregister(child_def_str)

class alias_def_str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alias_def_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alias_def_str, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mgapilib.alias_def_str_name_set
    __swig_getmethods__["name"] = _mgapilib.alias_def_str_name_get
    if _newclass:name = _swig_property(_mgapilib.alias_def_str_name_get, _mgapilib.alias_def_str_name_set)
    def __init__(self, *args): 
        this = _mgapilib.new_alias_def_str(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_alias_def_str
    __del__ = lambda self : None;
alias_def_str_swigregister = _mgapilib.alias_def_str_swigregister
alias_def_str_swigregister(alias_def_str)

class parent_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parent_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parent_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.parent_def_code_set
    __swig_getmethods__["code"] = _mgapilib.parent_def_code_get
    if _newclass:code = _swig_property(_mgapilib.parent_def_code_get, _mgapilib.parent_def_code_set)
    def __init__(self, *args): 
        this = _mgapilib.new_parent_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_parent_def
    __del__ = lambda self : None;
parent_def_swigregister = _mgapilib.parent_def_swigregister
parent_def_swigregister(parent_def)

class child_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, child_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, child_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.child_def_code_set
    __swig_getmethods__["code"] = _mgapilib.child_def_code_get
    if _newclass:code = _swig_property(_mgapilib.child_def_code_get, _mgapilib.child_def_code_set)
    def __init__(self, *args): 
        this = _mgapilib.new_child_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_child_def
    __del__ = lambda self : None;
child_def_swigregister = _mgapilib.child_def_swigregister
child_def_swigregister(child_def)

class alias_def(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alias_def, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alias_def, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mgapilib.alias_def_code_set
    __swig_getmethods__["code"] = _mgapilib.alias_def_code_get
    if _newclass:code = _swig_property(_mgapilib.alias_def_code_get, _mgapilib.alias_def_code_set)
    def __init__(self, *args): 
        this = _mgapilib.new_alias_def(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_alias_def
    __del__ = lambda self : None;
alias_def_swigregister = _mgapilib.alias_def_swigregister
alias_def_swigregister(alias_def)

ddIsRcode = _mgapilib.ddIsRcode
ddIsDcode = _mgapilib.ddIsDcode
ddGetExtFieldNth = _mgapilib.ddGetExtFieldNth
ddGetFieldNth = _mgapilib.ddGetFieldNth
ddGetTagType = _mgapilib.ddGetTagType
ddGetKey = _mgapilib.ddGetKey
ddGetVersion = _mgapilib.ddGetVersion
ddIsDisplay = _mgapilib.ddIsDisplay
ddIsEdit = _mgapilib.ddIsEdit
ddIsSearch = _mgapilib.ddIsSearch
ddGetName = _mgapilib.ddGetName
ddGetLabel = _mgapilib.ddGetLabel
ddGetDesc = _mgapilib.ddGetDesc
ddGetLength = _mgapilib.ddGetLength
ddGetMyCode = _mgapilib.ddGetMyCode
ddGetExtendCode = _mgapilib.ddGetExtendCode
ddGetUCode = _mgapilib.ddGetUCode
ddGetSiteNo = _mgapilib.ddGetSiteNo
ddGetSiteId = _mgapilib.ddGetSiteId
ddIsFlt = _mgapilib.ddIsFlt
ddIsLegalXcode = _mgapilib.ddIsLegalXcode
ddGetMinVal = _mgapilib.ddGetMinVal
ddGetMaxVal = _mgapilib.ddGetMaxVal
ddGetDefVal = _mgapilib.ddGetDefVal
ddGetDefString = _mgapilib.ddGetDefString
ddIsDefSet = _mgapilib.ddIsDefSet
ddIsRangeSet = _mgapilib.ddIsRangeSet
ddIsEnumSet = _mgapilib.ddIsEnumSet
ddGetExtFieldCount = _mgapilib.ddGetExtFieldCount
ddGetFieldCount = _mgapilib.ddGetFieldCount
ddGetParentCount = _mgapilib.ddGetParentCount
ddGetParentNth = _mgapilib.ddGetParentNth
ddGetChildCount = _mgapilib.ddGetChildCount
ddGetAliasCount = _mgapilib.ddGetAliasCount
ddGetPrefix = _mgapilib.ddGetPrefix
ddIsFieldFollowInLine = _mgapilib.ddIsFieldFollowInLine
ddIsFieldFollowPointer = _mgapilib.ddIsFieldFollowPointer
ddIsFieldFollowAll = _mgapilib.ddIsFieldFollowAll
ddNameToCode = _mgapilib.ddNameToCode
ddLabelToCode = _mgapilib.ddLabelToCode
ddIsField = _mgapilib.ddIsField
ddGetFieldOffset = _mgapilib.ddGetFieldOffset
ddGetIlevel = _mgapilib.ddGetIlevel
ddGetMaxId = _mgapilib.ddGetMaxId
ddSetMaxId = _mgapilib.ddSetMaxId
ddIsEnumOptionMenu = _mgapilib.ddIsEnumOptionMenu
ddIsPointer = _mgapilib.ddIsPointer
ddIsStructure = _mgapilib.ddIsStructure
ddIsDC = _mgapilib.ddIsDC
ddExtensionIterateSites = _mgapilib.ddExtensionIterateSites
ddExtensionIterateRecords = _mgapilib.ddExtensionIterateRecords
ddExtensionIterateFields = _mgapilib.ddExtensionIterateFields
NAME_mgInitDD = _mgapilib.NAME_mgInitDD
NAME_mgInitAction = _mgapilib.NAME_mgInitAction
mgGetExtRec = _mgapilib.mgGetExtRec
mgGetAttRec = _mgapilib.mgGetAttRec
mgGetName = _mgapilib.mgGetName
mgGetTextString = _mgapilib.mgGetTextString
mgGetComment = _mgapilib.mgGetComment
mgGetPolyColorRGBBase = _mgapilib.mgGetPolyColorRGB
mgGetPolyAltColorRGBBase = _mgapilib.mgGetPolyAltColorRGB
mgGetVtxColorRGBBase = _mgapilib.mgGetVtxColorRGB
mgGetVtxColorRGBABase = _mgapilib.mgGetVtxColorRGBA
mgGetVtxBackColorRGBBase = _mgapilib.mgGetVtxBackColorRGB
mgHasAtt = _mgapilib.mgHasAtt
mgGetCoord3dBase = _mgapilib.mgGetCoord3d
mgGetNormColorBase = _mgapilib.mgGetNormColor
mgGetMatTextureLayerBase = _mgapilib.mgGetMatTextureLayer
mgGetCoord2iBase = _mgapilib.mgGetCoord2i
mgGetColorRGBABase = _mgapilib.mgGetColorRGBA
mgGetCoord3fBase = _mgapilib.mgGetCoord3f
mgGetVectorBase = _mgapilib.mgGetVector
mgGetVectordBase = _mgapilib.mgGetVectord
mgGetPlaneBase = _mgapilib.mgGetPlane
mgGetMatrixBase = _mgapilib.mgGetMatrix
mgGetSwitchMaskCount = _mgapilib.mgGetSwitchMaskCount
mgGetSwitchMaskNoBase = _mgapilib.mgGetSwitchMaskNo
mgGetSwitchBitBase = _mgapilib.mgGetSwitchBit
mgGetSwitchMaskName = _mgapilib.mgGetSwitchMaskName
MPRIM_TRI_STRIP = _mgapilib.MPRIM_TRI_STRIP
MPRIM_TRI_FAN = _mgapilib.MPRIM_TRI_FAN
MPRIM_QUAD_STRIP = _mgapilib.MPRIM_QUAD_STRIP
MPRIM_INDEXED_POLY = _mgapilib.MPRIM_INDEXED_POLY
MMESH_VTXCOORD = _mgapilib.MMESH_VTXCOORD
MMESH_VTXCOLOR = _mgapilib.MMESH_VTXCOLOR
MMESH_VTXCOLORRGB = _mgapilib.MMESH_VTXCOLORRGB
MMESH_VTXNORMAL = _mgapilib.MMESH_VTXNORMAL
MMESH_VTXUV0 = _mgapilib.MMESH_VTXUV0
MMESH_VTXUV1 = _mgapilib.MMESH_VTXUV1
MMESH_VTXUV2 = _mgapilib.MMESH_VTXUV2
MMESH_VTXUV3 = _mgapilib.MMESH_VTXUV3
MMESH_VTXUV4 = _mgapilib.MMESH_VTXUV4
MMESH_VTXUV5 = _mgapilib.MMESH_VTXUV5
MMESH_VTXUV6 = _mgapilib.MMESH_VTXUV6
MMESH_VTXUV7 = _mgapilib.MMESH_VTXUV7
mgMeshGetVtxPool = _mgapilib.mgMeshGetVtxPool
mgMeshGetVtxMask = _mgapilib.mgMeshGetVtxMask
mgMeshGetVtxStride = _mgapilib.mgMeshGetVtxStride
mgMeshGetVtxOffset = _mgapilib.mgMeshGetVtxOffset
mgMeshPrimitiveGetType = _mgapilib.mgMeshPrimitiveGetType
mgMeshPrimitiveGetNumVtx = _mgapilib.mgMeshPrimitiveGetNumVtx
mgMeshPrimitiveGetVtxIndexArrayBase = _mgapilib.mgMeshPrimitiveGetVtxIndexArray
mgMeshGetVtxCoordBase = _mgapilib.mgMeshGetVtxCoord
mgMeshGetVtxColorBase = _mgapilib.mgMeshGetVtxColor
mgMeshGetVtxColorRGBBase = _mgapilib.mgMeshGetVtxColorRGB
mgMeshGetVtxColorRGBABase = _mgapilib.mgMeshGetVtxColorRGBA
mgMeshGetVtxColorAlphaBase = _mgapilib.mgMeshGetVtxColorAlpha
mgMeshGetVtxNormalBase = _mgapilib.mgMeshGetVtxNormal
mgMeshGetVtxUVBase = _mgapilib.mgMeshGetVtxUV
mgSetName = _mgapilib.mgSetName
mgSetNameUnique = _mgapilib.mgSetNameUnique
mgSetTextString = _mgapilib.mgSetTextString
mgSetComment = _mgapilib.mgSetComment
mgDeleteComment = _mgapilib.mgDeleteComment
mgSetPolyColorRGB = _mgapilib.mgSetPolyColorRGB
mgSetPolyAltColorRGB = _mgapilib.mgSetPolyAltColorRGB
mgSetVtxColorRGB = _mgapilib.mgSetVtxColorRGB
mgSetVtxColorRGBA = _mgapilib.mgSetVtxColorRGBA
mgSetVtxBackColorRGB = _mgapilib.mgSetVtxBackColorRGB
mgSetPlane = _mgapilib.mgSetPlane
mgSetCoord3d = _mgapilib.mgSetCoord3d
mgSetNormColor = _mgapilib.mgSetNormColor
mgSetMatTextureLayer = _mgapilib.mgSetMatTextureLayer
mgSetCoord2i = _mgapilib.mgSetCoord2i
mgSetColorRGBA = _mgapilib.mgSetColorRGBA
mgSetCoord3f = _mgapilib.mgSetCoord3f
mgSetVector = _mgapilib.mgSetVector
mgSetVectord = _mgapilib.mgSetVectord
mgSetMatrixBase = _mgapilib.mgSetMatrix
mgAddSwitchMask = _mgapilib.mgAddSwitchMask
mgDeleteSwitchMask = _mgapilib.mgDeleteSwitchMask
mgInitSwitchMask = _mgapilib.mgInitSwitchMask
mgSetSwitchBit = _mgapilib.mgSetSwitchBit
mgSetSwitchMaskName = _mgapilib.mgSetSwitchMaskName
mgMeshCreateVtxPool = _mgapilib.mgMeshCreateVtxPool
mgMeshCreatePrimitives = _mgapilib.mgMeshCreatePrimitives
mgMeshPrimitiveSetType = _mgapilib.mgMeshPrimitiveSetType
mgMeshPrimitiveSetVtxIndexArray = _mgapilib.mgMeshPrimitiveSetVtxIndexArray
mgMeshSetVtxCoord = _mgapilib.mgMeshSetVtxCoord
mgMeshSetVtxColor = _mgapilib.mgMeshSetVtxColor
mgMeshSetVtxColorRGBA = _mgapilib.mgMeshSetVtxColorRGBA
mgMeshSetVtxColorRGB = _mgapilib.mgMeshSetVtxColorRGB
mgMeshSetVtxColorAlpha = _mgapilib.mgMeshSetVtxColorAlpha
mgMeshSetVtxNormal = _mgapilib.mgMeshSetVtxNormal
mgMeshSetVtxUV = _mgapilib.mgMeshSetVtxUV
mgMeshSetVtxMask = _mgapilib.mgMeshSetVtxMask
MIMG_INT = _mgapilib.MIMG_INT
MIMG_INTA = _mgapilib.MIMG_INTA
MIMG_RGB = _mgapilib.MIMG_RGB
MIMG_RGBA = _mgapilib.MIMG_RGBA
MIMG_NO_ERROR = _mgapilib.MIMG_NO_ERROR
MIMG_MALLOC_ERR = _mgapilib.MIMG_MALLOC_ERR
MIMG_OPEN_ERR = _mgapilib.MIMG_OPEN_ERR
MIMG_READ_ERR = _mgapilib.MIMG_READ_ERR
MIMG_WRITE_ERR = _mgapilib.MIMG_WRITE_ERR
MIMG_SEEK_ERR = _mgapilib.MIMG_SEEK_ERR
MIMG_BAD_FILE_TYPE = _mgapilib.MIMG_BAD_FILE_TYPE
MIMG_IMAGE_TOO_BIG = _mgapilib.MIMG_IMAGE_TOO_BIG
MIMG_BAD_DATA = _mgapilib.MIMG_BAD_DATA
MIMG_NO_TILE = _mgapilib.MIMG_NO_TILE
MIMG_TILE_READ_ERR = _mgapilib.MIMG_TILE_READ_ERR
MIMG_TILE_WRITE_ERR = _mgapilib.MIMG_TILE_WRITE_ERR
MIMG_GEOTYPE_CTRLPT = _mgapilib.MIMG_GEOTYPE_CTRLPT
MIMG_GEOPROJ_GEODETIC = _mgapilib.MIMG_GEOPROJ_GEODETIC
MIMG_GEOPROJ_UTM = _mgapilib.MIMG_GEOPROJ_UTM
MIMG_GEOEARTH_WGS84 = _mgapilib.MIMG_GEOEARTH_WGS84
MIMG_GEOEARTH_WGS72 = _mgapilib.MIMG_GEOEARTH_WGS72
MIMG_GEOEARTH_BESSEL = _mgapilib.MIMG_GEOEARTH_BESSEL
MIMG_GEOEARTH_CLARK1866 = _mgapilib.MIMG_GEOEARTH_CLARK1866
MIMG_GEOIMAGEORIGIN_LL = _mgapilib.MIMG_GEOIMAGEORIGIN_LL
MIMG_GEOIMAGEORIGIN_UL = _mgapilib.MIMG_GEOIMAGEORIGIN_UL
MIMG_GEOHEMISPHERE_NORTH = _mgapilib.MIMG_GEOHEMISPHERE_NORTH
MIMG_GEOHEMISPHERE_SOUTH = _mgapilib.MIMG_GEOHEMISPHERE_SOUTH
MSPT_ABSOLUTE = _mgapilib.MSPT_ABSOLUTE
MSPT_RELATIVE = _mgapilib.MSPT_RELATIVE
MSPT_NOPATH = _mgapilib.MSPT_NOPATH
MSPT_UNKNOWN = _mgapilib.MSPT_UNKNOWN
class mggeocoorddata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mggeocoorddata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mggeocoorddata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _mgapilib.mggeocoorddata_u_set
    __swig_getmethods__["u"] = _mgapilib.mggeocoorddata_u_get
    if _newclass:u = _swig_property(_mgapilib.mggeocoorddata_u_get, _mgapilib.mggeocoorddata_u_set)
    __swig_setmethods__["v"] = _mgapilib.mggeocoorddata_v_set
    __swig_getmethods__["v"] = _mgapilib.mggeocoorddata_v_get
    if _newclass:v = _swig_property(_mgapilib.mggeocoorddata_v_get, _mgapilib.mggeocoorddata_v_set)
    __swig_setmethods__["lat"] = _mgapilib.mggeocoorddata_lat_set
    __swig_getmethods__["lat"] = _mgapilib.mggeocoorddata_lat_get
    if _newclass:lat = _swig_property(_mgapilib.mggeocoorddata_lat_get, _mgapilib.mggeocoorddata_lat_set)
    __swig_setmethods__["lon"] = _mgapilib.mggeocoorddata_lon_set
    __swig_getmethods__["lon"] = _mgapilib.mggeocoorddata_lon_get
    if _newclass:lon = _swig_property(_mgapilib.mggeocoorddata_lon_get, _mgapilib.mggeocoorddata_lon_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mggeocoorddata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mggeocoorddata
    __del__ = lambda self : None;
mggeocoorddata_swigregister = _mgapilib.mggeocoorddata_swigregister
mggeocoorddata_swigregister(mggeocoorddata)

MIMG_MAXNAMELEN = _mgapilib.MIMG_MAXNAMELEN
class mgsubtexturedata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgsubtexturedata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgsubtexturedata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mgapilib.mgsubtexturedata_name_set
    __swig_getmethods__["name"] = _mgapilib.mgsubtexturedata_name_get
    if _newclass:name = _swig_property(_mgapilib.mgsubtexturedata_name_get, _mgapilib.mgsubtexturedata_name_set)
    __swig_setmethods__["l"] = _mgapilib.mgsubtexturedata_l_set
    __swig_getmethods__["l"] = _mgapilib.mgsubtexturedata_l_get
    if _newclass:l = _swig_property(_mgapilib.mgsubtexturedata_l_get, _mgapilib.mgsubtexturedata_l_set)
    __swig_setmethods__["b"] = _mgapilib.mgsubtexturedata_b_set
    __swig_getmethods__["b"] = _mgapilib.mgsubtexturedata_b_get
    if _newclass:b = _swig_property(_mgapilib.mgsubtexturedata_b_get, _mgapilib.mgsubtexturedata_b_set)
    __swig_setmethods__["r"] = _mgapilib.mgsubtexturedata_r_set
    __swig_getmethods__["r"] = _mgapilib.mgsubtexturedata_r_get
    if _newclass:r = _swig_property(_mgapilib.mgsubtexturedata_r_get, _mgapilib.mgsubtexturedata_r_set)
    __swig_setmethods__["t"] = _mgapilib.mgsubtexturedata_t_set
    __swig_getmethods__["t"] = _mgapilib.mgsubtexturedata_t_get
    if _newclass:t = _swig_property(_mgapilib.mgsubtexturedata_t_get, _mgapilib.mgsubtexturedata_t_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgsubtexturedata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgsubtexturedata
    __del__ = lambda self : None;
mgsubtexturedata_swigregister = _mgapilib.mgsubtexturedata_swigregister
mgsubtexturedata_swigregister(mgsubtexturedata)

mgReadImageBase = _mgapilib.mgReadImage
mgReadImageHeaderBase = _mgapilib.mgReadImageHeader
mgReadImageAttributes = _mgapilib.mgReadImageAttributes
mgNewImageInfo = _mgapilib.mgNewImageInfo
mgReadImageInfo = _mgapilib.mgReadImageInfo
mgGetTextureWidthBase = _mgapilib.mgGetTextureWidth
mgGetTextureHeightBase = _mgapilib.mgGetTextureHeight
mgGetTextureTypeBase = _mgapilib.mgGetTextureType
mgGetTextureSampleSizeBase = _mgapilib.mgGetTextureSampleSize
mgGetTextureTiledFlagBase = _mgapilib.mgGetTextureTiledFlag
mgGetTextureMinMaxBase = _mgapilib.mgGetTextureMinMax
mgHasTextureTransparentValueBase = _mgapilib.mgHasTextureTransparentValue
mgGetTextureTransparentValueBase = _mgapilib.mgGetTextureTransparentValue
mgGetTextureSignedFlagBase = _mgapilib.mgGetTextureSignedFlag
mgNewImageGeoInfo = _mgapilib.mgNewImageGeoInfo
mgReadImageGeoInfo = _mgapilib.mgReadImageGeoInfo
mgGetTextureGeoTypeBase = _mgapilib.mgGetTextureGeoType
mgGetTextureGeoProjectionBase = _mgapilib.mgGetTextureGeoProjection
mgGetTextureGeoEarthModelBase = _mgapilib.mgGetTextureGeoEarthModel
mgGetTextureGeoUTMZoneBase = _mgapilib.mgGetTextureGeoUTMZone
mgGetTextureGeoUTMHemisphereBase = _mgapilib.mgGetTextureGeoUTMHemisphere
mgGetTextureGeoImageOriginBase = _mgapilib.mgGetTextureGeoImageOrigin
mgGetTextureGeoNumCtlPtsBase = _mgapilib.mgGetTextureGeoNumCtlPts
mgGetTextureGeoCtlPtBase = _mgapilib.mgGetTextureGeoCtlPt
mgReadTexture = _mgapilib.mgReadTexture
mgReadTextureAndAlpha = _mgapilib.mgReadTextureAndAlpha
mgInsertTexture = _mgapilib.mgInsertTexture
mgInsertTextureAndAlpha = _mgapilib.mgInsertTextureAndAlpha
mgReadTexturePalette = _mgapilib.mgReadTexturePalette
mgGetTextureIndex = _mgapilib.mgGetTextureIndex
mgGetTextureName = _mgapilib.mgGetTextureName
mgGetTextureSaveName = _mgapilib.mgGetTextureSaveName
mgTextureGetSavePathType = _mgapilib.mgTextureGetSavePathType
mgGetTexturePositionBase = _mgapilib.mgGetTexturePosition
mgGetTextureAttributes = _mgapilib.mgGetTextureAttributes
mgGetTextureTexels = _mgapilib.mgGetTextureTexels
mgIsTextureInPalette = _mgapilib.mgIsTextureInPalette
mgIsTextureIndexInPalette = _mgapilib.mgIsTextureIndexInPalette
mgGetFirstTextureBase = _mgapilib.mgGetFirstTexture
mgGetNextTextureBase = _mgapilib.mgGetNextTexture
mgIsTextureDefault = _mgapilib.mgIsTextureDefault
mgGetTextureCount = _mgapilib.mgGetTextureCount
mgGetTextureTotalSize = _mgapilib.mgGetTextureTotalSize
mgGetTextureSize = _mgapilib.mgGetTextureSize
mgGetImageRowWidthBase = _mgapilib.mgGetImageRowWidth
mgGeoCoordGetBase = _mgapilib.mgGeoCoordGet
mgGeoCoordCount = _mgapilib.mgGeoCoordCount
mgSubTextureGetBase = _mgapilib.mgSubTextureGet
mgSubTextureGetBoundsBase = _mgapilib.mgSubTextureGetBounds
mgSubTextureCount = _mgapilib.mgSubTextureCount
mgPurgeTextures = _mgapilib.mgPurgeTextures
MMSG_STATUS = _mgapilib.MMSG_STATUS
MMSG_WARNING = _mgapilib.MMSG_WARNING
MMSG_ERROR = _mgapilib.MMSG_ERROR
MMSG_TIP = _mgapilib.MMSG_TIP
mgPrintRec = _mgapilib.mgPrintRec
mgGetLastErrorBase = _mgapilib.mgGetLastError
mgSendMessage = _mgapilib.mgSendMessage
mgSetMessagesEnabled = _mgapilib.mgSetMessagesEnabled
mgGetMessagesEnabled = _mgapilib.mgGetMessagesEnabled
mgGetVersionBase = _mgapilib.mgGetVersion
mgGetOpenFlightVersionBase = _mgapilib.mgGetOpenFlightVersion
mgParamGetIntegerBase = _mgapilib.mgParamGetInteger
mgParamGetDoubleBase = _mgapilib.mgParamGetDouble
mgParamGetDouble2Base = _mgapilib.mgParamGetDouble2
mgParamGetDouble3Base = _mgapilib.mgParamGetDouble3
mgParamGetFloatBase = _mgapilib.mgParamGetFloat
mgParamExists = _mgapilib.mgParamExists
mgParamGetBoolBase = _mgapilib.mgParamGetBool
mgParamGetStringBase = _mgapilib.mgParamGetString
mgParamSetInteger = _mgapilib.mgParamSetInteger
mgParamSetDouble = _mgapilib.mgParamSetDouble
mgParamSetDouble2 = _mgapilib.mgParamSetDouble2
mgParamSetDouble3 = _mgapilib.mgParamSetDouble3
mgParamSetFloat = _mgapilib.mgParamSetFloat
mgParamSetBool = _mgapilib.mgParamSetBool
mgParamSetString = _mgapilib.mgParamSetString
mgParamAppendInteger = _mgapilib.mgParamAppendInteger
mgParamAppendDouble = _mgapilib.mgParamAppendDouble
mgParamAppendDouble2 = _mgapilib.mgParamAppendDouble2
mgParamAppendDouble3 = _mgapilib.mgParamAppendDouble3
mgParamAppendFloat = _mgapilib.mgParamAppendFloat
mgParamAppendBool = _mgapilib.mgParamAppendBool
mgParamAppendString = _mgapilib.mgParamAppendString
mgParamGetDimension = _mgapilib.mgParamGetDimension
mgParamGetSize = _mgapilib.mgParamGetSize
mgParamGetIntegerNthBase = _mgapilib.mgParamGetIntegerNth
mgParamGetDoubleNthBase = _mgapilib.mgParamGetDoubleNth
mgParamGetDouble2NthBase = _mgapilib.mgParamGetDouble2Nth
mgParamGetDouble3NthBase = _mgapilib.mgParamGetDouble3Nth
mgParamGetFloatNthBase = _mgapilib.mgParamGetFloatNth
mgParamGetBoolNthBase = _mgapilib.mgParamGetBoolNth
mgParamGetStringNthBase = _mgapilib.mgParamGetStringNth
MVENDOR_PRESAGIS = _mgapilib.MVENDOR_PRESAGIS
MVENDOR_MULTIGEN = _mgapilib.MVENDOR_MULTIGEN
MHELPFILE_PRESAGIS = _mgapilib.MHELPFILE_PRESAGIS
MHELPFILE_MULTIGEN = _mgapilib.MHELPFILE_MULTIGEN
MTA_VERSION = _mgapilib.MTA_VERSION
MTA_HELPCONTEXT = _mgapilib.MTA_HELPCONTEXT
MTA_FILTER = _mgapilib.MTA_FILTER
MTA_FILETYPE = _mgapilib.MTA_FILETYPE
MTA_PALETTELOCATION = _mgapilib.MTA_PALETTELOCATION
MTA_PALETTEICONNAME = _mgapilib.MTA_PALETTEICONNAME
MTA_PALETTEICON = _mgapilib.MTA_PALETTEICON
MTA_MENULOCATION = _mgapilib.MTA_MENULOCATION
MTA_MENUPOSITION = _mgapilib.MTA_MENUPOSITION
MTA_MENUSUBMENU = _mgapilib.MTA_MENUSUBMENU
MTA_MENULABEL = _mgapilib.MTA_MENULABEL
MTA_TOOLTIP = _mgapilib.MTA_TOOLTIP
MTA_DESCRIPTION = _mgapilib.MTA_DESCRIPTION
MTA_LAUNCHINFO = _mgapilib.MTA_LAUNCHINFO
MTA_ACTIVATETYPE = _mgapilib.MTA_ACTIVATETYPE
MTA_LICENSE = _mgapilib.MTA_LICENSE
MTA_DISABLEDEMO = _mgapilib.MTA_DISABLEDEMO
MTA_REPEATABLE = _mgapilib.MTA_REPEATABLE
MTA_SCRIPTABLE = _mgapilib.MTA_SCRIPTABLE
MTA_NOHIDESELECTOUTLINE = _mgapilib.MTA_NOHIDESELECTOUTLINE
MTA_NODIALOGPOSITIONPREFERENCE = _mgapilib.MTA_NODIALOGPOSITIONPREFERENCE
MPFA_TITLE = _mgapilib.MPFA_TITLE
MPFA_FLAGS = _mgapilib.MPFA_FLAGS
MPFA_DIRECTORY = _mgapilib.MPFA_DIRECTORY
MPFA_PATTERN = _mgapilib.MPFA_PATTERN
MPFA_FILENAME = _mgapilib.MPFA_FILENAME
MPFA_FULLFILENAME = _mgapilib.MPFA_FULLFILENAME
MPFF_FILEMUSTEXIST = _mgapilib.MPFF_FILEMUSTEXIST
MPFF_MULTISELECT = _mgapilib.MPFF_MULTISELECT
MPFF_OVERWRITEPROMPT = _mgapilib.MPFF_OVERWRITEPROMPT
MPFM_OPEN = _mgapilib.MPFM_OPEN
MPFM_SAVE = _mgapilib.MPFM_SAVE
MACT_EXCLUSIVE = _mgapilib.MACT_EXCLUSIVE
MACT_CONCURRENT = _mgapilib.MACT_CONCURRENT
MACT_TRANSIENT = _mgapilib.MACT_TRANSIENT
MACT_DFADFRIENDLY = _mgapilib.MACT_DFADFRIENDLY
MPAL_FACETOOLS = _mgapilib.MPAL_FACETOOLS
MPAL_GEOMETRYTOOLS = _mgapilib.MPAL_GEOMETRYTOOLS
MPAL_WIZARDTOOLS = _mgapilib.MPAL_WIZARDTOOLS
MPAL_MANEUVERTOOLS = _mgapilib.MPAL_MANEUVERTOOLS
MPAL_DUPLICATE = _mgapilib.MPAL_DUPLICATE
MPAL_BOOLEANTOOLS = _mgapilib.MPAL_BOOLEANTOOLS
MPAL_DEFORMTOOLS = _mgapilib.MPAL_DEFORMTOOLS
MPAL_MODIFYGEOMETRY = _mgapilib.MPAL_MODIFYGEOMETRY
MPAL_MODIFYFACE = _mgapilib.MPAL_MODIFYFACE
MPAL_MODIFYVERTEX = _mgapilib.MPAL_MODIFYVERTEX
MPAL_PROPERTIES = _mgapilib.MPAL_PROPERTIES
MPAL_MAPTEXTURE = _mgapilib.MPAL_MAPTEXTURE
MPAL_MODIFYTEXTURE = _mgapilib.MPAL_MODIFYTEXTURE
MPAL_CONSTRUCTIONTOOLS = _mgapilib.MPAL_CONSTRUCTIONTOOLS
MPAL_CREATETOOLS = _mgapilib.MPAL_CREATETOOLS
MPAL_HIERARCHYTOOLS = _mgapilib.MPAL_HIERARCHYTOOLS
MPAL_EDGETOOLS = _mgapilib.MPAL_EDGETOOLS
MPAL_VERTEXTOOLS = _mgapilib.MPAL_VERTEXTOOLS
MMENU_FILE = _mgapilib.MMENU_FILE
MMENU_EDIT = _mgapilib.MMENU_EDIT
MMENU_VIEW = _mgapilib.MMENU_VIEW
MMENU_INFO = _mgapilib.MMENU_INFO
MMENU_SELECT = _mgapilib.MMENU_SELECT
MMENU_ATTRIBUTES = _mgapilib.MMENU_ATTRIBUTES
MMENU_LOD = _mgapilib.MMENU_LOD
MMENU_LOCALDOF = _mgapilib.MMENU_LOCALDOF
MMENU_PALETTES = _mgapilib.MMENU_PALETTES
MMENU_SCRIPTS = _mgapilib.MMENU_SCRIPTS
MMENU_TERRAIN = _mgapilib.MMENU_TERRAIN
MMENU_ROAD = _mgapilib.MMENU_ROAD
MMENU_GEOFEATURE = _mgapilib.MMENU_GEOFEATURE
MMENU_SOUND = _mgapilib.MMENU_SOUND
MMENU_INSTRUMENTS = _mgapilib.MMENU_INSTRUMENTS
MMENU_BSP = _mgapilib.MMENU_BSP
MMENU_EXTENSIONS = _mgapilib.MMENU_EXTENSIONS
MMENU_HELP = _mgapilib.MMENU_HELP
MGP_IMAGEWHOLE = _mgapilib.MGP_IMAGEWHOLE
MGP_IMAGERESOLUTION = _mgapilib.MGP_IMAGERESOLUTION
MGP_IMAGEGEOINFO = _mgapilib.MGP_IMAGEGEOINFO
class mgimportercallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgimportercallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgimportercallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgimportercallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgimportercallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgimportercallbackrec_toolActivation_get, _mgapilib.mgimportercallbackrec_toolActivation_set)
    __swig_setmethods__["fileName"] = _mgapilib.mgimportercallbackrec_fileName_set
    __swig_getmethods__["fileName"] = _mgapilib.mgimportercallbackrec_fileName_get
    if _newclass:fileName = _swig_property(_mgapilib.mgimportercallbackrec_fileName_get, _mgapilib.mgimportercallbackrec_fileName_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgimportercallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgimportercallbackrec
    __del__ = lambda self : None;
mgimportercallbackrec_swigregister = _mgapilib.mgimportercallbackrec_swigregister
mgimportercallbackrec_swigregister(mgimportercallbackrec)

class mgexportercallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgexportercallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgexportercallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgexportercallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgexportercallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgexportercallbackrec_toolActivation_get, _mgapilib.mgexportercallbackrec_toolActivation_set)
    __swig_setmethods__["fileName"] = _mgapilib.mgexportercallbackrec_fileName_set
    __swig_getmethods__["fileName"] = _mgapilib.mgexportercallbackrec_fileName_get
    if _newclass:fileName = _swig_property(_mgapilib.mgexportercallbackrec_fileName_get, _mgapilib.mgexportercallbackrec_fileName_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgexportercallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgexportercallbackrec
    __del__ = lambda self : None;
mgexportercallbackrec_swigregister = _mgapilib.mgexportercallbackrec_swigregister
mgexportercallbackrec_swigregister(mgexportercallbackrec)

class mgviewercallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgviewercallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgviewercallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgviewercallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgviewercallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgviewercallbackrec_toolActivation_get, _mgapilib.mgviewercallbackrec_toolActivation_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgviewercallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgviewercallbackrec
    __del__ = lambda self : None;
mgviewercallbackrec_swigregister = _mgapilib.mgviewercallbackrec_swigregister
mgviewercallbackrec_swigregister(mgviewercallbackrec)

mgGetRegistryRootBase = _mgapilib.mgGetRegistryRoot
mgGetRegistryStringBase = _mgapilib.mgGetRegistryString
mgSetRegistryString = _mgapilib.mgSetRegistryString
mgSetReadImageGeoInfoFunc = _mgapilib.mgSetReadImageGeoInfoFunc
mgLicenseIsReadOnly = _mgapilib.mgLicenseIsReadOnly
mgPluginIsVersionValid = _mgapilib.mgPluginIsVersionValid
mgSetPolyCurrentColor = _mgapilib.mgSetPolyCurrentColor
mgSetPolyCurrentAltColor = _mgapilib.mgSetPolyCurrentAltColor
mgSetPolyCurrentMaterial = _mgapilib.mgSetPolyCurrentMaterial
mgSetPolyCurrentShader = _mgapilib.mgSetPolyCurrentShader
mgSetPolyCurrentTexture = _mgapilib.mgSetPolyCurrentTexture
mgSetPolyCurrentTextureMapping = _mgapilib.mgSetPolyCurrentTextureMapping
mgGetCurrentColorBase = _mgapilib.mgGetCurrentColor
mgGetCurrentColorRGBBase = _mgapilib.mgGetCurrentColorRGB
mgSetCurrentColor = _mgapilib.mgSetCurrentColor
mgSetCurrentColorRGB = _mgapilib.mgSetCurrentColorRGB
mgGetCurrentAltColorBase = _mgapilib.mgGetCurrentAltColor
mgGetCurrentAltColorRGBBase = _mgapilib.mgGetCurrentAltColorRGB
mgSetCurrentAltColor = _mgapilib.mgSetCurrentAltColor
mgSetCurrentAltColorRGB = _mgapilib.mgSetCurrentAltColorRGB
mgNewColorName = _mgapilib.mgNewColorName
mgDeleteColorName = _mgapilib.mgDeleteColorName
mgSetCurrentColorName = _mgapilib.mgSetCurrentColorName
mgWriteDefaultColorPalette = _mgapilib.mgWriteDefaultColorPalette
mgWriteColorPalette = _mgapilib.mgWriteColorPalette
mgSetColorIndex = _mgapilib.mgSetColorIndex
mgSetPolyColorName = _mgapilib.mgSetPolyColorName
mgSetPolyAltColorName = _mgapilib.mgSetPolyAltColorName
mgSetVtxColorName = _mgapilib.mgSetVtxColorName
mgIndex2RGBBase = _mgapilib.mgIndex2RGB
mgRGB2IndexBase = _mgapilib.mgRGB2Index
mgGetColorIndexByNameBase = _mgapilib.mgGetColorIndexByName
mgGetCurrentColorName = _mgapilib.mgGetCurrentColorName
mgReadDefaultColorPalette = _mgapilib.mgReadDefaultColorPalette
mgReadColorPalette = _mgapilib.mgReadColorPalette
mgGetPolyColorName = _mgapilib.mgGetPolyColorName
mgGetPolyAltColorName = _mgapilib.mgGetPolyAltColorName
mgGetVtxColorName = _mgapilib.mgGetVtxColorName
mgResetRecList = _mgapilib.mgResetRecList
mgGetNextRecInListBase = _mgapilib.mgGetNextRecInList
mgIsRecInList = _mgapilib.mgIsRecInList
mgGetNthRecInListBase = _mgapilib.mgGetNthRecInList
mgGetRecListCount = _mgapilib.mgGetRecListCount
mgGetRecListLevel = _mgapilib.mgGetRecListLevel
mgAppendRecListBase = _mgapilib.mgAppendRecList
MSEL_ALLOWRECURSIVE = _mgapilib.MSEL_ALLOWRECURSIVE
mgSelectOneEx = _mgapilib.mgSelectOneEx
mgSelectOne = _mgapilib.mgSelectOne
mgSelectOneEdge = _mgapilib.mgSelectOneEdge
mgDeselectOne = _mgapilib.mgDeselectOne
mgDeselectAll = _mgapilib.mgDeselectAll
mgSelectList = _mgapilib.mgSelectList
mgIsSelected = _mgapilib.mgIsSelected
mgIsSelectedEdge = _mgapilib.mgIsSelectedEdge
mgCoord3dAlmostEqual = _mgapilib.mgCoord3dAlmostEqual
mgCoord3dEqual = _mgapilib.mgCoord3dEqual
mgMakeLine = _mgapilib.mgMakeLine
mgMakePlaned = _mgapilib.mgMakePlaned
mgCoord3dProjectOnPlane = _mgapilib.mgCoord3dProjectOnPlane
mgMakeBox = _mgapilib.mgMakeBox
mgBoxExpandBox = _mgapilib.mgBoxExpandBox
mgBoxExpandCoord3d = _mgapilib.mgBoxExpandCoord3d
mgBoxContainsCoord3d = _mgapilib.mgBoxContainsCoord3d
mgBoxContainsBox = _mgapilib.mgBoxContainsBox
mgBoxIntersectsBox = _mgapilib.mgBoxIntersectsBox
mgBoxGetXSize = _mgapilib.mgBoxGetXSize
mgBoxGetYSize = _mgapilib.mgBoxGetYSize
mgBoxGetZSize = _mgapilib.mgBoxGetZSize
mgBoxGetDiagonalSize = _mgapilib.mgBoxGetDiagonalSize
mgBoxGetCenter = _mgapilib.mgBoxGetCenter
mgBoxGetCenterBottom = _mgapilib.mgBoxGetCenterBottom
mgCoord3dMoveAlongVectorf = _mgapilib.mgCoord3dMoveAlongVectorf
mgCoord3dMoveAlongVectord = _mgapilib.mgCoord3dMoveAlongVectord
mgVectordToCoord3d = _mgapilib.mgVectordToCoord3d
mgCoord3dToVectord = _mgapilib.mgCoord3dToVectord
mgSlice = _mgapilib.mgSlice
mgIsDbUntitled = _mgapilib.mgIsDbUntitled
mgIsDbModified = _mgapilib.mgIsDbModified
mgSetDbModified = _mgapilib.mgSetDbModified
mgIsDbOnDesktop = _mgapilib.mgIsDbOnDesktop
mgIsFileOnDesktop = _mgapilib.mgIsFileOnDesktop
mgGetDbOnDesktop = _mgapilib.mgGetDbOnDesktop
mgWriteDb = _mgapilib.mgWriteDb
mgSaveAsDb = _mgapilib.mgSaveAsDb
MEFN_OPENFLIGHT = _mgapilib.MEFN_OPENFLIGHT
MEFV_1650 = _mgapilib.MEFV_1650
MEFV_1640 = _mgapilib.MEFV_1640
MEFV_1630 = _mgapilib.MEFV_1630
MEFV_1620 = _mgapilib.MEFV_1620
MEFV_1610 = _mgapilib.MEFV_1610
MEFV_1600 = _mgapilib.MEFV_1600
MEFV_1580 = _mgapilib.MEFV_1580
MEFV_1570 = _mgapilib.MEFV_1570
MEFV_1560 = _mgapilib.MEFV_1560
MEFV_1540 = _mgapilib.MEFV_1540
mgExportDb = _mgapilib.mgExportDb
mgSetPluginFolder = _mgapilib.mgSetPluginFolder
mgInit = _mgapilib.mgInit
mgIsInitialized = _mgapilib.mgIsInitialized
mgIsDb = _mgapilib.mgIsDb
mgNewDb = _mgapilib.mgNewDb
mgOpenDb = _mgapilib.mgOpenDb
MOPX_READEXT = _mgapilib.MOPX_READEXT
MOPX_OPENCREATE = _mgapilib.MOPX_OPENCREATE
MOPX_HEADERONLY = _mgapilib.MOPX_HEADERONLY
MOPX_LOADTEXTURES = _mgapilib.MOPX_LOADTEXTURES
MOPX_NOMESSAGES = _mgapilib.MOPX_NOMESSAGES
mgOpenDbEx = _mgapilib.mgOpenDbEx
mgCloseDb = _mgapilib.mgCloseDb
mgGetAbsoluteFilenameBase = _mgapilib.mgGetAbsoluteFilename
mgGetDbVersion = _mgapilib.mgGetDbVersion
mgOnPythonModuleInit = _mgapilib.mgOnPythonModuleInit
mgGetCurrentLightSourceBase = _mgapilib.mgGetCurrentLightSource
mgSetCurrentLightSource = _mgapilib.mgSetCurrentLightSource
mgNewLightSourceBase = _mgapilib.mgNewLightSource
mgDeleteLightSource = _mgapilib.mgDeleteLightSource
mgWriteLightSourceFile = _mgapilib.mgWriteLightSourceFile
mgGetLightSource = _mgapilib.mgGetLightSource
mgIndexOfLightSource = _mgapilib.mgIndexOfLightSource
mgNameOfLightSource = _mgapilib.mgNameOfLightSource
mgGetLightSourceCount = _mgapilib.mgGetLightSourceCount
mgGetFirstLightSourceBase = _mgapilib.mgGetFirstLightSource
mgGetNextLightSourceBase = _mgapilib.mgGetNextLightSource
mgReadLightSourceFile = _mgapilib.mgReadLightSourceFile
mgGetCurrentLightPointAppearanceBase = _mgapilib.mgGetCurrentLightPointAppearance
mgSetCurrentLightPointAppearance = _mgapilib.mgSetCurrentLightPointAppearance
mgGetCurrentLightPointAnimationBase = _mgapilib.mgGetCurrentLightPointAnimation
mgSetCurrentLightPointAnimation = _mgapilib.mgSetCurrentLightPointAnimation
class mglightpointanimationsequencedata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mglightpointanimationsequencedata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mglightpointanimationsequencedata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mgapilib.mglightpointanimationsequencedata_state_set
    __swig_getmethods__["state"] = _mgapilib.mglightpointanimationsequencedata_state_get
    if _newclass:state = _swig_property(_mgapilib.mglightpointanimationsequencedata_state_get, _mgapilib.mglightpointanimationsequencedata_state_set)
    __swig_setmethods__["duration"] = _mgapilib.mglightpointanimationsequencedata_duration_set
    __swig_getmethods__["duration"] = _mgapilib.mglightpointanimationsequencedata_duration_get
    if _newclass:duration = _swig_property(_mgapilib.mglightpointanimationsequencedata_duration_get, _mgapilib.mglightpointanimationsequencedata_duration_set)
    __swig_setmethods__["colorIndex"] = _mgapilib.mglightpointanimationsequencedata_colorIndex_set
    __swig_getmethods__["colorIndex"] = _mgapilib.mglightpointanimationsequencedata_colorIndex_get
    if _newclass:colorIndex = _swig_property(_mgapilib.mglightpointanimationsequencedata_colorIndex_get, _mgapilib.mglightpointanimationsequencedata_colorIndex_set)
    __swig_setmethods__["colorIntensity"] = _mgapilib.mglightpointanimationsequencedata_colorIntensity_set
    __swig_getmethods__["colorIntensity"] = _mgapilib.mglightpointanimationsequencedata_colorIntensity_get
    if _newclass:colorIntensity = _swig_property(_mgapilib.mglightpointanimationsequencedata_colorIntensity_get, _mgapilib.mglightpointanimationsequencedata_colorIntensity_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mglightpointanimationsequencedata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mglightpointanimationsequencedata
    __del__ = lambda self : None;
mglightpointanimationsequencedata_swigregister = _mgapilib.mglightpointanimationsequencedata_swigregister
mglightpointanimationsequencedata_swigregister(mglightpointanimationsequencedata)

mgLightPointAnimationSequenceGetBase = _mgapilib.mgLightPointAnimationSequenceGet
mgGetLightPointAppearance = _mgapilib.mgGetLightPointAppearance
mgIndexOfLightPointAppearance = _mgapilib.mgIndexOfLightPointAppearance
mgNameOfLightPointAppearance = _mgapilib.mgNameOfLightPointAppearance
mgGetLightPointAppearanceCount = _mgapilib.mgGetLightPointAppearanceCount
mgGetFirstLightPointAppearanceBase = _mgapilib.mgGetFirstLightPointAppearance
mgGetNextLightPointAppearanceBase = _mgapilib.mgGetNextLightPointAppearance
mgGetLightPointAnimation = _mgapilib.mgGetLightPointAnimation
mgIndexOfLightPointAnimation = _mgapilib.mgIndexOfLightPointAnimation
mgNameOfLightPointAnimation = _mgapilib.mgNameOfLightPointAnimation
mgGetLightPointAnimationCount = _mgapilib.mgGetLightPointAnimationCount
mgGetFirstLightPointAnimationBase = _mgapilib.mgGetFirstLightPointAnimation
mgGetNextLightPointAnimationBase = _mgapilib.mgGetNextLightPointAnimation
mgReadLightPointFile = _mgapilib.mgReadLightPointFile
mgLightPointAnimationSequenceSet = _mgapilib.mgLightPointAnimationSequenceSet
mgNewLightPointAppearanceBase = _mgapilib.mgNewLightPointAppearance
mgDeleteLightPointAppearance = _mgapilib.mgDeleteLightPointAppearance
mgNewLightPointAnimationBase = _mgapilib.mgNewLightPointAnimation
mgDeleteLightPointAnimation = _mgapilib.mgDeleteLightPointAnimation
mgWriteLightPointFile = _mgapilib.mgWriteLightPointFile
mgGetCurrentLineStyleBase = _mgapilib.mgGetCurrentLineStyle
mgSetCurrentLineStyle = _mgapilib.mgSetCurrentLineStyle
mgNewLineStyleBase = _mgapilib.mgNewLineStyle
mgDeleteLineStyle = _mgapilib.mgDeleteLineStyle
mgGetLineStyle = _mgapilib.mgGetLineStyle
mgGetLineStyleCount = _mgapilib.mgGetLineStyleCount
mgGetFirstLineStyleBase = _mgapilib.mgGetFirstLineStyle
mgGetNextLineStyleBase = _mgapilib.mgGetNextLineStyle
mgGetCurrentSound = _mgapilib.mgGetCurrentSound
mgSetCurrentSound = _mgapilib.mgSetCurrentSound
mgNewSoundBase = _mgapilib.mgNewSound
mgDeleteSound = _mgapilib.mgDeleteSound
mgWriteSoundFile = _mgapilib.mgWriteSoundFile
mgGetSound = _mgapilib.mgGetSound
mgIndexOfSound = _mgapilib.mgIndexOfSound
mgNameOfSound = _mgapilib.mgNameOfSound
mgGetSoundCount = _mgapilib.mgGetSoundCount
mgGetFirstSoundBase = _mgapilib.mgGetFirstSound
mgGetNextSoundBase = _mgapilib.mgGetNextSound
mgGetCurrentMaterialBase = _mgapilib.mgGetCurrentMaterial
mgSetCurrentMaterial = _mgapilib.mgSetCurrentMaterial
mgDrawMaterial = _mgapilib.mgDrawMaterial
mgNewMaterialBase = _mgapilib.mgNewMaterial
mgWriteMaterialFile = _mgapilib.mgWriteMaterialFile
mgWriteMaterialFileVersion = _mgapilib.mgWriteMaterialFileVersion
mgDeleteMaterial = _mgapilib.mgDeleteMaterial
mgDeleteMaterialByName = _mgapilib.mgDeleteMaterialByName
mgGetMaterial = _mgapilib.mgGetMaterial
mgIndexOfMaterial = _mgapilib.mgIndexOfMaterial
mgNameOfMaterial = _mgapilib.mgNameOfMaterial
mgGetMaterialCount = _mgapilib.mgGetMaterialCount
mgGetFirstMaterialBase = _mgapilib.mgGetFirstMaterial
mgGetNextMaterialBase = _mgapilib.mgGetNextMaterial
mgGetMaterialElemBase = _mgapilib.mgGetMaterialElem
mgReadMaterialFile = _mgapilib.mgReadMaterialFile
mgReversePoly = _mgapilib.mgReversePoly
mgCoord3dTransformBase = _mgapilib.mgCoord3dTransform
mgCoord3fTransformBase = _mgapilib.mgCoord3fTransform
mgVectordTransformBase = _mgapilib.mgVectordTransform
mgVectorfZero = _mgapilib.mgVectorfZero
mgVectorfXAxis = _mgapilib.mgVectorfXAxis
mgVectorfNegativeXAxis = _mgapilib.mgVectorfNegativeXAxis
mgVectorfYAxis = _mgapilib.mgVectorfYAxis
mgVectorfNegativeYAxis = _mgapilib.mgVectorfNegativeYAxis
mgVectorfZAxis = _mgapilib.mgVectorfZAxis
mgVectorfNegativeZAxis = _mgapilib.mgVectorfNegativeZAxis
mgVectorfNegate = _mgapilib.mgVectorfNegate
mgVectorfTransformBase = _mgapilib.mgVectorfTransform
mgVectorfCross = _mgapilib.mgVectorfCross
mgVectorfDot = _mgapilib.mgVectorfDot
mgVectorfLerp = _mgapilib.mgVectorfLerp
mgVectorfUnitize = _mgapilib.mgVectorfUnitize
mgVectorfSetUnitized = _mgapilib.mgVectorfSetUnitized
mgVectorfEqual = _mgapilib.mgVectorfEqual
mgVectordFromLine = _mgapilib.mgVectordFromLine
mgVectordSetUnitized = _mgapilib.mgVectordSetUnitized
mgVectordUnitize = _mgapilib.mgVectordUnitize
mgVectordEqual = _mgapilib.mgVectordEqual
mgCoord3dDistance = _mgapilib.mgCoord3dDistance
mgCoord3dDistanceSquared = _mgapilib.mgCoord3dDistanceSquared
mgMakeCoord3f = _mgapilib.mgMakeCoord3f
mgMakeCoord3d = _mgapilib.mgMakeCoord3d
mgMakeCoord2d = _mgapilib.mgMakeCoord2d
mgMakeCoord2i = _mgapilib.mgMakeCoord2i
mgMakeVectord = _mgapilib.mgMakeVectord
mgMakeUnitVectord = _mgapilib.mgMakeUnitVectord
mgVectordCross = _mgapilib.mgVectordCross
mgVectordDot = _mgapilib.mgVectordDot
mgVectordLerp = _mgapilib.mgVectordLerp
mgVectordZero = _mgapilib.mgVectordZero
mgVectordXAxis = _mgapilib.mgVectordXAxis
mgVectordNegativeXAxis = _mgapilib.mgVectordNegativeXAxis
mgVectordYAxis = _mgapilib.mgVectordYAxis
mgVectordNegativeYAxis = _mgapilib.mgVectordNegativeYAxis
mgVectordZAxis = _mgapilib.mgVectordZAxis
mgVectordNegativeZAxis = _mgapilib.mgVectordNegativeZAxis
mgVectordNegate = _mgapilib.mgVectordNegate
mgCoord2dAdd = _mgapilib.mgCoord2dAdd
mgCoord2dSubtract = _mgapilib.mgCoord2dSubtract
mgCoord2dMultiply = _mgapilib.mgCoord2dMultiply
mgCoord2dDivide = _mgapilib.mgCoord2dDivide
mgCoord2dLerp = _mgapilib.mgCoord2dLerp
mgCoord2dDot = _mgapilib.mgCoord2dDot
mgCoord2dAngle = _mgapilib.mgCoord2dAngle
mgCoord2dNegate = _mgapilib.mgCoord2dNegate
mgCoord2dRotateCW = _mgapilib.mgCoord2dRotateCW
mgCoord2dRotate90CW = _mgapilib.mgCoord2dRotate90CW
mgCoord2dRotateCCW = _mgapilib.mgCoord2dRotateCCW
mgCoord2dRotate90CCW = _mgapilib.mgCoord2dRotate90CCW
mgCoord2dReflectX = _mgapilib.mgCoord2dReflectX
mgCoord2dReflectY = _mgapilib.mgCoord2dReflectY
mgCoord2dReflect = _mgapilib.mgCoord2dReflect
mgCoord2dScalarProject = _mgapilib.mgCoord2dScalarProject
mgCoord2dVectorProject = _mgapilib.mgCoord2dVectorProject
mgCoord2dOrthoProject = _mgapilib.mgCoord2dOrthoProject
mgCoord2dXAxis = _mgapilib.mgCoord2dXAxis
mgCoord2dNegativeXAxis = _mgapilib.mgCoord2dNegativeXAxis
mgCoord2dYAxis = _mgapilib.mgCoord2dYAxis
mgCoord2dNegativeYAxis = _mgapilib.mgCoord2dNegativeYAxis
mgCoord2dZero = _mgapilib.mgCoord2dZero
mgCoord2dOne = _mgapilib.mgCoord2dOne
mgCoord2dNegativeOne = _mgapilib.mgCoord2dNegativeOne
mgCoord2dLength = _mgapilib.mgCoord2dLength
mgCoord2dLengthSquared = _mgapilib.mgCoord2dLengthSquared
mgCoord2dSetUnitized = _mgapilib.mgCoord2dSetUnitized
mgCoord2dUnitize = _mgapilib.mgCoord2dUnitize
mgCoord3dAdd = _mgapilib.mgCoord3dAdd
mgCoord3dSubtract = _mgapilib.mgCoord3dSubtract
mgCoord3dMultiply = _mgapilib.mgCoord3dMultiply
mgCoord3dDivide = _mgapilib.mgCoord3dDivide
mgCoord3dLerp = _mgapilib.mgCoord3dLerp
mgCoord3dDot = _mgapilib.mgCoord3dDot
mgCoord3dAngle = _mgapilib.mgCoord3dAngle
mgCoord3dCross = _mgapilib.mgCoord3dCross
mgCoord3dNegate = _mgapilib.mgCoord3dNegate
mgCoord3dPitchDown = _mgapilib.mgCoord3dPitchDown
mgCoord3dPitchDown90 = _mgapilib.mgCoord3dPitchDown90
mgCoord3dPitchUp = _mgapilib.mgCoord3dPitchUp
mgCoord3dPitchUp90 = _mgapilib.mgCoord3dPitchUp90
mgCoord3dRollLeft = _mgapilib.mgCoord3dRollLeft
mgCoord3dRollLeft90 = _mgapilib.mgCoord3dRollLeft90
mgCoord3dRollRight = _mgapilib.mgCoord3dRollRight
mgCoord3dRollRight90 = _mgapilib.mgCoord3dRollRight90
mgCoord3dYawLeft = _mgapilib.mgCoord3dYawLeft
mgCoord3dYawLeft90 = _mgapilib.mgCoord3dYawLeft90
mgCoord3dYawRight = _mgapilib.mgCoord3dYawRight
mgCoord3dYawRight90 = _mgapilib.mgCoord3dYawRight90
mgCoord3dReflectX = _mgapilib.mgCoord3dReflectX
mgCoord3dReflectY = _mgapilib.mgCoord3dReflectY
mgCoord3dReflectZ = _mgapilib.mgCoord3dReflectZ
mgCoord3dReflect = _mgapilib.mgCoord3dReflect
mgCoord3dScalarProject = _mgapilib.mgCoord3dScalarProject
mgCoord3dVectorProject = _mgapilib.mgCoord3dVectorProject
mgCoord3dOrthoProject = _mgapilib.mgCoord3dOrthoProject
mgCoord3dXAxis = _mgapilib.mgCoord3dXAxis
mgCoord3dNegativeXAxis = _mgapilib.mgCoord3dNegativeXAxis
mgCoord3dYAxis = _mgapilib.mgCoord3dYAxis
mgCoord3dNegativeYAxis = _mgapilib.mgCoord3dNegativeYAxis
mgCoord3dZAxis = _mgapilib.mgCoord3dZAxis
mgCoord3dNegativeZAxis = _mgapilib.mgCoord3dNegativeZAxis
mgCoord3dZero = _mgapilib.mgCoord3dZero
mgCoord3dOne = _mgapilib.mgCoord3dOne
mgCoord3dNegativeOne = _mgapilib.mgCoord3dNegativeOne
mgCoord3dLength = _mgapilib.mgCoord3dLength
mgCoord3dLengthSquared = _mgapilib.mgCoord3dLengthSquared
mgCoord3dSetUnitized = _mgapilib.mgCoord3dSetUnitized
mgCoord3dUnitize = _mgapilib.mgCoord3dUnitize
mgMatrixFormRotateBase = _mgapilib.mgMatrixFormRotate
mgMatrixFormRotateXBase = _mgapilib.mgMatrixFormRotateX
mgMatrixRotateXBase = _mgapilib.mgMatrixRotateX
mgMatrixFormRotateYBase = _mgapilib.mgMatrixFormRotateY
mgMatrixRotateYBase = _mgapilib.mgMatrixRotateY
mgMatrixFormRotateZBase = _mgapilib.mgMatrixFormRotateZ
mgMatrixRotateZBase = _mgapilib.mgMatrixRotateZ
mgMatrixFormScaleBase = _mgapilib.mgMatrixFormScale
mgMatrixScaleBase = _mgapilib.mgMatrixScale
mgMatrixFormTranslateBase = _mgapilib.mgMatrixFormTranslate
mgMatrixTranslateBase = _mgapilib.mgMatrixTranslate
mgMatrixFormQuadToQuadBase = _mgapilib.mgMatrixFormQuadToQuad
mgMatrixIdentityBase = _mgapilib.mgMatrixIdentity
mgMatrixEqualBase = _mgapilib.mgMatrixEqual
mgMatrixInvertBase = _mgapilib.mgMatrixInvert
mgMatrixMultiplyBase = _mgapilib.mgMatrixMultiply
mgMatrixCopyBase = _mgapilib.mgMatrixCopy
mgMatrixIsIdentityBase = _mgapilib.mgMatrixIsIdentity
mgMatrixTransposeBase = _mgapilib.mgMatrixTranspose
mgMatrixFormNormalBase = _mgapilib.mgMatrixFormNormal
mgMatrixFormXYZToUVBase = _mgapilib.mgMatrixFormXYZToUV
mgMatrixGetXAxisBase = _mgapilib.mgMatrixGetXAxis
mgMatrixGetYAxisBase = _mgapilib.mgMatrixGetYAxis
mgMatrixGetZAxisBase = _mgapilib.mgMatrixGetZAxis
mgMatrixGetTranslationBase = _mgapilib.mgMatrixGetTranslation
mgMatrixSetXAxis = _mgapilib.mgMatrixSetXAxis
mgMatrixSetYAxis = _mgapilib.mgMatrixSetYAxis
mgMatrixSetZAxis = _mgapilib.mgMatrixSetZAxis
mgMatrixSetTranslation = _mgapilib.mgMatrixSetTranslation
mgMatrixFormPitchDown90Base = _mgapilib.mgMatrixFormPitchDown90
mgMatrixFormReflectBaseX = _mgapilib.mgMatrixFormReflectX
mgMatrixFormPitchUp90Base = _mgapilib.mgMatrixFormPitchUp90
mgMatrixFormRollLeft90Base = _mgapilib.mgMatrixFormRollLeft90
mgMatrixFormReflectY = _mgapilib.mgMatrixFormReflectY
mgMatrixFormRollRight90Base = _mgapilib.mgMatrixFormRollRight90
mgMatrixFormYawLeft90Base = _mgapilib.mgMatrixFormYawLeft90
mgMatrixFormReflectZ = _mgapilib.mgMatrixFormReflectZ
mgMatrixFormYawRight90Base = _mgapilib.mgMatrixFormYawRight90
mgMatrixFormReflect = _mgapilib.mgMatrixFormReflect
mgMatrixPitchDown90 = _mgapilib.mgMatrixPitchDown90
mgMatrixReflectX = _mgapilib.mgMatrixReflectX
mgMatrixPitchUp90 = _mgapilib.mgMatrixPitchUp90
mgMatrixRollLeft90 = _mgapilib.mgMatrixRollLeft90
mgMatrixReflectY = _mgapilib.mgMatrixReflectY
mgMatrixRollRight90 = _mgapilib.mgMatrixRollRight90
mgMatrixYawLeft90 = _mgapilib.mgMatrixYawLeft90
mgMatrixReflectZ = _mgapilib.mgMatrixReflectZ
mgMatrixYawRight90 = _mgapilib.mgMatrixYawRight90
mgMatrixReflect = _mgapilib.mgMatrixReflect
mgMatrixComposeBase = _mgapilib.mgMatrixCompose
mgMatrixStackPush = _mgapilib.mgMatrixStackPush
mgMatrixStackPop = _mgapilib.mgMatrixStackPop
mgMatrixStackLoadIdentity = _mgapilib.mgMatrixStackLoadIdentity
mgMatrixStackLoadMatrixBase = _mgapilib.mgMatrixStackLoadMatrix
mgMatrixStackGetMatrixBase = _mgapilib.mgMatrixStackGetMatrix
mgMatrixStackIsIdentity = _mgapilib.mgMatrixStackIsIdentity
mgMatrixStackMultiplyBase = _mgapilib.mgMatrixStackMultiply
mgMatrixStackScale = _mgapilib.mgMatrixStackScale
mgMatrixStackRotate = _mgapilib.mgMatrixStackRotate
mgMatrixStackRotateX = _mgapilib.mgMatrixStackRotateX
mgMatrixStackRotateY = _mgapilib.mgMatrixStackRotateY
mgMatrixStackRotateZ = _mgapilib.mgMatrixStackRotateZ
mgMatrixStackTranslate = _mgapilib.mgMatrixStackTranslate
mgMatrixStackTransformCoord = _mgapilib.mgMatrixStackTransformCoord
mgMatrixStackTransformVector = _mgapilib.mgMatrixStackTransformVector
mgNewProjection = _mgapilib.mgNewProjection
mgFreeProjection = _mgapilib.mgFreeProjection
mgProjectionConvertLLEtoXYZBase = _mgapilib.mgProjectionConvertLLEtoXYZ
mgProjectionConvertXYZtoLLEBase = _mgapilib.mgProjectionConvertXYZtoLLE
mgProject = _mgapilib.mgProject
mgUnproject = _mgapilib.mgUnproject
mgImageToXYZMatrixBase = _mgapilib.mgImageToXYZMatrix
mgSetOpenCreateFlag = _mgapilib.mgSetOpenCreateFlag
mgSetNewOverwriteFlag = _mgapilib.mgSetNewOverwriteFlag
mgSetReadExtFlag = _mgapilib.mgSetReadExtFlag
mgSetReadTexturesFlag = _mgapilib.mgSetReadTexturesFlag
mgSetFreezeLODCentersFlag = _mgapilib.mgSetFreezeLODCentersFlag
mgSetCompressVertexTableFlag = _mgapilib.mgSetCompressVertexTableFlag
mgSetSaveNonIndexedLightPoints = _mgapilib.mgSetSaveNonIndexedLightPoints
mgSetSaveUnreferencedUVs = _mgapilib.mgSetSaveUnreferencedUVs
mgSetAutoUpdatePriorityFlag = _mgapilib.mgSetAutoUpdatePriorityFlag
mgSetIgnoreDuplicateNamesFlag = _mgapilib.mgSetIgnoreDuplicateNamesFlag
MPREFD_MATCHVERTEXTOLERANCE = _mgapilib.MPREFD_MATCHVERTEXTOLERANCE
MPREFD_COPLANARTOLERANCE = _mgapilib.MPREFD_COPLANARTOLERANCE
MPREFD_COALIGNEDVERTEXTOLERANCE = _mgapilib.MPREFD_COALIGNEDVERTEXTOLERANCE
MPREFI_AUTOAPPLYMATERIAL = _mgapilib.MPREFI_AUTOAPPLYMATERIAL
MPREFI_AUTOAPPLYALTCOLOR = _mgapilib.MPREFI_AUTOAPPLYALTCOLOR
MPREFI_AUTOAPPLYIRCODE = _mgapilib.MPREFI_AUTOAPPLYIRCODE
MPREFI_AUTOAPPLYSHADELIT2D = _mgapilib.MPREFI_AUTOAPPLYSHADELIT2D
MPREFI_AUTOAPPLYSHADELIT3D = _mgapilib.MPREFI_AUTOAPPLYSHADELIT3D
MPREFI_FLIPDDSIMAGES = _mgapilib.MPREFI_FLIPDDSIMAGES
MPREFI_SNAPROTATION = _mgapilib.MPREFI_SNAPROTATION
MPREFD_SNAPTOANGLE = _mgapilib.MPREFD_SNAPTOANGLE
MPREFI_SNAPHANDLES = _mgapilib.MPREFI_SNAPHANDLES
MPREFI_SIZEHANDLES = _mgapilib.MPREFI_SIZEHANDLES
MPREFI_SCALEHANDLES = _mgapilib.MPREFI_SCALEHANDLES
MPREFI_HANDLETHICKNESS = _mgapilib.MPREFI_HANDLETHICKNESS
MPREFI_DRAWHANDLESONTOP = _mgapilib.MPREFI_DRAWHANDLESONTOP
MPREFI_SHADEWIRE = _mgapilib.MPREFI_SHADEWIRE
MPREFI_MOUSEUPZOOMOUT = _mgapilib.MPREFI_MOUSEUPZOOMOUT
MPREFI_TEXTUREPALETTEDIMENSION = _mgapilib.MPREFI_TEXTUREPALETTEDIMENSION
mgModelingPrefGetIntegerBase = _mgapilib.mgModelingPrefGetInteger
mgModelingPrefGetDoubleBase = _mgapilib.mgModelingPrefGetDouble
mgModelingPrefSetInteger = _mgapilib.mgModelingPrefSetInteger
mgModelingPrefSetDouble = _mgapilib.mgModelingPrefSetDouble
mgIterateModelingPrefs = _mgapilib.mgIterateModelingPrefs
mgRemove = _mgapilib.mgRemove
mgUnRemove = _mgapilib.mgUnRemove
mgDisplay = _mgapilib.mgDisplay
mgSetDrawOrphan = _mgapilib.mgSetDrawOrphan
mgSetDrawImmediate = _mgapilib.mgSetDrawImmediate
MDUP_NODEONLY = _mgapilib.MDUP_NODEONLY
MDUP_DERIVEDNAMES = _mgapilib.MDUP_DERIVEDNAMES
mgNewRec = _mgapilib.mgNewRec
mgNewRecDb = _mgapilib.mgNewRecDb
mgDuplicate = _mgapilib.mgDuplicate
mgDuplicateEx = _mgapilib.mgDuplicateEx
mgDuplicateToDb = _mgapilib.mgDuplicateToDb
mgDuplicateToDbEx = _mgapilib.mgDuplicateToDbEx
mgDelete = _mgapilib.mgDelete
mgDetach = _mgapilib.mgDetach
mgAttach = _mgapilib.mgAttach
mgAppend = _mgapilib.mgAppend
mgInsert = _mgapilib.mgInsert
mgReference = _mgapilib.mgReference
mgDeReference = _mgapilib.mgDeReference
mgValidAttach = _mgapilib.mgValidAttach
MWALK_NEXT = _mgapilib.MWALK_NEXT
MWALK_ON = _mgapilib.MWALK_ON
MWALK_MASTER = _mgapilib.MWALK_MASTER
MWALK_NOREADONLY = _mgapilib.MWALK_NOREADONLY
MWALK_NORDONLY = _mgapilib.MWALK_NORDONLY
MWALK_VERTEX = _mgapilib.MWALK_VERTEX
MWALK_MASTERALL = _mgapilib.MWALK_MASTERALL
MWALK_ATTR = _mgapilib.MWALK_ATTR
MWALK_MATRIXSTACK = _mgapilib.MWALK_MATRIXSTACK
MWALK_NONESTED = _mgapilib.MWALK_NONESTED
mgRec2Filename = _mgapilib.mgRec2Filename
mgSetCurrentDb = _mgapilib.mgSetCurrentDb
mgGetCurrentDb = _mgapilib.mgGetCurrentDb
mgRec2Db = _mgapilib.mgRec2Db
mgCountChild = _mgapilib.mgCountChild
mgCountNestedChild = _mgapilib.mgCountNestedChild
mgCountAttrChild = _mgapilib.mgCountAttrChild
mgGetChildNth = _mgapilib.mgGetChildNth
mgGetRecByName = _mgapilib.mgGetRecByName
mgGetNext = _mgapilib.mgGetNext
mgGetPrevious = _mgapilib.mgGetPrevious
mgGetParent = _mgapilib.mgGetParent
mgGetChild = _mgapilib.mgGetChild
mgGetNestedParent = _mgapilib.mgGetNestedParent
mgGetNestedChild = _mgapilib.mgGetNestedChild
mgGetAttrChild = _mgapilib.mgGetAttrChild
mgGetReference = _mgapilib.mgGetReference
mgGetFirstInstance = _mgapilib.mgGetFirstInstance
mgGetNextInstance = _mgapilib.mgGetNextInstance
MEOP_EQ = _mgapilib.MEOP_EQ
MEOP_NE = _mgapilib.MEOP_NE
MEOP_LT = _mgapilib.MEOP_LT
MEOP_LE = _mgapilib.MEOP_LE
MEOP_GT = _mgapilib.MEOP_GT
MEOP_GE = _mgapilib.MEOP_GE
MEOP_LOGAND = _mgapilib.MEOP_LOGAND
MEOP_LOGOR = _mgapilib.MEOP_LOGOR
MEOP_ADD = _mgapilib.MEOP_ADD
MEOP_SUB = _mgapilib.MEOP_SUB
MEOP_MUL = _mgapilib.MEOP_MUL
MEOP_DIV = _mgapilib.MEOP_DIV
MEOP_FUNC = _mgapilib.MEOP_FUNC
MEOP_LIT = _mgapilib.MEOP_LIT
MEOP_GETATT = _mgapilib.MEOP_GETATT
MEOP_GETVAR = _mgapilib.MEOP_GETVAR
mgNewNodeExpressionInteger = _mgapilib.mgNewNodeExpressionInteger
mgNewNodeExpressionDouble = _mgapilib.mgNewNodeExpressionDouble
mgNewNodeExpressionOperator = _mgapilib.mgNewNodeExpressionOperator
mgNewNodeExpressionCallback = _mgapilib.mgNewNodeExpressionCallback
mgNewNodeExpressionGetAtt = _mgapilib.mgNewNodeExpressionGetAtt
mgNodeExpressionSetLeft = _mgapilib.mgNodeExpressionSetLeft
mgNodeExpressionSetRight = _mgapilib.mgNodeExpressionSetRight
mgNodeExpressionLoadFromString = _mgapilib.mgNodeExpressionLoadFromString
mgNodeExpressionEvaluateAsBool = _mgapilib.mgNodeExpressionEvaluateAsBool
mgNodeExpressionSetVariableString = _mgapilib.mgNodeExpressionSetVariableString
mgNodeExpressionSetVariableDouble = _mgapilib.mgNodeExpressionSetVariableDouble
mgNodeExpressionSetVariableInt = _mgapilib.mgNodeExpressionSetVariableInt
mgEvaluateAsBool = _mgapilib.mgEvaluateAsBool
mgHasXform = _mgapilib.mgHasXform
mgCountXform = _mgapilib.mgCountXform
mgIsXformEmpty = _mgapilib.mgIsXformEmpty
mgGetXform = _mgapilib.mgGetXform
mgGetXformType = _mgapilib.mgGetXformType
mgGetMorphVertex = _mgapilib.mgGetMorphVertex
mgMoreDetail = _mgapilib.mgMoreDetail
mgLessDetail = _mgapilib.mgLessDetail
mgMostDetail = _mgapilib.mgMostDetail
mgLeastDetail = _mgapilib.mgLeastDetail
mgIsReference = _mgapilib.mgIsReference
mgIsInstance = _mgapilib.mgIsInstance
mgIsFirstInstance = _mgapilib.mgIsFirstInstance
mgIsFlagOn = _mgapilib.mgIsFlagOn
mgIsReadOnly = _mgapilib.mgIsReadOnly
mgContainsReadOnly = _mgapilib.mgContainsReadOnly
mgIsRelated = _mgapilib.mgIsRelated
mgFlipImage = _mgapilib.mgFlipImage
mgWriteImage = _mgapilib.mgWriteImage
mgWriteImageAttributes = _mgapilib.mgWriteImageAttributes
mgWriteTexture = _mgapilib.mgWriteTexture
mgWriteTexturePalette = _mgapilib.mgWriteTexturePalette
mgSetTextureName = _mgapilib.mgSetTextureName
mgSetTexturePosition = _mgapilib.mgSetTexturePosition
mgSetTextureTexels = _mgapilib.mgSetTextureTexels
mgSetTextureAttributes = _mgapilib.mgSetTextureAttributes
mgCopyTexturePalette = _mgapilib.mgCopyTexturePalette
mgCopyTexture = _mgapilib.mgCopyTexture
mgDeleteTexture = _mgapilib.mgDeleteTexture
mgReplaceTexture = _mgapilib.mgReplaceTexture
mgMoveTexture = _mgapilib.mgMoveTexture
mgNewTexture = _mgapilib.mgNewTexture
mgGeoCoordAdd = _mgapilib.mgGeoCoordAdd
mgGeoCoordDelete = _mgapilib.mgGeoCoordDelete
mgSubTextureAdd = _mgapilib.mgSubTextureAdd
mgSubTextureDelete = _mgapilib.mgSubTextureDelete
mgTextureSetSavePathType = _mgapilib.mgTextureSetSavePathType
mgGetCurrentTextureBase = _mgapilib.mgGetCurrentTexture
mgSetCurrentTexture = _mgapilib.mgSetCurrentTexture
mgGetCurrentSubTextureBase = _mgapilib.mgGetCurrentSubTexture
mgGetCurrentTextureLayerBase = _mgapilib.mgGetCurrentTextureLayer
mgSetCurrentTextureLayer = _mgapilib.mgSetCurrentTextureLayer
mgGetSelectedTextureCount = _mgapilib.mgGetSelectedTextureCount
mgGetFirstSelectedTextureBase = _mgapilib.mgGetFirstSelectedTexture
mgGetNextSelectedTextureBase = _mgapilib.mgGetNextSelectedTexture
mgIsTextureIndexSelected = _mgapilib.mgIsTextureIndexSelected
mgSelectTextureIndex = _mgapilib.mgSelectTextureIndex
mgDeselectTextureIndex = _mgapilib.mgDeselectTextureIndex
mgDeselectAllTextures = _mgapilib.mgDeselectAllTextures
mgGetCurrentEyePoint = _mgapilib.mgGetCurrentEyePoint
mgSetCurrentEyePoint = _mgapilib.mgSetCurrentEyePoint
mgGetCurrentLookAtBase = _mgapilib.mgGetCurrentLookAt
mgGetGraphicViewLookAt = _mgapilib.mgGetGraphicViewLookAt
mgSetCurrentLookAt = _mgapilib.mgSetCurrentLookAt
mgSetCurrentLookAtTarget = _mgapilib.mgSetCurrentLookAtTarget
MGVM_PROJECTION = _mgapilib.MGVM_PROJECTION
MGVM_MODELVIEW = _mgapilib.MGVM_MODELVIEW
MGVM_MODELVIEWPROJECTION = _mgapilib.MGVM_MODELVIEWPROJECTION
MGVD_FOV = _mgapilib.MGVD_FOV
MGVD_TARGETFOV = _mgapilib.MGVD_TARGETFOV
MGVD_SCALE = _mgapilib.MGVD_SCALE
MGVD_NEARCLIP = _mgapilib.MGVD_NEARCLIP
MGVD_FARCLIP = _mgapilib.MGVD_FARCLIP
MGVD_GRIDSPACEX = _mgapilib.MGVD_GRIDSPACEX
MGVD_GRIDSPACEY = _mgapilib.MGVD_GRIDSPACEY
MGVD_GRIDANGLE = _mgapilib.MGVD_GRIDANGLE
MGVD_GRIDRADIUS = _mgapilib.MGVD_GRIDRADIUS
MGVI_DRAWORDER = _mgapilib.MGVI_DRAWORDER
MGVI_GRIDTYPE = _mgapilib.MGVI_GRIDTYPE
MGVI_AUTOFOV = _mgapilib.MGVI_AUTOFOV
MGVI_AUTOLOD = _mgapilib.MGVI_AUTOLOD
MGVI_AUTONEARFAR = _mgapilib.MGVI_AUTONEARFAR
MGVI_VIEWHEIGHT = _mgapilib.MGVI_VIEWHEIGHT
MGVI_VIEWWIDTH = _mgapilib.MGVI_VIEWWIDTH
MGVI_CHANNELHEIGHT = _mgapilib.MGVI_CHANNELHEIGHT
MGVI_DRAWMODE = _mgapilib.MGVI_DRAWMODE
MGVI_DRAWCONSTRUCTIONS = _mgapilib.MGVI_DRAWCONSTRUCTIONS
MGVI_DRAWSHADERS = _mgapilib.MGVI_DRAWSHADERS
MGVI_DRAWFOG = _mgapilib.MGVI_DRAWFOG
MGVI_DRAWSELECTOUTLINE = _mgapilib.MGVI_DRAWSELECTOUTLINE
MGVI_DRAWGRID = _mgapilib.MGVI_DRAWGRID
MGVI_DRAWLIGHTS = _mgapilib.MGVI_DRAWLIGHTS
MGVI_DRAWTEXTURE = _mgapilib.MGVI_DRAWTEXTURE
MGVI_DRAWEXTENDEDMATBUMPMAP = _mgapilib.MGVI_DRAWEXTENDEDMATBUMPMAP
MGVI_DRAWEXTENDEDMATSHADOWMAP = _mgapilib.MGVI_DRAWEXTENDEDMATSHADOWMAP
MGVI_DRAWEXTENDEDMATLIGHTMAP = _mgapilib.MGVI_DRAWEXTENDEDMATLIGHTMAP
MGVI_DRAWEXTENDEDMATALPHA = _mgapilib.MGVI_DRAWEXTENDEDMATALPHA
MGVI_DRAWEXTENDEDMATSPECULAR = _mgapilib.MGVI_DRAWEXTENDEDMATSPECULAR
MGVI_DRAWEXTENDEDMATEMISSIVE = _mgapilib.MGVI_DRAWEXTENDEDMATEMISSIVE
MGVI_DRAWEXTENDEDMATDIFFUSE = _mgapilib.MGVI_DRAWEXTENDEDMATDIFFUSE
MGVI_DRAWEXTENDEDMATAMBIENT = _mgapilib.MGVI_DRAWEXTENDEDMATAMBIENT
MGVI_DRAWEXTENDEDMATREFLECTION = _mgapilib.MGVI_DRAWEXTENDEDMATREFLECTION
MGVI_DRAWVERTEXNORMALS = _mgapilib.MGVI_DRAWVERTEXNORMALS
MGVI_DRAWVERTEXNUMBERS = _mgapilib.MGVI_DRAWVERTEXNUMBERS
MGVI_DRAWVERTEXLARGE = _mgapilib.MGVI_DRAWVERTEXLARGE
MGVI_DRAWLIGHTSLARGE = _mgapilib.MGVI_DRAWLIGHTSLARGE
MGVI_DRAWDOFAXES = _mgapilib.MGVI_DRAWDOFAXES
MGVI_DRAWCONTROLPOINTS = _mgapilib.MGVI_DRAWCONTROLPOINTS
MGVI_DRAWBOUNDINGBOXES = _mgapilib.MGVI_DRAWBOUNDINGBOXES
MGVI_ORTHO = _mgapilib.MGVI_ORTHO
MGVI_SNAPTOGRID = _mgapilib.MGVI_SNAPTOGRID
MGVI_SHRINK = _mgapilib.MGVI_SHRINK
MGVI_ANTIALIASLINES = _mgapilib.MGVI_ANTIALIASLINES
MGVI_INFRAREDVIEW = _mgapilib.MGVI_INFRAREDVIEW
MGVI_WINDOWVIEW = _mgapilib.MGVI_WINDOWVIEW
MGVI_TEXTURELAYER = _mgapilib.MGVI_TEXTURELAYER
MGVI_FREEZEX = _mgapilib.MGVI_FREEZEX
MGVI_FREEZEY = _mgapilib.MGVI_FREEZEY
MGVI_FREEZEZ = _mgapilib.MGVI_FREEZEZ
MGVI_XRAYMODE = _mgapilib.MGVI_XRAYMODE
MGVI_DYNAMICBILLBOARDS = _mgapilib.MGVI_DYNAMICBILLBOARDS
MGVI_DYNAMICTEXTURE = _mgapilib.MGVI_DYNAMICTEXTURE
MGVI_DYNAMICWIREFRAME = _mgapilib.MGVI_DYNAMICWIREFRAME
MGVI_SKYCOLOR = _mgapilib.MGVI_SKYCOLOR
MGVD_YAW = _mgapilib.MGVD_YAW
MGVD_PITCH = _mgapilib.MGVD_PITCH
MGVD_ROLL = _mgapilib.MGVD_ROLL
MGVD_ASPECT = _mgapilib.MGVD_ASPECT
MGVD_GRIDSIZE = _mgapilib.MGVD_GRIDSIZE
MGVD_VERTEXNORMALLENGTH = _mgapilib.MGVD_VERTEXNORMALLENGTH
MGVD_FOGVISIBILITY = _mgapilib.MGVD_FOGVISIBILITY
MGVD_BACKGROUNDIMAGEZOOM = _mgapilib.MGVD_BACKGROUNDIMAGEZOOM
MGVI_GRIDUNDER = _mgapilib.MGVI_GRIDUNDER
MGVI_DRAWFRAMERATE = _mgapilib.MGVI_DRAWFRAMERATE
MGVI_DRAWHELPERNODES = _mgapilib.MGVI_DRAWHELPERNODES
MGVI_DRAWGRIDNODES = _mgapilib.MGVI_DRAWGRIDNODES
MGVI_DRAWTORSIONNODES = _mgapilib.MGVI_DRAWTORSIONNODES
MGVI_DRAWCLIPNODES = _mgapilib.MGVI_DRAWCLIPNODES
MGVI_DRAWLIGHTSOURCENODES = _mgapilib.MGVI_DRAWLIGHTSOURCENODES
MGVI_DRAWSOUNDNODES = _mgapilib.MGVI_DRAWSOUNDNODES
MGVI_DRAWHIDDENFACES = _mgapilib.MGVI_DRAWHIDDENFACES
MGVI_DRAWBACKGROUNDIMAGE = _mgapilib.MGVI_DRAWBACKGROUNDIMAGE
MGVI_DRAWWIREBACKFACE = _mgapilib.MGVI_DRAWWIREBACKFACE
MGVI_BACKGROUNDIMAGEWIDTH = _mgapilib.MGVI_BACKGROUNDIMAGEWIDTH
MGVI_BACKGROUNDIMAGEHEIGHT = _mgapilib.MGVI_BACKGROUNDIMAGEHEIGHT
MGVI_BACKGROUNDIMAGEDEPTH = _mgapilib.MGVI_BACKGROUNDIMAGEDEPTH
MGVI_CONTAINSDOF = _mgapilib.MGVI_CONTAINSDOF
MGVI_ISMOVING = _mgapilib.MGVI_ISMOVING
MGVSM_SETCURRENT = _mgapilib.MGVSM_SETCURRENT
MGVSM_SETALL = _mgapilib.MGVSM_SETALL
MGVSM_DISABLEREFRESH = _mgapilib.MGVSM_DISABLEREFRESH
mgGraphicsViewSettingGetIntegerBase = _mgapilib.mgGraphicsViewSettingGetInteger
mgGraphicsViewSettingGetDoubleBase = _mgapilib.mgGraphicsViewSettingGetDouble
mgGraphicsViewSettingGetMatrixBase = _mgapilib.mgGraphicsViewSettingGetMatrix
mgGraphicsViewSettingSetInteger = _mgapilib.mgGraphicsViewSettingSetInteger
mgGraphicsViewSettingSetDouble = _mgapilib.mgGraphicsViewSettingSetDouble
mgGraphicsViewSettingSetMatrixBase = _mgapilib.mgGraphicsViewSettingSetMatrix
mgFitOnNode = _mgapilib.mgFitOnNode
mgFitOnGrid = _mgapilib.mgFitOnGrid
mgResetView = _mgapilib.mgResetView
mgFitOnRecList = _mgapilib.mgFitOnRecList
mgFitOnSelect = _mgapilib.mgFitOnSelect
mgSetEyePoint = _mgapilib.mgSetEyePoint
mgGetNewEyePoint = _mgapilib.mgGetNewEyePoint
mgCopyEyePoint = _mgapilib.mgCopyEyePoint
mgSetSwitchDistance = _mgapilib.mgSetSwitchDistance
mgGetEyePoint = _mgapilib.mgGetEyePoint
mgGetEyePointLookAtBase = _mgapilib.mgGetEyePointLookAt
mgGetSwitchDistanceBase = _mgapilib.mgGetSwitchDistance
mgGetTextureMapping = _mgapilib.mgGetTextureMapping
mgIndexOfTextureMapping = _mgapilib.mgIndexOfTextureMapping
mgGetTextureMappingCount = _mgapilib.mgGetTextureMappingCount
mgGetTextureMappingName = _mgapilib.mgGetTextureMappingName
mgGetTextureMappingType = _mgapilib.mgGetTextureMappingType
mgGetTextureMappingMatrixBase = _mgapilib.mgGetTextureMappingMatrix
mgIsTextureMappingInPalette = _mgapilib.mgIsTextureMappingInPalette
mgGetFirstTextureMappingBase = _mgapilib.mgGetFirstTextureMapping
mgGetNextTextureMappingBase = _mgapilib.mgGetNextTextureMapping
mgReadTextureMappingFile = _mgapilib.mgReadTextureMappingFile
mgNewTextureMappingBase = _mgapilib.mgNewTextureMapping
mgWriteTextureMappingFile = _mgapilib.mgWriteTextureMappingFile
mgDeleteTextureMapping = _mgapilib.mgDeleteTextureMapping
mgDeleteTextureMappingByName = _mgapilib.mgDeleteTextureMappingByName
mgUpdateTextureMapping = _mgapilib.mgUpdateTextureMapping
mgGetCurrentTextureMappingBase = _mgapilib.mgGetCurrentTextureMapping
mgSetCurrentTextureMapping = _mgapilib.mgSetCurrentTextureMapping
mgSetVtxNormal = _mgapilib.mgSetVtxNormal
mgRemoveVtxNormal = _mgapilib.mgRemoveVtxNormal
mgSetVtxCoord = _mgapilib.mgSetVtxCoord
mgGetPolyNormalBase = _mgapilib.mgGetPolyNormal
mgIsPolyConcave = _mgapilib.mgIsPolyConcave
mgIsPolyCoplanar = _mgapilib.mgIsPolyCoplanar
mgGetVtxNormalBase = _mgapilib.mgGetVtxNormal
mgGetVtxCoordBase = _mgapilib.mgGetVtxCoord
mgGetBoundsBase = _mgapilib.mgGetBounds
mgGetBoundsForRecListBase = _mgapilib.mgGetBoundsForRecList
mgGetBoundsForSelectBase = _mgapilib.mgGetBoundsForSelect
class mgconvexhulltriangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgconvexhulltriangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgconvexhulltriangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _mgapilib.mgconvexhulltriangle_p1_set
    __swig_getmethods__["p1"] = _mgapilib.mgconvexhulltriangle_p1_get
    if _newclass:p1 = _swig_property(_mgapilib.mgconvexhulltriangle_p1_get, _mgapilib.mgconvexhulltriangle_p1_set)
    __swig_setmethods__["p2"] = _mgapilib.mgconvexhulltriangle_p2_set
    __swig_getmethods__["p2"] = _mgapilib.mgconvexhulltriangle_p2_get
    if _newclass:p2 = _swig_property(_mgapilib.mgconvexhulltriangle_p2_get, _mgapilib.mgconvexhulltriangle_p2_set)
    __swig_setmethods__["p3"] = _mgapilib.mgconvexhulltriangle_p3_set
    __swig_getmethods__["p3"] = _mgapilib.mgconvexhulltriangle_p3_get
    if _newclass:p3 = _swig_property(_mgapilib.mgconvexhulltriangle_p3_get, _mgapilib.mgconvexhulltriangle_p3_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgconvexhulltriangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgconvexhulltriangle
    __del__ = lambda self : None;
mgconvexhulltriangle_swigregister = _mgapilib.mgconvexhulltriangle_swigregister
mgconvexhulltriangle_swigregister(mgconvexhulltriangle)

mgGetConvexHull = _mgapilib.mgGetConvexHull
mgFreeConvexHull = _mgapilib.mgFreeConvexHull
mgConvexHullGetTriangleCount = _mgapilib.mgConvexHullGetTriangleCount
mgConvexHullGetTriangleNthBase = _mgapilib.mgConvexHullGetTriangleNth
mgNewConvexHullBuilder = _mgapilib.mgNewConvexHullBuilder
mgConvexHullBuilderExpandCoord3d = _mgapilib.mgConvexHullBuilderExpandCoord3d
mgConvexHullBuilderClose = _mgapilib.mgConvexHullBuilderClose
mgFreeConvexHullBuilder = _mgapilib.mgFreeConvexHullBuilder
mgUpdateMatrix = _mgapilib.mgUpdateMatrix
MGDM_WIREFRAME = _mgapilib.MGDM_WIREFRAME
MGDM_SOLID = _mgapilib.MGDM_SOLID
MGDM_WIRESOLID = _mgapilib.MGDM_WIRESOLID
MGDM_SELECT = _mgapilib.MGDM_SELECT
MGDR_PREDRAW = _mgapilib.MGDR_PREDRAW
MGDR_POSTDRAW = _mgapilib.MGDR_POSTDRAW
MGDR_DRAW = _mgapilib.MGDR_DRAW
MGD_DONTDRAWBELOW = _mgapilib.MGD_DONTDRAWBELOW
class mggraphicviewdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mggraphicviewdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mggraphicviewdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["glContext"] = _mgapilib.mggraphicviewdata_glContext_set
    __swig_getmethods__["glContext"] = _mgapilib.mggraphicviewdata_glContext_get
    if _newclass:glContext = _swig_property(_mgapilib.mggraphicviewdata_glContext_get, _mgapilib.mggraphicviewdata_glContext_set)
    __swig_setmethods__["drawMode"] = _mgapilib.mggraphicviewdata_drawMode_set
    __swig_getmethods__["drawMode"] = _mgapilib.mggraphicviewdata_drawMode_get
    if _newclass:drawMode = _swig_property(_mgapilib.mggraphicviewdata_drawMode_get, _mgapilib.mggraphicviewdata_drawMode_set)
    __swig_setmethods__["lightingEnabled"] = _mgapilib.mggraphicviewdata_lightingEnabled_set
    __swig_getmethods__["lightingEnabled"] = _mgapilib.mggraphicviewdata_lightingEnabled_get
    if _newclass:lightingEnabled = _swig_property(_mgapilib.mggraphicviewdata_lightingEnabled_get, _mgapilib.mggraphicviewdata_lightingEnabled_set)
    __swig_setmethods__["textureEnabled"] = _mgapilib.mggraphicviewdata_textureEnabled_set
    __swig_getmethods__["textureEnabled"] = _mgapilib.mggraphicviewdata_textureEnabled_get
    if _newclass:textureEnabled = _swig_property(_mgapilib.mggraphicviewdata_textureEnabled_get, _mgapilib.mggraphicviewdata_textureEnabled_set)
    __swig_setmethods__["drawReason"] = _mgapilib.mggraphicviewdata_drawReason_set
    __swig_getmethods__["drawReason"] = _mgapilib.mggraphicviewdata_drawReason_get
    if _newclass:drawReason = _swig_property(_mgapilib.mggraphicviewdata_drawReason_get, _mgapilib.mggraphicviewdata_drawReason_set)
    __swig_setmethods__["userData"] = _mgapilib.mggraphicviewdata_userData_set
    __swig_getmethods__["userData"] = _mgapilib.mggraphicviewdata_userData_get
    if _newclass:userData = _swig_property(_mgapilib.mggraphicviewdata_userData_get, _mgapilib.mggraphicviewdata_userData_set)
    __swig_setmethods__["graphicView"] = _mgapilib.mggraphicviewdata_graphicView_set
    __swig_getmethods__["graphicView"] = _mgapilib.mggraphicviewdata_graphicView_get
    if _newclass:graphicView = _swig_property(_mgapilib.mggraphicviewdata_graphicView_get, _mgapilib.mggraphicviewdata_graphicView_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mggraphicviewdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mggraphicviewdata
    __del__ = lambda self : None;
mggraphicviewdata_swigregister = _mgapilib.mggraphicviewdata_swigregister
mggraphicviewdata_swigregister(mggraphicviewdata)

class mghierarchyviewdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mghierarchyviewdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mghierarchyviewdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["glContext"] = _mgapilib.mghierarchyviewdata_glContext_set
    __swig_getmethods__["glContext"] = _mgapilib.mghierarchyviewdata_glContext_get
    if _newclass:glContext = _swig_property(_mgapilib.mghierarchyviewdata_glContext_get, _mgapilib.mghierarchyviewdata_glContext_set)
    __swig_setmethods__["left"] = _mgapilib.mghierarchyviewdata_left_set
    __swig_getmethods__["left"] = _mgapilib.mghierarchyviewdata_left_get
    if _newclass:left = _swig_property(_mgapilib.mghierarchyviewdata_left_get, _mgapilib.mghierarchyviewdata_left_set)
    __swig_setmethods__["bottom"] = _mgapilib.mghierarchyviewdata_bottom_set
    __swig_getmethods__["bottom"] = _mgapilib.mghierarchyviewdata_bottom_get
    if _newclass:bottom = _swig_property(_mgapilib.mghierarchyviewdata_bottom_get, _mgapilib.mghierarchyviewdata_bottom_set)
    __swig_setmethods__["right"] = _mgapilib.mghierarchyviewdata_right_set
    __swig_getmethods__["right"] = _mgapilib.mghierarchyviewdata_right_get
    if _newclass:right = _swig_property(_mgapilib.mghierarchyviewdata_right_get, _mgapilib.mghierarchyviewdata_right_set)
    __swig_setmethods__["top"] = _mgapilib.mghierarchyviewdata_top_set
    __swig_getmethods__["top"] = _mgapilib.mghierarchyviewdata_top_get
    if _newclass:top = _swig_property(_mgapilib.mghierarchyviewdata_top_get, _mgapilib.mghierarchyviewdata_top_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mghierarchyviewdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mghierarchyviewdata
    __del__ = lambda self : None;
mghierarchyviewdata_swigregister = _mgapilib.mghierarchyviewdata_swigregister
mghierarchyviewdata_swigregister(mghierarchyviewdata)

mgGLTextureIndex = _mgapilib.mgGLTextureIndex
mgGLMaterialIndex = _mgapilib.mgGLMaterialIndex
mgGLColor3 = _mgapilib.mgGLColor3
mgGLColor4 = _mgapilib.mgGLColor4
mgGLColorIndex = _mgapilib.mgGLColorIndex
MGCB_ACTIVATE = _mgapilib.MGCB_ACTIVATE
MGCB_REFRESH = _mgapilib.MGCB_REFRESH
MGCB_INIT = _mgapilib.MGCB_INIT
MGCB_SHOW = _mgapilib.MGCB_SHOW
MGCB_HIDE = _mgapilib.MGCB_HIDE
MGCB_DESTROY = _mgapilib.MGCB_DESTROY
MGCB_DRAW = _mgapilib.MGCB_DRAW
MGCB_SIZE = _mgapilib.MGCB_SIZE
MTRUL_TAB_SELECTED = _mgapilib.MTRUL_TAB_SELECTED
MTRUL_TAB_DESELECTED = _mgapilib.MTRUL_TAB_DESELECTED
MTRUL_TAB_DRAGGED = _mgapilib.MTRUL_TAB_DRAGGED
MTRUL_TAB_BUMPED = _mgapilib.MTRUL_TAB_BUMPED
MTRUL_TAB_CHANGED = _mgapilib.MTRUL_TAB_CHANGED
MTRUL_TAB_CREATED = _mgapilib.MTRUL_TAB_CREATED
MTRUL_TAB_DELETED = _mgapilib.MTRUL_TAB_DELETED
MTRUL_TAB_RELEASED = _mgapilib.MTRUL_TAB_RELEASED
MLIST_SELECT = _mgapilib.MLIST_SELECT
MLIST_DESELECT = _mgapilib.MLIST_DESELECT
MLIST_DOUBLECLICK = _mgapilib.MLIST_DOUBLECLICK
MTEXT_LOSTFOCUS = _mgapilib.MTEXT_LOSTFOCUS
MTEXT_TEXTCHANGED = _mgapilib.MTEXT_TEXTCHANGED
MMSS_START = _mgapilib.MMSS_START
MMSS_CONTINUE = _mgapilib.MMSS_CONTINUE
MMSS_STOP = _mgapilib.MMSS_STOP
MMSS_NONE = _mgapilib.MMSS_NONE
MGMA_BUTTON = _mgapilib.MGMA_BUTTON
MGMA_DOUBLECLICK = _mgapilib.MGMA_DOUBLECLICK
MGMA_MOTION = _mgapilib.MGMA_MOTION
MGMA_WHEEL = _mgapilib.MGMA_WHEEL
MGMCD_COMMON = _mgapilib.MGMCD_COMMON
MGMCD_BUTTONDATA = _mgapilib.MGMCD_BUTTONDATA
MGMCD_DOUBLECLICKDATA = _mgapilib.MGMCD_DOUBLECLICKDATA
MGMCD_MOTIONDATA = _mgapilib.MGMCD_MOTIONDATA
MGMCD_WHEELDATA = _mgapilib.MGMCD_WHEELDATA
class mgglmousedatarec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgglmousedatarec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgglmousedatarec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgglmousedatarec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgglmousedatarec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgglmousedatarec_callDataType_get, _mgapilib.mgglmousedatarec_callDataType_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgglmousedatarec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgglmousedatarec
    __del__ = lambda self : None;
mgglmousedatarec_swigregister = _mgapilib.mgglmousedatarec_swigregister
mgglmousedatarec_swigregister(mgglmousedatarec)

class mgglmousebuttondatarec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgglmousebuttondatarec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgglmousebuttondatarec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgglmousebuttondatarec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgglmousebuttondatarec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgglmousebuttondatarec_callDataType_get, _mgapilib.mgglmousebuttondatarec_callDataType_set)
    __swig_setmethods__["mouseEvent"] = _mgapilib.mgglmousebuttondatarec_mouseEvent_set
    __swig_getmethods__["mouseEvent"] = _mgapilib.mgglmousebuttondatarec_mouseEvent_get
    if _newclass:mouseEvent = _swig_property(_mgapilib.mgglmousebuttondatarec_mouseEvent_get, _mgapilib.mgglmousebuttondatarec_mouseEvent_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgglmousebuttondatarec_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgglmousebuttondatarec_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgglmousebuttondatarec_keyboardFlags_get, _mgapilib.mgglmousebuttondatarec_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgglmousebuttondatarec_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgglmousebuttondatarec_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgglmousebuttondatarec_buttonFlags_get, _mgapilib.mgglmousebuttondatarec_buttonFlags_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgglmousebuttondatarec_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgglmousebuttondatarec_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgglmousebuttondatarec_thisPoint_get, _mgapilib.mgglmousebuttondatarec_thisPoint_set)
    __swig_setmethods__["prevPoint"] = _mgapilib.mgglmousebuttondatarec_prevPoint_set
    __swig_getmethods__["prevPoint"] = _mgapilib.mgglmousebuttondatarec_prevPoint_get
    if _newclass:prevPoint = _swig_property(_mgapilib.mgglmousebuttondatarec_prevPoint_get, _mgapilib.mgglmousebuttondatarec_prevPoint_set)
    __swig_setmethods__["firstPoint"] = _mgapilib.mgglmousebuttondatarec_firstPoint_set
    __swig_getmethods__["firstPoint"] = _mgapilib.mgglmousebuttondatarec_firstPoint_get
    if _newclass:firstPoint = _swig_property(_mgapilib.mgglmousebuttondatarec_firstPoint_get, _mgapilib.mgglmousebuttondatarec_firstPoint_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgglmousebuttondatarec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgglmousebuttondatarec
    __del__ = lambda self : None;
mgglmousebuttondatarec_swigregister = _mgapilib.mgglmousebuttondatarec_swigregister
mgglmousebuttondatarec_swigregister(mgglmousebuttondatarec)

class mgglmousedoubleclickdatarec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgglmousedoubleclickdatarec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgglmousedoubleclickdatarec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgglmousedoubleclickdatarec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgglmousedoubleclickdatarec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgglmousedoubleclickdatarec_callDataType_get, _mgapilib.mgglmousedoubleclickdatarec_callDataType_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgglmousedoubleclickdatarec_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgglmousedoubleclickdatarec_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgglmousedoubleclickdatarec_keyboardFlags_get, _mgapilib.mgglmousedoubleclickdatarec_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgglmousedoubleclickdatarec_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgglmousedoubleclickdatarec_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgglmousedoubleclickdatarec_buttonFlags_get, _mgapilib.mgglmousedoubleclickdatarec_buttonFlags_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgglmousedoubleclickdatarec_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgglmousedoubleclickdatarec_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgglmousedoubleclickdatarec_thisPoint_get, _mgapilib.mgglmousedoubleclickdatarec_thisPoint_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgglmousedoubleclickdatarec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgglmousedoubleclickdatarec
    __del__ = lambda self : None;
mgglmousedoubleclickdatarec_swigregister = _mgapilib.mgglmousedoubleclickdatarec_swigregister
mgglmousedoubleclickdatarec_swigregister(mgglmousedoubleclickdatarec)

class mgglmousemotiondatarec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgglmousemotiondatarec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgglmousemotiondatarec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgglmousemotiondatarec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgglmousemotiondatarec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgglmousemotiondatarec_callDataType_get, _mgapilib.mgglmousemotiondatarec_callDataType_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgglmousemotiondatarec_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgglmousemotiondatarec_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgglmousemotiondatarec_keyboardFlags_get, _mgapilib.mgglmousemotiondatarec_keyboardFlags_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgglmousemotiondatarec_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgglmousemotiondatarec_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgglmousemotiondatarec_thisPoint_get, _mgapilib.mgglmousemotiondatarec_thisPoint_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgglmousemotiondatarec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgglmousemotiondatarec
    __del__ = lambda self : None;
mgglmousemotiondatarec_swigregister = _mgapilib.mgglmousemotiondatarec_swigregister
mgglmousemotiondatarec_swigregister(mgglmousemotiondatarec)

class mgglmousewheeldatarec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgglmousewheeldatarec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgglmousewheeldatarec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgglmousewheeldatarec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgglmousewheeldatarec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgglmousewheeldatarec_callDataType_get, _mgapilib.mgglmousewheeldatarec_callDataType_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgglmousewheeldatarec_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgglmousewheeldatarec_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgglmousewheeldatarec_keyboardFlags_get, _mgapilib.mgglmousewheeldatarec_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgglmousewheeldatarec_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgglmousewheeldatarec_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgglmousewheeldatarec_buttonFlags_get, _mgapilib.mgglmousewheeldatarec_buttonFlags_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgglmousewheeldatarec_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgglmousewheeldatarec_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgglmousewheeldatarec_thisPoint_get, _mgapilib.mgglmousewheeldatarec_thisPoint_set)
    __swig_setmethods__["zDelta"] = _mgapilib.mgglmousewheeldatarec_zDelta_set
    __swig_getmethods__["zDelta"] = _mgapilib.mgglmousewheeldatarec_zDelta_get
    if _newclass:zDelta = _swig_property(_mgapilib.mgglmousewheeldatarec_zDelta_get, _mgapilib.mgglmousewheeldatarec_zDelta_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgglmousewheeldatarec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgglmousewheeldatarec
    __del__ = lambda self : None;
mgglmousewheeldatarec_swigregister = _mgapilib.mgglmousewheeldatarec_swigregister
mgglmousewheeldatarec_swigregister(mgglmousewheeldatarec)

MGSP_DONOTCHANGE = _mgapilib.MGSP_DONOTCHANGE
MDA_RESIZEWIDTH = _mgapilib.MDA_RESIZEWIDTH
MDA_RESIZEHEIGHT = _mgapilib.MDA_RESIZEHEIGHT
MDA_MINWIDTH = _mgapilib.MDA_MINWIDTH
MDA_MAXWIDTH = _mgapilib.MDA_MAXWIDTH
MDA_MINHEIGHT = _mgapilib.MDA_MINHEIGHT
MDA_MAXHEIGHT = _mgapilib.MDA_MAXHEIGHT
MGCD_COMMON = _mgapilib.MGCD_COMMON
MGCD_TEXTACTIVATE = _mgapilib.MGCD_TEXTACTIVATE
MGCD_SCALEACTIVATE = _mgapilib.MGCD_SCALEACTIVATE
MGCD_GLDRAW = _mgapilib.MGCD_GLDRAW
MGCD_DIALOGSIZE = _mgapilib.MGCD_DIALOGSIZE
MGCD_TABRULERACTIVATE = _mgapilib.MGCD_TABRULERACTIVATE
MGCD_LISTACTIVATE = _mgapilib.MGCD_LISTACTIVATE
class mgguicallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgguicallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgguicallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgguicallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgguicallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgguicallbackrec_callDataType_get, _mgapilib.mgguicallbackrec_callDataType_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgguicallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgguicallbackrec
    __del__ = lambda self : None;
mgguicallbackrec_swigregister = _mgapilib.mgguicallbackrec_swigregister
mgguicallbackrec_swigregister(mgguicallbackrec)

class mgscaleactivatecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgscaleactivatecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgscaleactivatecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgscaleactivatecallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgscaleactivatecallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgscaleactivatecallbackrec_callDataType_get, _mgapilib.mgscaleactivatecallbackrec_callDataType_set)
    __swig_setmethods__["mouseState"] = _mgapilib.mgscaleactivatecallbackrec_mouseState_set
    __swig_getmethods__["mouseState"] = _mgapilib.mgscaleactivatecallbackrec_mouseState_get
    if _newclass:mouseState = _swig_property(_mgapilib.mgscaleactivatecallbackrec_mouseState_get, _mgapilib.mgscaleactivatecallbackrec_mouseState_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgscaleactivatecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgscaleactivatecallbackrec
    __del__ = lambda self : None;
mgscaleactivatecallbackrec_swigregister = _mgapilib.mgscaleactivatecallbackrec_swigregister
mgscaleactivatecallbackrec_swigregister(mgscaleactivatecallbackrec)

class mglistactivatecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mglistactivatecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mglistactivatecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mglistactivatecallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mglistactivatecallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mglistactivatecallbackrec_callDataType_get, _mgapilib.mglistactivatecallbackrec_callDataType_set)
    __swig_setmethods__["activateReason"] = _mgapilib.mglistactivatecallbackrec_activateReason_set
    __swig_getmethods__["activateReason"] = _mgapilib.mglistactivatecallbackrec_activateReason_get
    if _newclass:activateReason = _swig_property(_mgapilib.mglistactivatecallbackrec_activateReason_get, _mgapilib.mglistactivatecallbackrec_activateReason_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mglistactivatecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mglistactivatecallbackrec
    __del__ = lambda self : None;
mglistactivatecallbackrec_swigregister = _mgapilib.mglistactivatecallbackrec_swigregister
mglistactivatecallbackrec_swigregister(mglistactivatecallbackrec)

class mgtextactivatecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgtextactivatecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgtextactivatecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgtextactivatecallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgtextactivatecallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgtextactivatecallbackrec_callDataType_get, _mgapilib.mgtextactivatecallbackrec_callDataType_set)
    __swig_setmethods__["mouseState"] = _mgapilib.mgtextactivatecallbackrec_mouseState_set
    __swig_getmethods__["mouseState"] = _mgapilib.mgtextactivatecallbackrec_mouseState_get
    if _newclass:mouseState = _swig_property(_mgapilib.mgtextactivatecallbackrec_mouseState_get, _mgapilib.mgtextactivatecallbackrec_mouseState_set)
    __swig_setmethods__["activateReason"] = _mgapilib.mgtextactivatecallbackrec_activateReason_set
    __swig_getmethods__["activateReason"] = _mgapilib.mgtextactivatecallbackrec_activateReason_get
    if _newclass:activateReason = _swig_property(_mgapilib.mgtextactivatecallbackrec_activateReason_get, _mgapilib.mgtextactivatecallbackrec_activateReason_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgtextactivatecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgtextactivatecallbackrec
    __del__ = lambda self : None;
mgtextactivatecallbackrec_swigregister = _mgapilib.mgtextactivatecallbackrec_swigregister
mgtextactivatecallbackrec_swigregister(mgtextactivatecallbackrec)

class mgtabruleractivatecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgtabruleractivatecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgtabruleractivatecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgtabruleractivatecallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgtabruleractivatecallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgtabruleractivatecallbackrec_callDataType_get, _mgapilib.mgtabruleractivatecallbackrec_callDataType_set)
    __swig_setmethods__["tabState"] = _mgapilib.mgtabruleractivatecallbackrec_tabState_set
    __swig_getmethods__["tabState"] = _mgapilib.mgtabruleractivatecallbackrec_tabState_get
    if _newclass:tabState = _swig_property(_mgapilib.mgtabruleractivatecallbackrec_tabState_get, _mgapilib.mgtabruleractivatecallbackrec_tabState_set)
    __swig_setmethods__["tabIndex"] = _mgapilib.mgtabruleractivatecallbackrec_tabIndex_set
    __swig_getmethods__["tabIndex"] = _mgapilib.mgtabruleractivatecallbackrec_tabIndex_get
    if _newclass:tabIndex = _swig_property(_mgapilib.mgtabruleractivatecallbackrec_tabIndex_get, _mgapilib.mgtabruleractivatecallbackrec_tabIndex_set)
    __swig_setmethods__["tabPosition"] = _mgapilib.mgtabruleractivatecallbackrec_tabPosition_set
    __swig_getmethods__["tabPosition"] = _mgapilib.mgtabruleractivatecallbackrec_tabPosition_get
    if _newclass:tabPosition = _swig_property(_mgapilib.mgtabruleractivatecallbackrec_tabPosition_get, _mgapilib.mgtabruleractivatecallbackrec_tabPosition_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgtabruleractivatecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgtabruleractivatecallbackrec
    __del__ = lambda self : None;
mgtabruleractivatecallbackrec_swigregister = _mgapilib.mgtabruleractivatecallbackrec_swigregister
mgtabruleractivatecallbackrec_swigregister(mgtabruleractivatecallbackrec)

class mggldrawcallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mggldrawcallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mggldrawcallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mggldrawcallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mggldrawcallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mggldrawcallbackrec_callDataType_get, _mgapilib.mggldrawcallbackrec_callDataType_set)
    __swig_setmethods__["width"] = _mgapilib.mggldrawcallbackrec_width_set
    __swig_getmethods__["width"] = _mgapilib.mggldrawcallbackrec_width_get
    if _newclass:width = _swig_property(_mgapilib.mggldrawcallbackrec_width_get, _mgapilib.mggldrawcallbackrec_width_set)
    __swig_setmethods__["height"] = _mgapilib.mggldrawcallbackrec_height_set
    __swig_getmethods__["height"] = _mgapilib.mggldrawcallbackrec_height_get
    if _newclass:height = _swig_property(_mgapilib.mggldrawcallbackrec_height_get, _mgapilib.mggldrawcallbackrec_height_set)
    __swig_setmethods__["glContext"] = _mgapilib.mggldrawcallbackrec_glContext_set
    __swig_getmethods__["glContext"] = _mgapilib.mggldrawcallbackrec_glContext_get
    if _newclass:glContext = _swig_property(_mgapilib.mggldrawcallbackrec_glContext_get, _mgapilib.mggldrawcallbackrec_glContext_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mggldrawcallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mggldrawcallbackrec
    __del__ = lambda self : None;
mggldrawcallbackrec_swigregister = _mgapilib.mggldrawcallbackrec_swigregister
mggldrawcallbackrec_swigregister(mggldrawcallbackrec)

class mgdialogsizecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgdialogsizecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgdialogsizecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callDataType"] = _mgapilib.mgdialogsizecallbackrec_callDataType_set
    __swig_getmethods__["callDataType"] = _mgapilib.mgdialogsizecallbackrec_callDataType_get
    if _newclass:callDataType = _swig_property(_mgapilib.mgdialogsizecallbackrec_callDataType_get, _mgapilib.mgdialogsizecallbackrec_callDataType_set)
    __swig_setmethods__["isMinimized"] = _mgapilib.mgdialogsizecallbackrec_isMinimized_set
    __swig_getmethods__["isMinimized"] = _mgapilib.mgdialogsizecallbackrec_isMinimized_get
    if _newclass:isMinimized = _swig_property(_mgapilib.mgdialogsizecallbackrec_isMinimized_get, _mgapilib.mgdialogsizecallbackrec_isMinimized_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgdialogsizecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgdialogsizecallbackrec
    __del__ = lambda self : None;
mgdialogsizecallbackrec_swigregister = _mgapilib.mgdialogsizecallbackrec_swigregister
mgdialogsizecallbackrec_swigregister(mgdialogsizecallbackrec)

MGLBS_NONE = _mgapilib.MGLBS_NONE
MGLBS_SUNKEN = _mgapilib.MGLBS_SUNKEN
MGLBS_RAISED = _mgapilib.MGLBS_RAISED
MGLBS_SOLID = _mgapilib.MGLBS_SOLID
MTRUL_HORIZONTAL = _mgapilib.MTRUL_HORIZONTAL
MTRUL_VERTICAL = _mgapilib.MTRUL_VERTICAL
MTRUL_ORIENTATION = _mgapilib.MTRUL_ORIENTATION
MTRUL_TABBAROFFSET = _mgapilib.MTRUL_TABBAROFFSET
MTRUL_LABELOFFSET = _mgapilib.MTRUL_LABELOFFSET
MTRUL_SCALEBAROFFSET = _mgapilib.MTRUL_SCALEBAROFFSET
MTRUL_MARGINWIDTH = _mgapilib.MTRUL_MARGINWIDTH
MTRUL_TICHEIGHT = _mgapilib.MTRUL_TICHEIGHT
MTRUL_AUTOTICS = _mgapilib.MTRUL_AUTOTICS
MTRUL_LABELEDTICSEVERY = _mgapilib.MTRUL_LABELEDTICSEVERY
MTRUL_TICSEVERY = _mgapilib.MTRUL_TICSEVERY
MTRUL_SCALEMIN = _mgapilib.MTRUL_SCALEMIN
MTRUL_SCALEMAX = _mgapilib.MTRUL_SCALEMAX
MTRUL_ELASTICMIN = _mgapilib.MTRUL_ELASTICMIN
MTRUL_ELASTICMAX = _mgapilib.MTRUL_ELASTICMAX
MCA_GLBORDERSTYLE = _mgapilib.MCA_GLBORDERSTYLE
MCA_BOLDFONT = _mgapilib.MCA_BOLDFONT
MCA_ITALICFONT = _mgapilib.MCA_ITALICFONT
MCA_GLMOUSEWRAP = _mgapilib.MCA_GLMOUSEWRAP
MCA_SPINAUTOINCREMENT = _mgapilib.MCA_SPINAUTOINCREMENT
MCA_TEXTACTIVATEONCHANGED = _mgapilib.MCA_TEXTACTIVATEONCHANGED
MPID_COLORPALETTE = _mgapilib.MPID_COLORPALETTE
MPID_ALTCOLORPALETTE = _mgapilib.MPID_ALTCOLORPALETTE
MPID_IRCOLORPALETTE = _mgapilib.MPID_IRCOLORPALETTE
MPID_MATERIALPALETTE = _mgapilib.MPID_MATERIALPALETTE
MPID_LIGHTSOURCEPALETTE = _mgapilib.MPID_LIGHTSOURCEPALETTE
MPID_TEXTUREPALETTE = _mgapilib.MPID_TEXTUREPALETTE
MPID_TEXTUREMAPPINGPALETTE = _mgapilib.MPID_TEXTUREMAPPINGPALETTE
MPID_SOUNDPALETTE = _mgapilib.MPID_SOUNDPALETTE
MPID_LINESTYLEPALETTE = _mgapilib.MPID_LINESTYLEPALETTE
MPID_LIGHTPOINTPALETTE = _mgapilib.MPID_LIGHTPOINTPALETTE
MPID_SHADERPALETTE = _mgapilib.MPID_SHADERPALETTE
mgShowPalette = _mgapilib.mgShowPalette
MMBX_OK = _mgapilib.MMBX_OK
MMBX_OKCANCEL = _mgapilib.MMBX_OKCANCEL
MMBX_YESNO = _mgapilib.MMBX_YESNO
MMBX_YESNOCANCEL = _mgapilib.MMBX_YESNOCANCEL
MMBX_STATUS = _mgapilib.MMBX_STATUS
MMBX_WARNING = _mgapilib.MMBX_WARNING
MMBX_ERROR = _mgapilib.MMBX_ERROR
MMBX_QUESTION = _mgapilib.MMBX_QUESTION
mgMessageDialog = _mgapilib.mgMessageDialog
mgPromptDialogStringBase = _mgapilib.mgPromptDialogString
mgPromptDialogIntegerBase = _mgapilib.mgPromptDialogInteger
mgPromptDialogFloatBase = _mgapilib.mgPromptDialogFloat
mgPromptDialogDoubleBase = _mgapilib.mgPromptDialogDouble
mgPromptDialogColorBase = _mgapilib.mgPromptDialogColor
MGID_OK = _mgapilib.MGID_OK
MGID_CANCEL = _mgapilib.MGID_CANCEL
MGID_NEXT = _mgapilib.MGID_NEXT
MGID_HELP = _mgapilib.MGID_HELP
MGID_PROMPT = _mgapilib.MGID_PROMPT
MGID_UNDO = _mgapilib.MGID_UNDO
MGID_REDO = _mgapilib.MGID_REDO
class mgdeviceinputdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgdeviceinputdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgdeviceinputdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputDevice"] = _mgapilib.mgdeviceinputdata_inputDevice_set
    __swig_getmethods__["inputDevice"] = _mgapilib.mgdeviceinputdata_inputDevice_get
    if _newclass:inputDevice = _swig_property(_mgapilib.mgdeviceinputdata_inputDevice_get, _mgapilib.mgdeviceinputdata_inputDevice_set)
    __swig_setmethods__["deviceData"] = _mgapilib.mgdeviceinputdata_deviceData_set
    __swig_getmethods__["deviceData"] = _mgapilib.mgdeviceinputdata_deviceData_get
    if _newclass:deviceData = _swig_property(_mgapilib.mgdeviceinputdata_deviceData_get, _mgapilib.mgdeviceinputdata_deviceData_set)
    __swig_setmethods__["button"] = _mgapilib.mgdeviceinputdata_button_set
    __swig_getmethods__["button"] = _mgapilib.mgdeviceinputdata_button_get
    if _newclass:button = _swig_property(_mgapilib.mgdeviceinputdata_button_get, _mgapilib.mgdeviceinputdata_button_set)
    __swig_setmethods__["mouseEvent"] = _mgapilib.mgdeviceinputdata_mouseEvent_set
    __swig_getmethods__["mouseEvent"] = _mgapilib.mgdeviceinputdata_mouseEvent_get
    if _newclass:mouseEvent = _swig_property(_mgapilib.mgdeviceinputdata_mouseEvent_get, _mgapilib.mgdeviceinputdata_mouseEvent_set)
    __swig_setmethods__["toolName"] = _mgapilib.mgdeviceinputdata_toolName_set
    __swig_getmethods__["toolName"] = _mgapilib.mgdeviceinputdata_toolName_get
    if _newclass:toolName = _swig_property(_mgapilib.mgdeviceinputdata_toolName_get, _mgapilib.mgdeviceinputdata_toolName_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgdeviceinputdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgdeviceinputdata
    __del__ = lambda self : None;
mgdeviceinputdata_swigregister = _mgapilib.mgdeviceinputdata_swigregister
mgdeviceinputdata_swigregister(mgdeviceinputdata)

mgRegisterInputDevice = _mgapilib.mgRegisterInputDevice
mgInputDeviceGetHandle = _mgapilib.mgInputDeviceGetHandle
mgInputDeviceSetVertex = _mgapilib.mgInputDeviceSetVertex
mgInputDeviceSetPoint = _mgapilib.mgInputDeviceSetPoint
mgInputDeviceSetButtonStatus = _mgapilib.mgInputDeviceSetButtonStatus
mgInputDeviceSetDeviceData = _mgapilib.mgInputDeviceSetDeviceData
mgInputDeviceSendEvent = _mgapilib.mgInputDeviceSendEvent
mgInputDeviceGetDeviceData = _mgapilib.mgInputDeviceGetDeviceData
mgInputDeviceGetButtonStatus = _mgapilib.mgInputDeviceGetButtonStatus
MBT_DONE = _mgapilib.MBT_DONE
MBT_NEXT = _mgapilib.MBT_NEXT
MBT_CANCEL = _mgapilib.MBT_CANCEL
MBT_HELP = _mgapilib.MBT_HELP
MBT_UNDO = _mgapilib.MBT_UNDO
MBT_REDO = _mgapilib.MBT_REDO
MKB_ALTKEY = _mgapilib.MKB_ALTKEY
MKB_CTRLKEY = _mgapilib.MKB_CTRLKEY
MKB_SHIFTKEY = _mgapilib.MKB_SHIFTKEY
MMB_LEFTMOUSE = _mgapilib.MMB_LEFTMOUSE
MMB_MIDDLEMOUSE = _mgapilib.MMB_MIDDLEMOUSE
MMB_RIGHTMOUSE = _mgapilib.MMB_RIGHTMOUSE
MMSI_NOINPUT = _mgapilib.MMSI_NOINPUT
MMSI_VERTEXINPUT = _mgapilib.MMSI_VERTEXINPUT
MMSI_POINTINPUT = _mgapilib.MMSI_POINTINPUT
MMSI_PICKINPUT = _mgapilib.MMSI_PICKINPUT
MMSI_DEVICEINPUT = _mgapilib.MMSI_DEVICEINPUT
MVRF_VERTEX = _mgapilib.MVRF_VERTEX
MVRF_EDGE = _mgapilib.MVRF_EDGE
MVRF_CURVE = _mgapilib.MVRF_CURVE
MVRF_TRACKPLANE = _mgapilib.MVRF_TRACKPLANE
MVRF_UNKNOWN = _mgapilib.MVRF_UNKNOWN
MVRF_FACE = _mgapilib.MVRF_FACE
MTRM_DONE = _mgapilib.MTRM_DONE
MTRM_CANCEL = _mgapilib.MTRM_CANCEL
MTRM_SELF = _mgapilib.MTRM_SELF
MTRM_SYSTEM = _mgapilib.MTRM_SYSTEM
MCCOLOR_RED = _mgapilib.MCCOLOR_RED
MCCOLOR_GREEN = _mgapilib.MCCOLOR_GREEN
MCCOLOR_YELLOW = _mgapilib.MCCOLOR_YELLOW
MCCOLOR_BLUE = _mgapilib.MCCOLOR_BLUE
MCCOLOR_MAGENTA = _mgapilib.MCCOLOR_MAGENTA
MCCOLOR_CYAN = _mgapilib.MCCOLOR_CYAN
MCCOLOR_WHITE = _mgapilib.MCCOLOR_WHITE
MUCR_AFTERUNDO = _mgapilib.MUCR_AFTERUNDO
MUCR_NOUNDO = _mgapilib.MUCR_NOUNDO
class mgeditorcallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgeditorcallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgeditorcallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgeditorcallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgeditorcallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgeditorcallbackrec_toolActivation_get, _mgapilib.mgeditorcallbackrec_toolActivation_set)
    __swig_setmethods__["dialogRequired"] = _mgapilib.mgeditorcallbackrec_dialogRequired_set
    __swig_getmethods__["dialogRequired"] = _mgapilib.mgeditorcallbackrec_dialogRequired_get
    if _newclass:dialogRequired = _swig_property(_mgapilib.mgeditorcallbackrec_dialogRequired_get, _mgapilib.mgeditorcallbackrec_dialogRequired_set)
    __swig_setmethods__["toolData"] = _mgapilib.mgeditorcallbackrec_toolData_set
    __swig_getmethods__["toolData"] = _mgapilib.mgeditorcallbackrec_toolData_get
    if _newclass:toolData = _swig_property(_mgapilib.mgeditorcallbackrec_toolData_get, _mgapilib.mgeditorcallbackrec_toolData_set)
    __swig_setmethods__["editorContext"] = _mgapilib.mgeditorcallbackrec_editorContext_set
    __swig_getmethods__["editorContext"] = _mgapilib.mgeditorcallbackrec_editorContext_get
    if _newclass:editorContext = _swig_property(_mgapilib.mgeditorcallbackrec_editorContext_get, _mgapilib.mgeditorcallbackrec_editorContext_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgeditorcallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgeditorcallbackrec
    __del__ = lambda self : None;
mgeditorcallbackrec_swigregister = _mgapilib.mgeditorcallbackrec_swigregister
mgeditorcallbackrec_swigregister(mgeditorcallbackrec)

class mgvertexrefdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvertexrefdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvertexrefdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex"] = _mgapilib.mgvertexrefdata_vertex_set
    __swig_getmethods__["vertex"] = _mgapilib.mgvertexrefdata_vertex_get
    if _newclass:vertex = _swig_property(_mgapilib.mgvertexrefdata_vertex_get, _mgapilib.mgvertexrefdata_vertex_set)
    __swig_setmethods__["edge"] = _mgapilib.mgvertexrefdata_edge_set
    __swig_getmethods__["edge"] = _mgapilib.mgvertexrefdata_edge_get
    if _newclass:edge = _swig_property(_mgapilib.mgvertexrefdata_edge_get, _mgapilib.mgvertexrefdata_edge_set)
    __swig_setmethods__["curve"] = _mgapilib.mgvertexrefdata_curve_set
    __swig_getmethods__["curve"] = _mgapilib.mgvertexrefdata_curve_get
    if _newclass:curve = _swig_property(_mgapilib.mgvertexrefdata_curve_get, _mgapilib.mgvertexrefdata_curve_set)
    __swig_setmethods__["face"] = _mgapilib.mgvertexrefdata_face_set
    __swig_getmethods__["face"] = _mgapilib.mgvertexrefdata_face_get
    if _newclass:face = _swig_property(_mgapilib.mgvertexrefdata_face_get, _mgapilib.mgvertexrefdata_face_set)
    __swig_setmethods__["trackPlane"] = _mgapilib.mgvertexrefdata_trackPlane_set
    __swig_getmethods__["trackPlane"] = _mgapilib.mgvertexrefdata_trackPlane_get
    if _newclass:trackPlane = _swig_property(_mgapilib.mgvertexrefdata_trackPlane_get, _mgapilib.mgvertexrefdata_trackPlane_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvertexrefdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvertexrefdata
    __del__ = lambda self : None;
mgvertexrefdata_swigregister = _mgapilib.mgvertexrefdata_swigregister
mgvertexrefdata_swigregister(mgvertexrefdata)

class mgvertexinputdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvertexinputdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvertexinputdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mouseEvent"] = _mgapilib.mgvertexinputdata_mouseEvent_set
    __swig_getmethods__["mouseEvent"] = _mgapilib.mgvertexinputdata_mouseEvent_get
    if _newclass:mouseEvent = _swig_property(_mgapilib.mgvertexinputdata_mouseEvent_get, _mgapilib.mgvertexinputdata_mouseEvent_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgvertexinputdata_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgvertexinputdata_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgvertexinputdata_keyboardFlags_get, _mgapilib.mgvertexinputdata_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgvertexinputdata_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgvertexinputdata_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgvertexinputdata_buttonFlags_get, _mgapilib.mgvertexinputdata_buttonFlags_set)
    __swig_setmethods__["refType"] = _mgapilib.mgvertexinputdata_refType_set
    __swig_getmethods__["refType"] = _mgapilib.mgvertexinputdata_refType_get
    if _newclass:refType = _swig_property(_mgapilib.mgvertexinputdata_refType_get, _mgapilib.mgvertexinputdata_refType_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgvertexinputdata_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgvertexinputdata_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgvertexinputdata_thisPoint_get, _mgapilib.mgvertexinputdata_thisPoint_set)
    __swig_setmethods__["firstPoint"] = _mgapilib.mgvertexinputdata_firstPoint_set
    __swig_getmethods__["firstPoint"] = _mgapilib.mgvertexinputdata_firstPoint_get
    if _newclass:firstPoint = _swig_property(_mgapilib.mgvertexinputdata_firstPoint_get, _mgapilib.mgvertexinputdata_firstPoint_set)
    __swig_setmethods__["refData"] = _mgapilib.mgvertexinputdata_refData_set
    __swig_getmethods__["refData"] = _mgapilib.mgvertexinputdata_refData_get
    if _newclass:refData = _swig_property(_mgapilib.mgvertexinputdata_refData_get, _mgapilib.mgvertexinputdata_refData_set)
    __swig_setmethods__["inputDevice"] = _mgapilib.mgvertexinputdata_inputDevice_set
    __swig_getmethods__["inputDevice"] = _mgapilib.mgvertexinputdata_inputDevice_get
    if _newclass:inputDevice = _swig_property(_mgapilib.mgvertexinputdata_inputDevice_get, _mgapilib.mgvertexinputdata_inputDevice_set)
    __swig_setmethods__["refXform"] = _mgapilib.mgvertexinputdata_refXform_set
    __swig_getmethods__["refXform"] = _mgapilib.mgvertexinputdata_refXform_get
    if _newclass:refXform = _swig_property(_mgapilib.mgvertexinputdata_refXform_get, _mgapilib.mgvertexinputdata_refXform_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvertexinputdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvertexinputdata
    __del__ = lambda self : None;
mgvertexinputdata_swigregister = _mgapilib.mgvertexinputdata_swigregister
mgvertexinputdata_swigregister(mgvertexinputdata)

class mgpointinputdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgpointinputdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgpointinputdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mouseEvent"] = _mgapilib.mgpointinputdata_mouseEvent_set
    __swig_getmethods__["mouseEvent"] = _mgapilib.mgpointinputdata_mouseEvent_get
    if _newclass:mouseEvent = _swig_property(_mgapilib.mgpointinputdata_mouseEvent_get, _mgapilib.mgpointinputdata_mouseEvent_set)
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgpointinputdata_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgpointinputdata_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgpointinputdata_keyboardFlags_get, _mgapilib.mgpointinputdata_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgpointinputdata_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgpointinputdata_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgpointinputdata_buttonFlags_get, _mgapilib.mgpointinputdata_buttonFlags_set)
    __swig_setmethods__["thisPoint"] = _mgapilib.mgpointinputdata_thisPoint_set
    __swig_getmethods__["thisPoint"] = _mgapilib.mgpointinputdata_thisPoint_get
    if _newclass:thisPoint = _swig_property(_mgapilib.mgpointinputdata_thisPoint_get, _mgapilib.mgpointinputdata_thisPoint_set)
    __swig_setmethods__["firstPoint"] = _mgapilib.mgpointinputdata_firstPoint_set
    __swig_getmethods__["firstPoint"] = _mgapilib.mgpointinputdata_firstPoint_get
    if _newclass:firstPoint = _swig_property(_mgapilib.mgpointinputdata_firstPoint_get, _mgapilib.mgpointinputdata_firstPoint_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgpointinputdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgpointinputdata
    __del__ = lambda self : None;
mgpointinputdata_swigregister = _mgapilib.mgpointinputdata_swigregister
mgpointinputdata_swigregister(mgpointinputdata)

class mgpickinputdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgpickinputdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgpickinputdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keyboardFlags"] = _mgapilib.mgpickinputdata_keyboardFlags_set
    __swig_getmethods__["keyboardFlags"] = _mgapilib.mgpickinputdata_keyboardFlags_get
    if _newclass:keyboardFlags = _swig_property(_mgapilib.mgpickinputdata_keyboardFlags_get, _mgapilib.mgpickinputdata_keyboardFlags_set)
    __swig_setmethods__["buttonFlags"] = _mgapilib.mgpickinputdata_buttonFlags_set
    __swig_getmethods__["buttonFlags"] = _mgapilib.mgpickinputdata_buttonFlags_get
    if _newclass:buttonFlags = _swig_property(_mgapilib.mgpickinputdata_buttonFlags_get, _mgapilib.mgpickinputdata_buttonFlags_set)
    __swig_setmethods__["pickList"] = _mgapilib.mgpickinputdata_pickList_set
    __swig_getmethods__["pickList"] = _mgapilib.mgpickinputdata_pickList_get
    if _newclass:pickList = _swig_property(_mgapilib.mgpickinputdata_pickList_get, _mgapilib.mgpickinputdata_pickList_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgpickinputdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgpickinputdata
    __del__ = lambda self : None;
mgpickinputdata_swigregister = _mgapilib.mgpickinputdata_swigregister
mgpickinputdata_swigregister(mgpickinputdata)

class mgclosedialogcallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgclosedialogcallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgclosedialogcallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buttonEvent"] = _mgapilib.mgclosedialogcallbackrec_buttonEvent_set
    __swig_getmethods__["buttonEvent"] = _mgapilib.mgclosedialogcallbackrec_buttonEvent_get
    if _newclass:buttonEvent = _swig_property(_mgapilib.mgclosedialogcallbackrec_buttonEvent_get, _mgapilib.mgclosedialogcallbackrec_buttonEvent_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgclosedialogcallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgclosedialogcallbackrec
    __del__ = lambda self : None;
mgclosedialogcallbackrec_swigregister = _mgapilib.mgclosedialogcallbackrec_swigregister
mgclosedialogcallbackrec_swigregister(mgclosedialogcallbackrec)

mgEditorGetDbRec = _mgapilib.mgEditorGetDbRec
mgEditorAddUndoForCreate = _mgapilib.mgEditorAddUndoForCreate
mgEditorAppendUndoForCreate = _mgapilib.mgEditorAppendUndoForCreate
mgEditorAddUndoForDelete = _mgapilib.mgEditorAddUndoForDelete
mgEditorAppendUndoForDelete = _mgapilib.mgEditorAppendUndoForDelete
mgEditorAddUndoForMove = _mgapilib.mgEditorAddUndoForMove
mgEditorAppendUndoForMove = _mgapilib.mgEditorAppendUndoForMove
mgEditorResetUndo = _mgapilib.mgEditorResetUndo
mgNewConstructVertex = _mgapilib.mgNewConstructVertex
mgSetConstructVertexColor = _mgapilib.mgSetConstructVertexColor
mgSetConstructVertexCoords = _mgapilib.mgSetConstructVertexCoords
mgGetConstructVertexCoordsBase = _mgapilib.mgGetConstructVertexCoords
mgDeleteConstructVertex = _mgapilib.mgDeleteConstructVertex
mgFirstConstructVertex = _mgapilib.mgFirstConstructVertex
mgNextConstructVertex = _mgapilib.mgNextConstructVertex
mgNewConstructEdge = _mgapilib.mgNewConstructEdge
mgSetConstructEdgeColor = _mgapilib.mgSetConstructEdgeColor
mgSetConstructEdgeCoords = _mgapilib.mgSetConstructEdgeCoords
mgGetConstructEdgeCoordsBase = _mgapilib.mgGetConstructEdgeCoords
mgDeleteConstructEdge = _mgapilib.mgDeleteConstructEdge
mgFirstConstructEdge = _mgapilib.mgFirstConstructEdge
mgNextConstructEdge = _mgapilib.mgNextConstructEdge
mgDeleteAllConstructs = _mgapilib.mgDeleteAllConstructs
mgRefreshScene = _mgapilib.mgRefreshScene
mgNewEditorContext = _mgapilib.mgNewEditorContext
mgExecute = _mgapilib.mgExecute
mgStartTool = _mgapilib.mgStartTool
mgEditorSendXML = _mgapilib.mgEditorSendXML
class mgvalidatorvalidatecallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvalidatorvalidatecallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvalidatorvalidatecallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgvalidatorvalidatecallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgvalidatorvalidatecallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgvalidatorvalidatecallbackrec_toolActivation_get, _mgapilib.mgvalidatorvalidatecallbackrec_toolActivation_set)
    __swig_setmethods__["validatorContext"] = _mgapilib.mgvalidatorvalidatecallbackrec_validatorContext_set
    __swig_getmethods__["validatorContext"] = _mgapilib.mgvalidatorvalidatecallbackrec_validatorContext_get
    if _newclass:validatorContext = _swig_property(_mgapilib.mgvalidatorvalidatecallbackrec_validatorContext_get, _mgapilib.mgvalidatorvalidatecallbackrec_validatorContext_set)
    __swig_setmethods__["maxResults"] = _mgapilib.mgvalidatorvalidatecallbackrec_maxResults_set
    __swig_getmethods__["maxResults"] = _mgapilib.mgvalidatorvalidatecallbackrec_maxResults_get
    if _newclass:maxResults = _swig_property(_mgapilib.mgvalidatorvalidatecallbackrec_maxResults_get, _mgapilib.mgvalidatorvalidatecallbackrec_maxResults_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvalidatorvalidatecallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvalidatorvalidatecallbackrec
    __del__ = lambda self : None;
mgvalidatorvalidatecallbackrec_swigregister = _mgapilib.mgvalidatorvalidatecallbackrec_swigregister
mgvalidatorvalidatecallbackrec_swigregister(mgvalidatorvalidatecallbackrec)

class mgvalidatorfixcallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgvalidatorfixcallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgvalidatorfixcallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgvalidatorfixcallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgvalidatorfixcallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgvalidatorfixcallbackrec_toolActivation_get, _mgapilib.mgvalidatorfixcallbackrec_toolActivation_set)
    __swig_setmethods__["validatorContext"] = _mgapilib.mgvalidatorfixcallbackrec_validatorContext_set
    __swig_getmethods__["validatorContext"] = _mgapilib.mgvalidatorfixcallbackrec_validatorContext_get
    if _newclass:validatorContext = _swig_property(_mgapilib.mgvalidatorfixcallbackrec_validatorContext_get, _mgapilib.mgvalidatorfixcallbackrec_validatorContext_set)
    __swig_setmethods__["defect"] = _mgapilib.mgvalidatorfixcallbackrec_defect_set
    __swig_getmethods__["defect"] = _mgapilib.mgvalidatorfixcallbackrec_defect_get
    if _newclass:defect = _swig_property(_mgapilib.mgvalidatorfixcallbackrec_defect_get, _mgapilib.mgvalidatorfixcallbackrec_defect_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgvalidatorfixcallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgvalidatorfixcallbackrec
    __del__ = lambda self : None;
mgvalidatorfixcallbackrec_swigregister = _mgapilib.mgvalidatorfixcallbackrec_swigregister
mgvalidatorfixcallbackrec_swigregister(mgvalidatorfixcallbackrec)

mgRegisterValidator = _mgapilib.mgRegisterValidator
mgValidatorSetValidateParamBlock = _mgapilib.mgValidatorSetValidateParamBlock
mgValidatorSetFixParamBlock = _mgapilib.mgValidatorSetFixParamBlock
mgValidatorSetDefectDetailEditFunc = _mgapilib.mgValidatorSetDefectDetailEditFunc
mgValidatorNewDefect = _mgapilib.mgValidatorNewDefect
mgValidatorGetDefect = _mgapilib.mgValidatorGetDefect
mgValidatorDefectGetID = _mgapilib.mgValidatorDefectGetID
mgValidatorDefectSetResult = _mgapilib.mgValidatorDefectSetResult
mgValidatorDefectGetResult = _mgapilib.mgValidatorDefectGetResult
mgValidatorDefectGetDetailCount = _mgapilib.mgValidatorDefectGetDetailCount
mgValidatorDefectGetNthDetail = _mgapilib.mgValidatorDefectGetNthDetail
mgValidatorNewDefectDetail = _mgapilib.mgValidatorNewDefectDetail
mgValidatorDefectDetailGetName = _mgapilib.mgValidatorDefectDetailGetName
mgValidatorNewDefectDetailNode = _mgapilib.mgValidatorNewDefectDetailNode
mgValidatorDefectDetailGetNode = _mgapilib.mgValidatorDefectDetailGetNode
mgValidatorDefectDetailAddAttributeInteger = _mgapilib.mgValidatorDefectDetailAddAttributeInteger
mgValidatorDefectDetailGetAttributeInteger = _mgapilib.mgValidatorDefectDetailGetAttributeInteger
mgValidatorDefectDetailAddAttributeBool = _mgapilib.mgValidatorDefectDetailAddAttributeBool
mgValidatorDefectDetailGetAttributeBool = _mgapilib.mgValidatorDefectDetailGetAttributeBool
mgValidatorDefectDetailAddAttributeDouble = _mgapilib.mgValidatorDefectDetailAddAttributeDouble
mgValidatorDefectDetailGetAttributeDouble = _mgapilib.mgValidatorDefectDetailGetAttributeDouble
mgValidatorDefectDetailAddAttributeString = _mgapilib.mgValidatorDefectDetailAddAttributeString
mgValidatorDefectDetailGetAttributeString = _mgapilib.mgValidatorDefectDetailGetAttributeString
class mgrenderercallbackrec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgrenderercallbackrec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgrenderercallbackrec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolActivation"] = _mgapilib.mgrenderercallbackrec_toolActivation_set
    __swig_getmethods__["toolActivation"] = _mgapilib.mgrenderercallbackrec_toolActivation_get
    if _newclass:toolActivation = _swig_property(_mgapilib.mgrenderercallbackrec_toolActivation_get, _mgapilib.mgrenderercallbackrec_toolActivation_set)
    __swig_setmethods__["rendererContext"] = _mgapilib.mgrenderercallbackrec_rendererContext_set
    __swig_getmethods__["rendererContext"] = _mgapilib.mgrenderercallbackrec_rendererContext_get
    if _newclass:rendererContext = _swig_property(_mgapilib.mgrenderercallbackrec_rendererContext_get, _mgapilib.mgrenderercallbackrec_rendererContext_set)
    __swig_setmethods__["startRenderer"] = _mgapilib.mgrenderercallbackrec_startRenderer_set
    __swig_getmethods__["startRenderer"] = _mgapilib.mgrenderercallbackrec_startRenderer_get
    if _newclass:startRenderer = _swig_property(_mgapilib.mgrenderercallbackrec_startRenderer_get, _mgapilib.mgrenderercallbackrec_startRenderer_set)
    __swig_setmethods__["toolData"] = _mgapilib.mgrenderercallbackrec_toolData_set
    __swig_getmethods__["toolData"] = _mgapilib.mgrenderercallbackrec_toolData_get
    if _newclass:toolData = _swig_property(_mgapilib.mgrenderercallbackrec_toolData_get, _mgapilib.mgrenderercallbackrec_toolData_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgrenderercallbackrec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mgapilib.delete_mgrenderercallbackrec
    __del__ = lambda self : None;
mgrenderercallbackrec_swigregister = _mgapilib.mgrenderercallbackrec_swigregister
mgrenderercallbackrec_swigregister(mgrenderercallbackrec)

MRCB_INIT = _mgapilib.MRCB_INIT
MRCB_SHOW = _mgapilib.MRCB_SHOW
MRCB_HIDE = _mgapilib.MRCB_HIDE
MRCB_DESTROY = _mgapilib.MRCB_DESTROY
MRCB_DRAW = _mgapilib.MRCB_DRAW
MRCB_SIZE = _mgapilib.MRCB_SIZE
MRCB_SYNC = _mgapilib.MRCB_SYNC
MRCD_COMMON = _mgapilib.MRCD_COMMON
MRCD_TEXTACTIVATE = _mgapilib.MRCD_TEXTACTIVATE
MRCD_SCALEACTIVATE = _mgapilib.MRCD_SCALEACTIVATE
MRCD_GLDRAW = _mgapilib.MRCD_GLDRAW
MRCD_DIALOGSIZE = _mgapilib.MRCD_DIALOGSIZE
MTAT_UNKNOWN = _mgapilib.MTAT_UNKNOWN
MTAT_NORMAL = _mgapilib.MTAT_NORMAL
MTAT_REPEAT = _mgapilib.MTAT_REPEAT
MTAT_SCRIPT = _mgapilib.MTAT_SCRIPT
MTAT_PROCESS = _mgapilib.MTAT_PROCESS
mgGetModelingParent = _mgapilib.mgGetModelingParent
mgSetModelingParent = _mgapilib.mgSetModelingParent
mgGetDefaultModelingParent = _mgapilib.mgGetDefaultModelingParent
mgGetModelingParentMatrixBase = _mgapilib.mgGetModelingParentMatrix
mgGetModelingMode = _mgapilib.mgGetModelingMode
mgSetModelingMode = _mgapilib.mgSetModelingMode
mgIsModelingModeEdge = _mgapilib.mgIsModelingModeEdge
mgSetModelingModeEdge = _mgapilib.mgSetModelingModeEdge
mgGetCurrentTrackPlaneBase = _mgapilib.mgGetCurrentTrackPlane
mgGetCurrentGridMatrixBase = _mgapilib.mgGetCurrentGridMatrix
mgGetCurrentGridPointsBase = _mgapilib.mgGetCurrentGridPoints
mgSetCurrentGridPoints = _mgapilib.mgSetCurrentGridPoints
MNOTIFY_SELECTLISTCHANGED = _mgapilib.MNOTIFY_SELECTLISTCHANGED
MNOTIFY_NEWTOPDATABASE = _mgapilib.MNOTIFY_NEWTOPDATABASE
MNOTIFY_DATABASECLOSED = _mgapilib.MNOTIFY_DATABASECLOSED
MNOTIFY_CURRENTPRIMARYCOLORCHANGED = _mgapilib.MNOTIFY_CURRENTPRIMARYCOLORCHANGED
MNOTIFY_CURRENTALTCOLORCHANGED = _mgapilib.MNOTIFY_CURRENTALTCOLORCHANGED
MNOTIFY_CURRENTTEXTURECHANGED = _mgapilib.MNOTIFY_CURRENTTEXTURECHANGED
MNOTIFY_CURRENTMATERIALCHANGED = _mgapilib.MNOTIFY_CURRENTMATERIALCHANGED
MNOTIFY_CURRENTTEXTUREMAPPINGCHANGED = _mgapilib.MNOTIFY_CURRENTTEXTUREMAPPINGCHANGED
MNOTIFY_CURRENTLIGHTPOINTAPPEARANCECHANGED = _mgapilib.MNOTIFY_CURRENTLIGHTPOINTAPPEARANCECHANGED
MNOTIFY_CURRENTLIGHTPOINTANIMATIONCHANGED = _mgapilib.MNOTIFY_CURRENTLIGHTPOINTANIMATIONCHANGED
MNOTIFY_CURRENTSHADERCHANGED = _mgapilib.MNOTIFY_CURRENTSHADERCHANGED
MNOTIFY_CURRENTSOUNDCHANGED = _mgapilib.MNOTIFY_CURRENTSOUNDCHANGED
MNOTIFY_CURRENTLIGHTSOURCECHANGED = _mgapilib.MNOTIFY_CURRENTLIGHTSOURCECHANGED
MNOTIFY_LIGHTPOINTPALETTEIZED = _mgapilib.MNOTIFY_LIGHTPOINTPALETTEIZED
MNOTIFY_DESKTOPINIT = _mgapilib.MNOTIFY_DESKTOPINIT
MNOTIFY_DESKTOPEXIT = _mgapilib.MNOTIFY_DESKTOPEXIT
MNOTIFY_DATABASEOPENED = _mgapilib.MNOTIFY_DATABASEOPENED
MNOTIFY_DATABASESAVED = _mgapilib.MNOTIFY_DATABASESAVED
MNOTIFY_NODECHANGED = _mgapilib.MNOTIFY_NODECHANGED
MNOTIFY_NODEDELETED = _mgapilib.MNOTIFY_NODEDELETED
MNOTIFY_NODECREATED = _mgapilib.MNOTIFY_NODECREATED
MNOTIFY_NODEREPARENTED = _mgapilib.MNOTIFY_NODEREPARENTED
MNOTIFY_COLORPALETTECHANGED = _mgapilib.MNOTIFY_COLORPALETTECHANGED
MNOTIFY_TEXTUREPALETTECHANGED = _mgapilib.MNOTIFY_TEXTUREPALETTECHANGED
MNOTIFY_MATERIALPALETTECHANGED = _mgapilib.MNOTIFY_MATERIALPALETTECHANGED
MNOTIFY_TEXTUREMAPPINGPALETTECHANGED = _mgapilib.MNOTIFY_TEXTUREMAPPINGPALETTECHANGED
MNOTIFY_LIGHTPOINTAPPEARANCEPALETTECHANGED = _mgapilib.MNOTIFY_LIGHTPOINTAPPEARANCEPALETTECHANGED
MNOTIFY_LIGHTPOINTANIMATIONPALETTECHANGED = _mgapilib.MNOTIFY_LIGHTPOINTANIMATIONPALETTECHANGED
MNOTIFY_SHADERPALETTECHANGED = _mgapilib.MNOTIFY_SHADERPALETTECHANGED
MNOTIFY_SOUNDPALETTECHANGED = _mgapilib.MNOTIFY_SOUNDPALETTECHANGED
MNOTIFY_LIGHTSOURCEPALETTECHANGED = _mgapilib.MNOTIFY_LIGHTSOURCEPALETTECHANGED
MNOTIFY_SWITCHDISTANCECHANGED = _mgapilib.MNOTIFY_SWITCHDISTANCECHANGED
MNOTIFY_TIMEOFDAYCHANGED = _mgapilib.MNOTIFY_TIMEOFDAYCHANGED
MNOTIFY_TEXTURESELECTCHANGED = _mgapilib.MNOTIFY_TEXTURESELECTCHANGED
MNOTIFY_EXTENSIONCHANGED = _mgapilib.MNOTIFY_EXTENSIONCHANGED
MNOTIFY_DATABASEPRESAVE = _mgapilib.MNOTIFY_DATABASEPRESAVE
MNOTIFY_EYEPOINTCHANGED = _mgapilib.MNOTIFY_EYEPOINTCHANGED
mgRegisterScriptLogNotifier = _mgapilib.mgRegisterScriptLogNotifier
mgUnregisterScriptLogNotifier = _mgapilib.mgUnregisterScriptLogNotifier
mgSetScriptLogNotifierEnabled = _mgapilib.mgSetScriptLogNotifierEnabled
mgScriptLogMessage = _mgapilib.mgScriptLogMessage
mgGetCurrentShaderBase = _mgapilib.mgGetCurrentShader
mgSetCurrentShader = _mgapilib.mgSetCurrentShader
mgNewShaderBase = _mgapilib.mgNewShader
mgDeleteShader = _mgapilib.mgDeleteShader
mgDeleteShaderByName = _mgapilib.mgDeleteShaderByName
mgShaderSetSavePathType = _mgapilib.mgShaderSetSavePathType
mgShaderAddVertexProgram = _mgapilib.mgShaderAddVertexProgram
mgShaderAddFragmentProgram = _mgapilib.mgShaderAddFragmentProgram
mgShaderDeleteVertexProgramNth = _mgapilib.mgShaderDeleteVertexProgramNth
mgShaderDeleteFragmentProgramNth = _mgapilib.mgShaderDeleteFragmentProgramNth
mgShaderSetVertexProgramNth = _mgapilib.mgShaderSetVertexProgramNth
mgShaderSetFragmentProgramNth = _mgapilib.mgShaderSetFragmentProgramNth
mgGetShader = _mgapilib.mgGetShader
mgIndexOfShader = _mgapilib.mgIndexOfShader
mgNameOfShader = _mgapilib.mgNameOfShader
mgGetShaderCount = _mgapilib.mgGetShaderCount
mgGetFirstShaderBase = _mgapilib.mgGetFirstShader
mgGetNextShaderBase = _mgapilib.mgGetNextShader
mgGetShaderProgramSaveName = _mgapilib.mgGetShaderProgramSaveName
mgShaderGetSavePathType = _mgapilib.mgShaderGetSavePathType
mgShaderGetVertexProgramNth = _mgapilib.mgShaderGetVertexProgramNth
mgShaderGetFragmentProgramNth = _mgapilib.mgShaderGetFragmentProgramNth
FLTOP_RECORD_OFFSET = _mgapilib.FLTOP_RECORD_OFFSET
FLTOP_DATA_OFFSET = _mgapilib.FLTOP_DATA_OFFSET
FLT_SITEID = _mgapilib.FLT_SITEID
fltBoundingCenter = _mgapilib.fltBoundingCenter
fltBoundingOrientation = _mgapilib.fltBoundingOrientation
fltBoundingSphere = _mgapilib.fltBoundingSphere
fltBoundingCylinder = _mgapilib.fltBoundingCylinder
fltBoundingHull = _mgapilib.fltBoundingHull
fltBHNext = _mgapilib.fltBHNext
fltBHPnt1 = _mgapilib.fltBHPnt1
fltBHPnt2 = _mgapilib.fltBHPnt2
fltBHPnt3 = _mgapilib.fltBHPnt3
fltBoundingHistogram = _mgapilib.fltBoundingHistogram
fltHistPosts = _mgapilib.fltHistPosts
fltXrefGfxCntx = _mgapilib.fltXrefGfxCntx
fltPolyGfxCntx = _mgapilib.fltPolyGfxCntx
fltTxtGeoCoordData = _mgapilib.fltTxtGeoCoordData
fltTxtGeoCoord = _mgapilib.fltTxtGeoCoord
fltTxtGeoCoordLst = _mgapilib.fltTxtGeoCoordLst
fltTGData = _mgapilib.fltTGData
fltTGNext = _mgapilib.fltTGNext
fltTGCoords = _mgapilib.fltTGCoords
fltImgGeoCoords = _mgapilib.fltImgGeoCoords
fltSound = _mgapilib.fltSound
fltSoundPalette = _mgapilib.fltSoundPalette
fltSndNext = _mgapilib.fltSndNext
fltSndOffset = _mgapilib.fltSndOffset
fltSndNormal = _mgapilib.fltSndNormal
fltPath = _mgapilib.fltPath
fltCoord3f = _mgapilib.fltCoord3f
fltEyePoint = _mgapilib.fltEyePoint
fltEyeRotCenter = _mgapilib.fltEyeRotCenter
fltEyeRotMatrix = _mgapilib.fltEyeRotMatrix
fltEyeLookFrom = _mgapilib.fltEyeLookFrom
fltEyeEyeDir = _mgapilib.fltEyeEyeDir
fltFPoint = _mgapilib.fltFPoint
fltSWIfmt = _mgapilib.fltSWIfmt
fltTerTrans = _mgapilib.fltTerTrans
fltAmbient = _mgapilib.fltAmbient
fltBottomLeftFront = _mgapilib.fltBottomLeftFront
fltBoundingBox = _mgapilib.fltBoundingBox
fltBox = _mgapilib.fltBox
fltBsp = _mgapilib.fltBsp
fltColorRGBA = _mgapilib.fltColorRGBA
fltCylinder = _mgapilib.fltCylinder
fltDPlane = _mgapilib.fltDPlane
fltIDblInfo = _mgapilib.fltIDblInfo
fltIDfadInfo = _mgapilib.fltIDfadInfo
fltVDfadInfo = _mgapilib.fltVDfadInfo
fltDiffuse = _mgapilib.fltDiffuse
fltDof = _mgapilib.fltDof
fltIDownBead = _mgapilib.fltIDownBead
fltEmissive = _mgapilib.fltEmissive
fltFMaterial = _mgapilib.fltFMaterial
fltIFirstInstance = _mgapilib.fltIFirstInstance
fltGfxCntx = _mgapilib.fltGfxCntx
fltGroup = _mgapilib.fltGroup
fltHeader = _mgapilib.fltHeader
fltIMaterial = _mgapilib.fltIMaterial
fltCoord2i = _mgapilib.fltCoord2i
fltIbead = _mgapilib.fltIbead
fltCoord3d = _mgapilib.fltCoord3d
fltImage = _mgapilib.fltImage
fltImgPivot = _mgapilib.fltImgPivot
fltImgUp = _mgapilib.fltImgUp
fltIInsert = _mgapilib.fltIInsert
fltLightSource = _mgapilib.fltLightSource
fltLightSourcePalette = _mgapilib.fltLightSourcePalette
fltILinkInfo = _mgapilib.fltILinkInfo
fltVLinkInfo = _mgapilib.fltVLinkInfo
fltLodCenterPoint = _mgapilib.fltLodCenterPoint
fltLod = _mgapilib.fltLod
fltLtsPosition = _mgapilib.fltLtsPosition
fltLtspAmbient = _mgapilib.fltLtspAmbient
fltLtspDiffuse = _mgapilib.fltLtspDiffuse
fltLtspSpecular = _mgapilib.fltLtspSpecular
fltIMasterBead = _mgapilib.fltIMasterBead
fltMatrix = _mgapilib.fltMatrix
fltIMesh = _mgapilib.fltIMesh
fltINextBead = _mgapilib.fltINextBead
fltVNextBead = _mgapilib.fltVNextBead
fltINextInstance = _mgapilib.fltINextInstance
fltINextSelect = _mgapilib.fltINextSelect
fltVNextSelect = _mgapilib.fltVNextSelect
fltINextSelect2 = _mgapilib.fltINextSelect2
fltVNextSelect2 = _mgapilib.fltVNextSelect2
fltNormColor = _mgapilib.fltNormColor
fltOSWIfmt = _mgapilib.fltOSWIfmt
fltObject = _mgapilib.fltObject
fltOterTrans = _mgapilib.fltOterTrans
fltPackedColor = _mgapilib.fltPackedColor
fltPolyColor2Rgb = _mgapilib.fltPolyColor2Rgb
fltPolyColorRgb = _mgapilib.fltPolyColorRgb
fltPolygon = _mgapilib.fltPolygon
fltRecDummy = _mgapilib.fltRecDummy
fltIRecInfo = _mgapilib.fltIRecInfo
fltVExtInfo = _mgapilib.fltVExtInfo
fltVRecInfo = _mgapilib.fltVRecInfo
fltRecUndef = _mgapilib.fltRecUndef
fltShareVtxS = _mgapilib.fltShareVtxS
fltISoundPath = _mgapilib.fltISoundPath
fltSpecular = _mgapilib.fltSpecular
fltISplit = _mgapilib.fltISplit
fltStrucrec = _mgapilib.fltStrucrec
fltISubBead = _mgapilib.fltISubBead
fltVSubVertex = _mgapilib.fltVSubVertex
fltISuperBead = _mgapilib.fltISuperBead
fltVSuperVertex = _mgapilib.fltVSuperVertex
fltSwSwitches = _mgapilib.fltSwSwitches
fltSwitch = _mgapilib.fltSwitch
fltTopRightBack = _mgapilib.fltTopRightBack
fltIUpBead = _mgapilib.fltIUpBead
fltVUpBead = _mgapilib.fltVUpBead
fltVNormal = _mgapilib.fltVNormal
fltVertex = _mgapilib.fltVertex
fltVector = _mgapilib.fltVector
fltXformPtr = _mgapilib.fltXformPtr
fltXmDblInfo = _mgapilib.fltXmDblInfo
fltXmGeneral = _mgapilib.fltXmGeneral
fltXmHeader = _mgapilib.fltXmHeader
fltXmLimits = _mgapilib.fltXmLimits
fltXmNext = _mgapilib.fltXmNext
fltXmPut = _mgapilib.fltXmPut
fltXmPutFromAlign = _mgapilib.fltXmPutFromAlign
fltXmPutFromOrigin = _mgapilib.fltXmPutFromOrigin
fltXmPutFromTrack = _mgapilib.fltXmPutFromTrack
fltXmPutToAlign = _mgapilib.fltXmPutToAlign
fltXmPutToOrigin = _mgapilib.fltXmPutToOrigin
fltXmPutToTrack = _mgapilib.fltXmPutToTrack
fltXmRotRefPoint1 = _mgapilib.fltXmRotRefPoint1
fltXmRotRefPoint2 = _mgapilib.fltXmRotRefPoint2
fltXmScaleRefPoint1 = _mgapilib.fltXmScaleRefPoint1
fltXmScaleRefPoint2 = _mgapilib.fltXmScaleRefPoint2
fltXmRotate = _mgapilib.fltXmRotate
fltXmRotateAxis = _mgapilib.fltXmRotateAxis
fltXmRotateCenter = _mgapilib.fltXmRotateCenter
fltXmRotateEdge = _mgapilib.fltXmRotateEdge
fltXmScale = _mgapilib.fltXmScale
fltXmScaleCenter = _mgapilib.fltXmScaleCenter
fltXmScalePointCenter = _mgapilib.fltXmScalePointCenter
fltXmScaleToPoint = _mgapilib.fltXmScaleToPoint
fltXmTranslate = _mgapilib.fltXmTranslate
fltXmTranslateDelta = _mgapilib.fltXmTranslateDelta
fltXmTranslateFrom = _mgapilib.fltXmTranslateFrom
fltXref = _mgapilib.fltXref
fltTextText = _mgapilib.fltTextText
fltLpDirection = _mgapilib.fltLpDirection
fltLpModel = _mgapilib.fltLpModel
fltLpAnimationVector = _mgapilib.fltLpAnimationVector
fltLpAttr = _mgapilib.fltLpAttr
fltLpCoordArray = _mgapilib.fltLpCoordArray
fltLpPercentArray = _mgapilib.fltLpPercentArray
fltLpRangeArray = _mgapilib.fltLpRangeArray
fltCurve = _mgapilib.fltCurve
fltText = _mgapilib.fltText
fltLightPoint = _mgapilib.fltLightPoint
fltRoadFirstControlPoint = _mgapilib.fltRoadFirstControlPoint
fltRoadMiddleControlPoint = _mgapilib.fltRoadMiddleControlPoint
fltRoadLastControlPoint = _mgapilib.fltRoadLastControlPoint
fltRoad = _mgapilib.fltRoad
fltRoadAttr = _mgapilib.fltRoadAttr
fltCat = _mgapilib.fltCat
fltClipV0 = _mgapilib.fltClipV0
fltClipV1 = _mgapilib.fltClipV1
fltClipV2 = _mgapilib.fltClipV2
fltClipV3 = _mgapilib.fltClipV3
fltClipPlane0 = _mgapilib.fltClipPlane0
fltClipPlane1 = _mgapilib.fltClipPlane1
fltClipPlane2 = _mgapilib.fltClipPlane2
fltClipPlane3 = _mgapilib.fltClipPlane3
fltClipPlane4 = _mgapilib.fltClipPlane4
fltClip = _mgapilib.fltClip
fltTM3PtOriginUV = _mgapilib.fltTM3PtOriginUV
fltTM3PtAlignUV = _mgapilib.fltTM3PtAlignUV
fltTM3PtShearUV = _mgapilib.fltTM3PtShearUV
fltTM3PtOriginXYZ = _mgapilib.fltTM3PtOriginXYZ
fltTM3PtAlignXYZ = _mgapilib.fltTM3PtAlignXYZ
fltTM3PtShearXYZ = _mgapilib.fltTM3PtShearXYZ
fltTM4PtOriginUV = _mgapilib.fltTM4PtOriginUV
fltTM4PtAlignUV = _mgapilib.fltTM4PtAlignUV
fltTM4PtShearUV = _mgapilib.fltTM4PtShearUV
fltTM4PtPerspectiveUV = _mgapilib.fltTM4PtPerspectiveUV
fltTM4PtOriginXYZ = _mgapilib.fltTM4PtOriginXYZ
fltTM4PtAlignXYZ = _mgapilib.fltTM4PtAlignXYZ
fltTM4PtShearXYZ = _mgapilib.fltTM4PtShearXYZ
fltTM4PtPerspectiveXYZ = _mgapilib.fltTM4PtPerspectiveXYZ
fltTMSphCenter = _mgapilib.fltTMSphCenter
fltTMRadVertex1 = _mgapilib.fltTMRadVertex1
fltTMRadVertex2 = _mgapilib.fltTMRadVertex2
fltTM3PointPut = _mgapilib.fltTM3PointPut
fltTM4PointPut = _mgapilib.fltTM4PointPut
fltTMSphericalProject = _mgapilib.fltTMSphericalProject
fltTMRadialProject = _mgapilib.fltTMRadialProject
fltMappingData = _mgapilib.fltMappingData
fltTextureMapping = _mgapilib.fltTextureMapping
fltGridOrigin = _mgapilib.fltGridOrigin
fltGridAlign = _mgapilib.fltGridAlign
fltGridTrack = _mgapilib.fltGridTrack
fltGrid = _mgapilib.fltGrid
fltHelperOrigin = _mgapilib.fltHelperOrigin
fltHelperAlign1 = _mgapilib.fltHelperAlign1
fltHelperAlign2 = _mgapilib.fltHelperAlign2
fltHelper = _mgapilib.fltHelper
fltTorsionVector = _mgapilib.fltTorsionVector
fltTorsion = _mgapilib.fltTorsion
fltSurface = _mgapilib.fltSurface
fltVectord = _mgapilib.fltVectord
fltMeshAttr = _mgapilib.fltMeshAttr
fltMesh = _mgapilib.fltMesh
fltLpAppearancePalette = _mgapilib.fltLpAppearancePalette
fltLpAnimationPalette = _mgapilib.fltLpAnimationPalette
fltLightPointSystem = _mgapilib.fltLightPointSystem
fltShaderPalette = _mgapilib.fltShaderPalette
fltMappingTransformMatrix = _mgapilib.fltMappingTransformMatrix
fltMatTextureLayer = _mgapilib.fltMatTextureLayer
fltAmbientEx = _mgapilib.fltAmbientEx
fltAmbientExColor = _mgapilib.fltAmbientExColor
fltAmbientExLayer1 = _mgapilib.fltAmbientExLayer1
fltAmbientExLayer2 = _mgapilib.fltAmbientExLayer2
fltAmbientExLayer3 = _mgapilib.fltAmbientExLayer3
fltAmbientExLayer4 = _mgapilib.fltAmbientExLayer4
fltDiffuseEx = _mgapilib.fltDiffuseEx
fltDiffuseExColor = _mgapilib.fltDiffuseExColor
fltDiffuseExLayer1 = _mgapilib.fltDiffuseExLayer1
fltDiffuseExLayer2 = _mgapilib.fltDiffuseExLayer2
fltDiffuseExLayer3 = _mgapilib.fltDiffuseExLayer3
fltDiffuseExLayer4 = _mgapilib.fltDiffuseExLayer4
fltSpecularEx = _mgapilib.fltSpecularEx
fltSpecularExColor = _mgapilib.fltSpecularExColor
fltSpecularExLayer1 = _mgapilib.fltSpecularExLayer1
fltSpecularExLayer2 = _mgapilib.fltSpecularExLayer2
fltSpecularExLayer3 = _mgapilib.fltSpecularExLayer3
fltSpecularExLayer4 = _mgapilib.fltSpecularExLayer4
fltEmissiveEx = _mgapilib.fltEmissiveEx
fltEmissiveExColor = _mgapilib.fltEmissiveExColor
fltEmissiveExLayer1 = _mgapilib.fltEmissiveExLayer1
fltEmissiveExLayer2 = _mgapilib.fltEmissiveExLayer2
fltEmissiveExLayer3 = _mgapilib.fltEmissiveExLayer3
fltEmissiveExLayer4 = _mgapilib.fltEmissiveExLayer4
fltAlphaEx = _mgapilib.fltAlphaEx
fltAlphaExLayer1 = _mgapilib.fltAlphaExLayer1
fltAlphaExLayer2 = _mgapilib.fltAlphaExLayer2
fltAlphaExLayer3 = _mgapilib.fltAlphaExLayer3
fltAlphaExLayer4 = _mgapilib.fltAlphaExLayer4
fltLightMapEx = _mgapilib.fltLightMapEx
fltLightMapExTexture = _mgapilib.fltLightMapExTexture
fltNormalMapEx = _mgapilib.fltNormalMapEx
fltNormalMapExTexture = _mgapilib.fltNormalMapExTexture
fltBumpMapEx = _mgapilib.fltBumpMapEx
fltBumpMapExTexture = _mgapilib.fltBumpMapExTexture
fltShadowMapEx = _mgapilib.fltShadowMapEx
fltShadowMapExTexture = _mgapilib.fltShadowMapExTexture
fltHorizonMapEx = _mgapilib.fltHorizonMapEx
fltHorizonMapExTexture = _mgapilib.fltHorizonMapExTexture
fltReflectionMapEx = _mgapilib.fltReflectionMapEx
fltReflectionMapExReflectionTexture = _mgapilib.fltReflectionMapExReflectionTexture
fltReflectionMapExEnvironmentTexture = _mgapilib.fltReflectionMapExEnvironmentTexture
fltReflectionMapExColor = _mgapilib.fltReflectionMapExColor
fltLineStylePalette = _mgapilib.fltLineStylePalette
fltPhysicalMaterialMapEx = _mgapilib.fltPhysicalMaterialMapEx
fltPhysicalMaterialMapExTexture = _mgapilib.fltPhysicalMaterialMapExTexture
FLT_RECORD_MAX = _mgapilib.FLT_RECORD_MAX
fltNlhash = _mgapilib.fltNlhash
fltDofId = _mgapilib.fltDofId
fltVtxType = _mgapilib.fltVtxType
fltDblOrig = _mgapilib.fltDblOrig
fltSoundid = _mgapilib.fltSoundid
fltPathid = _mgapilib.fltPathid
fltClipid = _mgapilib.fltClipid
fltTextid = _mgapilib.fltTextid
fltBspid = _mgapilib.fltBspid
fltSwitchid = _mgapilib.fltSwitchid
fltLtsrcid = _mgapilib.fltLtsrcid
fltLtpntid = _mgapilib.fltLtpntid
fltRoadid = _mgapilib.fltRoadid
fltCatid = _mgapilib.fltCatid
fltBYaw = _mgapilib.fltBYaw
fltBPitch = _mgapilib.fltBPitch
fltBRoll = _mgapilib.fltBRoll
fltBSRadius = _mgapilib.fltBSRadius
fltBCRadius = _mgapilib.fltBCRadius
fltBCHeight = _mgapilib.fltBCHeight
fltNumXincs = _mgapilib.fltNumXincs
fltNumYincs = _mgapilib.fltNumYincs
fltPlateauFunc = _mgapilib.fltPlateauFunc
fltLodSpecial1 = _mgapilib.fltLodSpecial1
fltLodSpecial2 = _mgapilib.fltLodSpecial2
fltPolyFootprint = _mgapilib.fltPolyFootprint
fltPolyHidden = _mgapilib.fltPolyHidden
fltPolyTexmap = _mgapilib.fltPolyTexmap
fltPolyDetailTexmap = _mgapilib.fltPolyDetailTexmap
fltPolyPrimeColor = _mgapilib.fltPolyPrimeColor
fltPolyPrimeIntensity = _mgapilib.fltPolyPrimeIntensity
fltPolyAltColor = _mgapilib.fltPolyAltColor
fltPolyAltIntensity = _mgapilib.fltPolyAltIntensity
fltImgFocalLength = _mgapilib.fltImgFocalLength
fltImgPixelScale = _mgapilib.fltImgPixelScale
fltImgPrinciplePtx = _mgapilib.fltImgPrinciplePtx
fltImgPrinciplePty = _mgapilib.fltImgPrinciplePty
fltImgLon0 = _mgapilib.fltImgLon0
fltImgLat0 = _mgapilib.fltImgLat0
fltImgLat1 = _mgapilib.fltImgLat1
fltImgLat2 = _mgapilib.fltImgLat2
fltNpscale = _mgapilib.fltNpscale
fltImgProjection = _mgapilib.fltImgProjection
fltImgEarthModel = _mgapilib.fltImgEarthModel
fltImgCameraType = _mgapilib.fltImgCameraType
fltImgUTMzone = _mgapilib.fltImgUTMzone
fltImgImageOrigin = _mgapilib.fltImgImageOrigin
fltImgUnits = _mgapilib.fltImgUnits
fltPixelScaleUnits = _mgapilib.fltPixelScaleUnits
fltImgFocalLengthUnits = _mgapilib.fltImgFocalLengthUnits
fltImgHemisphere = _mgapilib.fltImgHemisphere
fltImgFalseEasting = _mgapilib.fltImgFalseEasting
fltImgFalseNorthing = _mgapilib.fltImgFalseNorthing
fltMirrorSmoothFlags = _mgapilib.fltMirrorSmoothFlags
fltImgVersion = _mgapilib.fltImgVersion
fltSndIndex = _mgapilib.fltSndIndex
fltSndOrder = _mgapilib.fltSndOrder
fltSndFound = _mgapilib.fltSndFound
fltSndFilename = _mgapilib.fltSndFilename
fltSndPathname = _mgapilib.fltSndPathname
fltSndName = _mgapilib.fltSndName
fltSndAmplitude = _mgapilib.fltSndAmplitude
fltSndPitchBend = _mgapilib.fltSndPitchBend
fltSndPriority = _mgapilib.fltSndPriority
fltSndFallOff = _mgapilib.fltSndFallOff
fltSndWidth = _mgapilib.fltSndWidth
fltSndDoppler = _mgapilib.fltSndDoppler
fltSndAbsorption = _mgapilib.fltSndAbsorption
fltSndDelay = _mgapilib.fltSndDelay
fltSndDirection = _mgapilib.fltSndDirection
fltSndActive = _mgapilib.fltSndActive
fltTGNumCoords = _mgapilib.fltTGNumCoords
fltTGUnits = _mgapilib.fltTGUnits
fltTGX = _mgapilib.fltTGX
fltTGY = _mgapilib.fltTGY
fltTGZ = _mgapilib.fltTGZ
fltTGU = _mgapilib.fltTGU
fltTGV = _mgapilib.fltTGV
fltTGLat = _mgapilib.fltTGLat
fltTGLon = _mgapilib.fltTGLon
fltPathName = _mgapilib.fltPathName
fltPathSpeedlimit = _mgapilib.fltPathSpeedlimit
fltPathNoPass = _mgapilib.fltPathNoPass
fltPathType = _mgapilib.fltPathType
fltEyeYaw = _mgapilib.fltEyeYaw
fltEyePitch = _mgapilib.fltEyePitch
fltEyeRoll = _mgapilib.fltEyeRoll
fltEyeFov = _mgapilib.fltEyeFov
fltEyeScale = _mgapilib.fltEyeScale
fltEyeNearClip = _mgapilib.fltEyeNearClip
fltEyeFarClip = _mgapilib.fltEyeFarClip
fltEyeOrthoFlag = _mgapilib.fltEyeOrthoFlag
fltEyeNoFly = _mgapilib.fltEyeNoFly
fltEyeActive = _mgapilib.fltEyeActive
fltCoord3fX = _mgapilib.fltCoord3fX
fltCoord3fY = _mgapilib.fltCoord3fY
fltCoord3fZ = _mgapilib.fltCoord3fZ
fltBHPnt1X = _mgapilib.fltBHPnt1X
fltBHPnt1Y = _mgapilib.fltBHPnt1Y
fltBHPnt1Z = _mgapilib.fltBHPnt1Z
fltBHPnt2X = _mgapilib.fltBHPnt2X
fltBHPnt2Y = _mgapilib.fltBHPnt2Y
fltBHPnt2Z = _mgapilib.fltBHPnt2Z
fltBHPnt3X = _mgapilib.fltBHPnt3X
fltBHPnt3Y = _mgapilib.fltBHPnt3Y
fltBHPnt3Z = _mgapilib.fltBHPnt3Z
fltSWCornerLat1 = _mgapilib.fltSWCornerLat1
fltSWCornerLong1 = _mgapilib.fltSWCornerLong1
fltNECornerLat1 = _mgapilib.fltNECornerLat1
fltNECornerLong1 = _mgapilib.fltNECornerLong1
fltOriginLat1 = _mgapilib.fltOriginLat1
fltOriginLong1 = _mgapilib.fltOriginLong1
fltUpperLat1 = _mgapilib.fltUpperLat1
fltLowerLat1 = _mgapilib.fltLowerLat1
fltFPointX = _mgapilib.fltFPointX
fltFPointY = _mgapilib.fltFPointY
fltAlpha = _mgapilib.fltAlpha
fltIAltColor = _mgapilib.fltIAltColor
fltIAltIntensity = _mgapilib.fltIAltIntensity
fltBlue = _mgapilib.fltBlue
fltBoundingType = _mgapilib.fltBoundingType
fltICface = _mgapilib.fltICface
fltIChanged = _mgapilib.fltIChanged
fltVChanged = _mgapilib.fltVChanged
fltIColor = _mgapilib.fltIColor
fltIIntensity = _mgapilib.fltIIntensity
fltColorA = _mgapilib.fltColorA
fltColorB = _mgapilib.fltColorB
fltColorG = _mgapilib.fltColorG
fltColorR = _mgapilib.fltColorR
fltIConstructFlag = _mgapilib.fltIConstructFlag
fltICurtex = _mgapilib.fltICurtex
fltICurtex1 = _mgapilib.fltICurtex1
fltICurtex2 = _mgapilib.fltICurtex2
fltICurtex3 = _mgapilib.fltICurtex3
fltDPlaneA = _mgapilib.fltDPlaneA
fltDPlaneB = _mgapilib.fltDPlaneB
fltDPlaneC = _mgapilib.fltDPlaneC
fltDPlaneD = _mgapilib.fltDPlaneD
fltDataUndef = _mgapilib.fltDataUndef
fltIDeadBead = _mgapilib.fltIDeadBead
fltVDeadBead = _mgapilib.fltVDeadBead
fltIDfd1 = _mgapilib.fltIDfd1
fltIDfd2 = _mgapilib.fltIDfd2
fltIDfd3 = _mgapilib.fltIDfd3
fltIDfd4 = _mgapilib.fltIDfd4
fltIDisable = _mgapilib.fltIDisable
fltIDisplay = _mgapilib.fltIDisplay
fltVDisplay = _mgapilib.fltVDisplay
fltIDisplayMask = _mgapilib.fltIDisplayMask
fltDofCurXRot = _mgapilib.fltDofCurXRot
fltDofCurYRot = _mgapilib.fltDofCurYRot
fltDofCurZRot = _mgapilib.fltDofCurZRot
fltDofCurX = _mgapilib.fltDofCurX
fltDofCurXScale = _mgapilib.fltDofCurXScale
fltDofCurY = _mgapilib.fltDofCurY
fltDofCurYScale = _mgapilib.fltDofCurYScale
fltDofCurZ = _mgapilib.fltDofCurZ
fltDofCurZScale = _mgapilib.fltDofCurZScale
fltDofIncXRot = _mgapilib.fltDofIncXRot
fltDofIncYRot = _mgapilib.fltDofIncYRot
fltDofIncZRot = _mgapilib.fltDofIncZRot
fltDofIncX = _mgapilib.fltDofIncX
fltDofIncXScale = _mgapilib.fltDofIncXScale
fltDofIncY = _mgapilib.fltDofIncY
fltDofIncYScale = _mgapilib.fltDofIncYScale
fltDofIncZ = _mgapilib.fltDofIncZ
fltDofIncZScale = _mgapilib.fltDofIncZScale
fltDofMaxXRot = _mgapilib.fltDofMaxXRot
fltDofMaxYRot = _mgapilib.fltDofMaxYRot
fltDofMaxZRot = _mgapilib.fltDofMaxZRot
fltDofMaxX = _mgapilib.fltDofMaxX
fltDofMaxXScale = _mgapilib.fltDofMaxXScale
fltDofMaxY = _mgapilib.fltDofMaxY
fltDofMaxYScale = _mgapilib.fltDofMaxYScale
fltDofMaxZ = _mgapilib.fltDofMaxZ
fltDofMaxZScale = _mgapilib.fltDofMaxZScale
fltDofMinXRot = _mgapilib.fltDofMinXRot
fltDofMinYRot = _mgapilib.fltDofMinYRot
fltDofMinZRot = _mgapilib.fltDofMinZRot
fltDofMinX = _mgapilib.fltDofMinX
fltDofMinXScale = _mgapilib.fltDofMinXScale
fltDofMinY = _mgapilib.fltDofMinY
fltDofMinYScale = _mgapilib.fltDofMinYScale
fltDofMinZ = _mgapilib.fltDofMinZ
fltDofMinZScale = _mgapilib.fltDofMinZScale
fltDofPutAnchorX = _mgapilib.fltDofPutAnchorX
fltDofPutAnchorY = _mgapilib.fltDofPutAnchorY
fltDofPutAnchorZ = _mgapilib.fltDofPutAnchorZ
fltDofPutAlignX = _mgapilib.fltDofPutAlignX
fltDofPutAlignY = _mgapilib.fltDofPutAlignY
fltDofPutAlignZ = _mgapilib.fltDofPutAlignZ
fltDofPutTrackX = _mgapilib.fltDofPutTrackX
fltDofPutTrackY = _mgapilib.fltDofPutTrackY
fltDofPutTrackZ = _mgapilib.fltDofPutTrackZ
fltDofLimitX = _mgapilib.fltDofLimitX
fltDofLimitY = _mgapilib.fltDofLimitY
fltDofLimitZ = _mgapilib.fltDofLimitZ
fltDofLimitXRot = _mgapilib.fltDofLimitXRot
fltDofLimitYRot = _mgapilib.fltDofLimitYRot
fltDofLimitZRot = _mgapilib.fltDofLimitZRot
fltDofLimitXScale = _mgapilib.fltDofLimitXScale
fltDofLimitYScale = _mgapilib.fltDofLimitYScale
fltDofLimitZScale = _mgapilib.fltDofLimitZScale
fltDofTxtRepeat = _mgapilib.fltDofTxtRepeat
fltDofMembrane = _mgapilib.fltDofMembrane
fltIDontExport = _mgapilib.fltIDontExport
fltIDontExportDl = _mgapilib.fltIDontExportDl
fltIDontExportInfo = _mgapilib.fltIDontExportInfo
fltIDownCnt = _mgapilib.fltIDownCnt
fltDummyPtr = _mgapilib.fltDummyPtr
fltVEdge = _mgapilib.fltVEdge
fltIExternal = _mgapilib.fltIExternal
fltIFootprint = _mgapilib.fltIFootprint
fltFreezeBox = _mgapilib.fltFreezeBox
fltIFreezeMesh = _mgapilib.fltIFreezeMesh
fltVFrozen = _mgapilib.fltVFrozen
fltIGc = _mgapilib.fltIGc
fltGcColPal = _mgapilib.fltGcColPal
fltGcDrawMode = _mgapilib.fltGcDrawMode
fltGcLightMode = _mgapilib.fltGcLightMode
fltGcLinPal = _mgapilib.fltGcLinPal
fltGcLitPal = _mgapilib.fltGcLitPal
fltGcMatPal = _mgapilib.fltGcMatPal
fltGcSndPal = _mgapilib.fltGcSndPal
fltGcTxtPal = _mgapilib.fltGcTxtPal
fltGreen = _mgapilib.fltGreen
fltGrpAnimation = _mgapilib.fltGrpAnimation
fltGrpAnimationFB = _mgapilib.fltGrpAnimationFB
fltGrpBoxed = _mgapilib.fltGrpBoxed
fltGrpFlagDefaultParent = _mgapilib.fltGrpFlagDefaultParent
fltGrpFreezeBox = _mgapilib.fltGrpFreezeBox
fltGrpTerrain = _mgapilib.fltGrpTerrain
fltGrpLayer = _mgapilib.fltGrpLayer
fltGrpPrio = _mgapilib.fltGrpPrio
fltGrpSignificance = _mgapilib.fltGrpSignificance
fltGrpSpecial1 = _mgapilib.fltGrpSpecial1
fltGrpSpecial2 = _mgapilib.fltGrpSpecial2
fltVHard = _mgapilib.fltVHard
fltVHard2 = _mgapilib.fltVHard2
fltHdrDbRev = _mgapilib.fltHdrDbRev
fltHdrSaveVtxNorms = _mgapilib.fltHdrSaveVtxNorms
fltHdrRgbMode = _mgapilib.fltHdrRgbMode
fltHdrFormatRev = _mgapilib.fltHdrFormatRev
fltHdrLastDate = _mgapilib.fltHdrLastDate
fltHdrNextFacId = _mgapilib.fltHdrNextFacId
fltHdrNextGrpId = _mgapilib.fltHdrNextGrpId
fltHdrNextLodId = _mgapilib.fltHdrNextLodId
fltHdrNextObjId = _mgapilib.fltHdrNextObjId
fltHdrTexWhite = _mgapilib.fltHdrTexWhite
fltHdrUdiv = _mgapilib.fltHdrUdiv
fltHdrUnits = _mgapilib.fltHdrUnits
fltHeight = _mgapilib.fltHeight
fltIHidden = _mgapilib.fltIHidden
fltIAlpha = _mgapilib.fltIAlpha
fltCoord3dX = _mgapilib.fltCoord3dX
fltCoord3dY = _mgapilib.fltCoord3dY
fltCoord3dZ = _mgapilib.fltCoord3dZ
fltIdbl1 = _mgapilib.fltIdbl1
fltIdbl2 = _mgapilib.fltIdbl2
fltIdbl3 = _mgapilib.fltIdbl3
fltIdbl4 = _mgapilib.fltIdbl4
fltIdbl5 = _mgapilib.fltIdbl5
fltIdbl6 = _mgapilib.fltIdbl6
fltIdbl7 = _mgapilib.fltIdbl7
fltIdbl8 = _mgapilib.fltIdbl8
fltImgChanged = _mgapilib.fltImgChanged
fltImgClamp = _mgapilib.fltImgClamp
fltImgComment = _mgapilib.fltImgComment
fltImgControlPoint = _mgapilib.fltImgControlPoint
fltImgDblOrig = _mgapilib.fltImgDblOrig
fltImgDetail = _mgapilib.fltImgDetail
fltImgEnvType = _mgapilib.fltImgEnvType
fltImgExternalFormat = _mgapilib.fltImgExternalFormat
fltImgFormatRev = _mgapilib.fltImgFormatRev
fltImgHeight = _mgapilib.fltImgHeight
fltImgInAlpha = _mgapilib.fltImgInAlpha
fltImgInternalFormat = _mgapilib.fltImgInternalFormat
fltImgJ = _mgapilib.fltImgJ
fltImgK = _mgapilib.fltImgK
fltImgKernel = _mgapilib.fltImgKernel
fltImgLod0 = _mgapilib.fltImgLod0
fltImgLod1 = _mgapilib.fltImgLod1
fltImgLod2 = _mgapilib.fltImgLod2
fltImgLod3 = _mgapilib.fltImgLod3
fltImgLod4 = _mgapilib.fltImgLod4
fltImgLod5 = _mgapilib.fltImgLod5
fltImgLod6 = _mgapilib.fltImgLod6
fltImgLod7 = _mgapilib.fltImgLod7
fltImgLowerLeftU = _mgapilib.fltImgLowerLeftU
fltImgLowerLeftV = _mgapilib.fltImgLowerLeftV
fltImgM = _mgapilib.fltImgM
fltImgMagFilter = _mgapilib.fltImgMagFilter
fltImgMagFilterAlpha = _mgapilib.fltImgMagFilterAlpha
fltImgMagFilterColor = _mgapilib.fltImgMagFilterColor
fltImgMinFilter = _mgapilib.fltImgMinFilter
fltImgN = _mgapilib.fltImgN
fltImgRwSizeU = _mgapilib.fltImgRwSizeU
fltImgRwSizeUf = _mgapilib.fltImgRwSizeUf
fltImgRwSizeV = _mgapilib.fltImgRwSizeV
fltImgRwSizeVf = _mgapilib.fltImgRwSizeVf
fltImgScale0 = _mgapilib.fltImgScale0
fltImgScale1 = _mgapilib.fltImgScale1
fltImgScale2 = _mgapilib.fltImgScale2
fltImgScale3 = _mgapilib.fltImgScale3
fltImgScale4 = _mgapilib.fltImgScale4
fltImgScale5 = _mgapilib.fltImgScale5
fltImgScale6 = _mgapilib.fltImgScale6
fltImgScale7 = _mgapilib.fltImgScale7
fltImgScramble = _mgapilib.fltImgScramble
fltImgTile = _mgapilib.fltImgTile
fltImgType = _mgapilib.fltImgType
fltImgU64AlphaClip = _mgapilib.fltImgU64AlphaClip
fltImgU64CustomSize = _mgapilib.fltImgU64CustomSize
fltImgU64Format = _mgapilib.fltImgU64Format
fltImgU64GenS = _mgapilib.fltImgU64GenS
fltImgU64GenT = _mgapilib.fltImgU64GenT
fltImgU64Height = _mgapilib.fltImgU64Height
fltImgU64MaxResDir = _mgapilib.fltImgU64MaxResDir
fltImgU64Mipmap = _mgapilib.fltImgU64Mipmap
fltImgU64PixSize = _mgapilib.fltImgU64PixSize
fltImgU64ShrinkFlag = _mgapilib.fltImgU64ShrinkFlag
fltImgU64Width = _mgapilib.fltImgU64Width
fltImgU64WrapS = _mgapilib.fltImgU64WrapS
fltImgU64WrapT = _mgapilib.fltImgU64WrapT
fltImgUpperRightU = _mgapilib.fltImgUpperRightU
fltImgUpperRightV = _mgapilib.fltImgUpperRightV
fltImgUseFilter = _mgapilib.fltImgUseFilter
fltImgUser1 = _mgapilib.fltImgUser1
fltImgUser2 = _mgapilib.fltImgUser2
fltImgUser3 = _mgapilib.fltImgUser3
fltImgUser4 = _mgapilib.fltImgUser4
fltImgUser5 = _mgapilib.fltImgUser5
fltImgUser6 = _mgapilib.fltImgUser6
fltImgUser7 = _mgapilib.fltImgUser7
fltImgUser8 = _mgapilib.fltImgUser8
fltImgWidth = _mgapilib.fltImgWidth
fltImgWrap = _mgapilib.fltImgWrap
fltImgWrapU = _mgapilib.fltImgWrapU
fltImgWrapV = _mgapilib.fltImgWrapV
fltIImmediate = _mgapilib.fltIImmediate
fltIInstBelow = _mgapilib.fltIInstBelow
fltCoord2iX = _mgapilib.fltCoord2iX
fltCoord2iY = _mgapilib.fltCoord2iY
fltIIrColor = _mgapilib.fltIIrColor
fltILayer = _mgapilib.fltILayer
fltVLeaveNorm = _mgapilib.fltVLeaveNorm
fltILevel = _mgapilib.fltILevel
fltVLevel = _mgapilib.fltVLevel
fltILibrary = _mgapilib.fltILibrary
fltILight = _mgapilib.fltILight
fltILightMode = _mgapilib.fltILightMode
fltILineStyle = _mgapilib.fltILineStyle
fltLodAdditive = _mgapilib.fltLodAdditive
fltLodFreezeCenter = _mgapilib.fltLodFreezeCenter
fltLodUsePrevRange = _mgapilib.fltLodUsePrevRange
fltLodSwitchIn = _mgapilib.fltLodSwitchIn
fltLodSwitchOut = _mgapilib.fltLodSwitchOut
fltLodTransition = _mgapilib.fltLodTransition
fltLowerLat = _mgapilib.fltLowerLat
fltLtsAttachedToEye = _mgapilib.fltLtsAttachedToEye
fltLtsEnabled = _mgapilib.fltLtsEnabled
fltLtsError1 = _mgapilib.fltLtsError1
fltLtsExport = _mgapilib.fltLtsExport
fltLtsGlobal = _mgapilib.fltLtsGlobal
fltLtsIndex = _mgapilib.fltLtsIndex
fltLtsPitch = _mgapilib.fltLtsPitch
fltLtsYaw = _mgapilib.fltLtsYaw
fltLtspConstAtten = _mgapilib.fltLtspConstAtten
fltLtspLinearAtten = _mgapilib.fltLtspLinearAtten
fltLtspModeling = _mgapilib.fltLtspModeling
fltLtspName = _mgapilib.fltLtspName
fltLtspOnFlag = _mgapilib.fltLtspOnFlag
fltLtspPaletteId = _mgapilib.fltLtspPaletteId
fltLtspPitch = _mgapilib.fltLtspPitch
fltLtspQuadAtten = _mgapilib.fltLtspQuadAtten
fltLtspSpotExp = _mgapilib.fltLtspSpotExp
fltLtspSpotSpread = _mgapilib.fltLtspSpotSpread
fltLtspType = _mgapilib.fltLtspType
fltLtspYaw = _mgapilib.fltLtspYaw
fltMatActive = _mgapilib.fltMatActive
fltMatAlpha = _mgapilib.fltMatAlpha
fltMatIndex = _mgapilib.fltMatIndex
fltMatName = _mgapilib.fltMatName
fltMatUsed = _mgapilib.fltMatUsed
fltMaterial = _mgapilib.fltMaterial
fltMatrix00 = _mgapilib.fltMatrix00
fltMatrix01 = _mgapilib.fltMatrix01
fltMatrix02 = _mgapilib.fltMatrix02
fltMatrix03 = _mgapilib.fltMatrix03
fltMatrix10 = _mgapilib.fltMatrix10
fltMatrix11 = _mgapilib.fltMatrix11
fltMatrix12 = _mgapilib.fltMatrix12
fltMatrix13 = _mgapilib.fltMatrix13
fltMatrix20 = _mgapilib.fltMatrix20
fltMatrix21 = _mgapilib.fltMatrix21
fltMatrix22 = _mgapilib.fltMatrix22
fltMatrix23 = _mgapilib.fltMatrix23
fltMatrix30 = _mgapilib.fltMatrix30
fltMatrix31 = _mgapilib.fltMatrix31
fltMatrix32 = _mgapilib.fltMatrix32
fltMatrix33 = _mgapilib.fltMatrix33
fltIMgTemplate = _mgapilib.fltIMgTemplate
fltVMorphPercent = _mgapilib.fltVMorphPercent
fltNColorB = _mgapilib.fltNColorB
fltNColorG = _mgapilib.fltNColorG
fltNColorR = _mgapilib.fltNColorR
fltNECornerLat = _mgapilib.fltNECornerLat
fltNECornerLong = _mgapilib.fltNECornerLong
fltVNameNdx = _mgapilib.fltVNameNdx
fltINoBack = _mgapilib.fltINoBack
fltINoIllum = _mgapilib.fltINoIllum
fltINoShade = _mgapilib.fltINoShade
fltObjNoDay = _mgapilib.fltObjNoDay
fltObjNoDusk = _mgapilib.fltObjNoDusk
fltObjNoNight = _mgapilib.fltObjNoNight
fltObjNoIllum = _mgapilib.fltObjNoIllum
fltObjNoShade = _mgapilib.fltObjNoShade
fltObjShadow = _mgapilib.fltObjShadow
fltObjTerrain = _mgapilib.fltObjTerrain
fltObjPrio = _mgapilib.fltObjPrio
fltObjSignificance = _mgapilib.fltObjSignificance
fltObjSpecial1 = _mgapilib.fltObjSpecial1
fltObjSpecial2 = _mgapilib.fltObjSpecial2
fltObjTransparency = _mgapilib.fltObjTransparency
fltIOn = _mgapilib.fltIOn
fltOriginLat = _mgapilib.fltOriginLat
fltOriginLong = _mgapilib.fltOriginLong
fltIOriginalColor = _mgapilib.fltIOriginalColor
fltIPath = _mgapilib.fltIPath
fltIPathCnt = _mgapilib.fltIPathCnt
fltVPathCnt = _mgapilib.fltVPathCnt
fltIPercentTxt = _mgapilib.fltIPercentTxt
fltIPhantom = _mgapilib.fltIPhantom
fltIPln = _mgapilib.fltIPln
fltPolyColorName = _mgapilib.fltPolyColorName
fltPolyColorName2 = _mgapilib.fltPolyColorName2
fltPolyDrawType = _mgapilib.fltPolyDrawType
fltPolyDrawTypeOld = _mgapilib.fltPolyDrawTypeOld
fltPolyFid = _mgapilib.fltPolyFid
fltPolyNoPrimeColor = _mgapilib.fltPolyNoPrimeColor
fltPolyNoAltColor = _mgapilib.fltPolyNoAltColor
fltPolyRgbMode = _mgapilib.fltPolyRgbMode
fltPolyTerrain = _mgapilib.fltPolyTerrain
fltPolyInfrared = _mgapilib.fltPolyInfrared
fltPolyIrMaterial = _mgapilib.fltPolyIrMaterial
fltPolyLineStyle = _mgapilib.fltPolyLineStyle
fltPolyLodControl = _mgapilib.fltPolyLodControl
fltPolyMaterial = _mgapilib.fltPolyMaterial
fltPolyTemplate = _mgapilib.fltPolyTemplate
fltPolyPrio = _mgapilib.fltPolyPrio
fltPolySmc = _mgapilib.fltPolySmc
fltPolyTexWhite = _mgapilib.fltPolyTexWhite
fltPolyTexture = _mgapilib.fltPolyTexture
fltPolyDetailTexture = _mgapilib.fltPolyDetailTexture
fltPolyTransparency = _mgapilib.fltPolyTransparency
fltIPrio = _mgapilib.fltIPrio
fltProjection = _mgapilib.fltProjection
fltRadius = _mgapilib.fltRadius
fltIReadOnly = _mgapilib.fltIReadOnly
fltRed = _mgapilib.fltRed
fltRepCnt = _mgapilib.fltRepCnt
fltIRepSel = _mgapilib.fltIRepSel
fltRGBA = _mgapilib.fltRGBA
fltIRgbMode = _mgapilib.fltIRgbMode
fltVRgbMode = _mgapilib.fltVRgbMode
fltIRoad = _mgapilib.fltIRoad
fltSWCornerLat = _mgapilib.fltSWCornerLat
fltSWCornerLong = _mgapilib.fltSWCornerLong
fltIScratch = _mgapilib.fltIScratch
fltShininess = _mgapilib.fltShininess
fltISif1 = _mgapilib.fltISif1
fltISif2 = _mgapilib.fltISif2
fltISif3 = _mgapilib.fltISif3
fltISif4 = _mgapilib.fltISif4
fltISif5 = _mgapilib.fltISif5
fltISif6 = _mgapilib.fltISif6
fltISif7 = _mgapilib.fltISif7
fltISif8 = _mgapilib.fltISif8
fltISliced = _mgapilib.fltISliced
fltISpt = _mgapilib.fltISpt
fltStrucCnt = _mgapilib.fltStrucCnt
fltIStrucOn = _mgapilib.fltIStrucOn
fltVSubVtx = _mgapilib.fltVSubVtx
fltSwCount = _mgapilib.fltSwCount
fltSwCurMask = _mgapilib.fltSwCurMask
fltSwDynamic = _mgapilib.fltSwDynamic
fltSwMaxMask = _mgapilib.fltSwMaxMask
fltITemplateAxis = _mgapilib.fltITemplateAxis
fltITemplatePoint = _mgapilib.fltITemplatePoint
fltITerrain = _mgapilib.fltITerrain
fltITexMap = _mgapilib.fltITexMap
fltITexMap1 = _mgapilib.fltITexMap1
fltITexMap2 = _mgapilib.fltITexMap2
fltITexMap3 = _mgapilib.fltITexMap3
fltITexWhite = _mgapilib.fltITexWhite
fltITmesh = _mgapilib.fltITmesh
fltIToggle = _mgapilib.fltIToggle
fltVU = _mgapilib.fltVU
fltVU1 = _mgapilib.fltVU1
fltUpperLat = _mgapilib.fltUpperLat
fltVV = _mgapilib.fltVV
fltVV1 = _mgapilib.fltVV1
fltVColor = _mgapilib.fltVColor
fltVIntensity = _mgapilib.fltVIntensity
fltVdbl1 = _mgapilib.fltVdbl1
fltVdbl2 = _mgapilib.fltVdbl2
fltVdbl3 = _mgapilib.fltVdbl3
fltVdbl4 = _mgapilib.fltVdbl4
fltVdbl5 = _mgapilib.fltVdbl5
fltVdbl6 = _mgapilib.fltVdbl6
fltVdbl7 = _mgapilib.fltVdbl7
fltVdbl8 = _mgapilib.fltVdbl8
fltVectorI = _mgapilib.fltVectorI
fltVectorJ = _mgapilib.fltVectorJ
fltVectorK = _mgapilib.fltVectorK
fltIVertical = _mgapilib.fltIVertical
fltVConstructFlag = _mgapilib.fltVConstructFlag
fltVtxCoordX = _mgapilib.fltVtxCoordX
fltVtxCoordY = _mgapilib.fltVtxCoordY
fltVtxCoordZ = _mgapilib.fltVtxCoordZ
fltVtxDummy = _mgapilib.fltVtxDummy
fltXmLimitCur = _mgapilib.fltXmLimitCur
fltXmLimitInc = _mgapilib.fltXmLimitInc
fltXmLimitMax = _mgapilib.fltXmLimitMax
fltXmLimitMin = _mgapilib.fltXmLimitMin
fltXmOpcode = _mgapilib.fltXmOpcode
fltXmRotateAngle = _mgapilib.fltXmRotateAngle
fltXmRotEdgeAngle = _mgapilib.fltXmRotEdgeAngle
fltXmScaleRotAngle = _mgapilib.fltXmScaleRotAngle
fltXmScaleAxis = _mgapilib.fltXmScaleAxis
fltXmScaleOverAll = _mgapilib.fltXmScaleOverAll
fltXmScaleX = _mgapilib.fltXmScaleX
fltXmScaleY = _mgapilib.fltXmScaleY
fltXmScaleZ = _mgapilib.fltXmScaleZ
fltXrefFilename = _mgapilib.fltXrefFilename
fltXrefUnits = _mgapilib.fltXrefUnits
fltIZone = _mgapilib.fltIZone
fltStrucOn = _mgapilib.fltStrucOn
fltStrucInstBelow = _mgapilib.fltStrucInstBelow
fltVertexNo = _mgapilib.fltVertexNo
fltBottomLeftFrontX = _mgapilib.fltBottomLeftFrontX
fltBottomLeftFrontY = _mgapilib.fltBottomLeftFrontY
fltBottomLeftFrontZ = _mgapilib.fltBottomLeftFrontZ
fltTopRightBackX = _mgapilib.fltTopRightBackX
fltTopRightBackY = _mgapilib.fltTopRightBackY
fltTopRightBackZ = _mgapilib.fltTopRightBackZ
fltBoundingCenterX = _mgapilib.fltBoundingCenterX
fltBoundingCenterY = _mgapilib.fltBoundingCenterY
fltBoundingCenterZ = _mgapilib.fltBoundingCenterZ
fltCurveType = _mgapilib.fltCurveType
fltTextType = _mgapilib.fltTextType
fltTextDrawType = _mgapilib.fltTextDrawType
fltTextJustify = _mgapilib.fltTextJustify
fltTextFloatval = _mgapilib.fltTextFloatval
fltTextIntval = _mgapilib.fltTextIntval
fltTextColor = _mgapilib.fltTextColor
fltTextColorIntensity = _mgapilib.fltTextColorIntensity
fltTextAltColor = _mgapilib.fltTextAltColor
fltTextAltColorIntensity = _mgapilib.fltTextAltColorIntensity
fltTextMaterial = _mgapilib.fltTextMaterial
fltIntMin = _mgapilib.fltIntMin
fltIntMax = _mgapilib.fltIntMax
fltTextFloatMin = _mgapilib.fltTextFloatMin
fltTextFloatMax = _mgapilib.fltTextFloatMax
fltTextFontname = _mgapilib.fltTextFontname
fltTextVertical = _mgapilib.fltTextVertical
fltTextBold = _mgapilib.fltTextBold
fltTextItalic = _mgapilib.fltTextItalic
fltTextUnderline = _mgapilib.fltTextUnderline
fltTextLinestyle = _mgapilib.fltTextLinestyle
fltLpLightType = _mgapilib.fltLpLightType
fltLpStringType = _mgapilib.fltLpStringType
fltLpCount = _mgapilib.fltLpCount
fltLpDensityPerKM = _mgapilib.fltLpDensityPerKM
fltLpDelta = _mgapilib.fltLpDelta
fltLpRandomDelta = _mgapilib.fltLpRandomDelta
fltLpColor = _mgapilib.fltLpColor
fltLpPercent = _mgapilib.fltLpPercent
fltLpAdaptiveHeight = _mgapilib.fltLpAdaptiveHeight
fltLpAdaptive = _mgapilib.fltLpAdaptive
fltLpSmc = _mgapilib.fltLpSmc
fltLpFid = _mgapilib.fltLpFid
fltLpBackColor = _mgapilib.fltLpBackColor
fltLpDisplayMode = _mgapilib.fltLpDisplayMode
fltLpFrontIntensity = _mgapilib.fltLpFrontIntensity
fltLpBackColorIntensity = _mgapilib.fltLpBackColorIntensity
fltLpBackIntensity = _mgapilib.fltLpBackIntensity
fltLpMinDefocus = _mgapilib.fltLpMinDefocus
fltLpMaxDefocus = _mgapilib.fltLpMaxDefocus
fltLpFadingMode = _mgapilib.fltLpFadingMode
fltLpFogPunchMode = _mgapilib.fltLpFogPunchMode
fltLpDirectionalMode = _mgapilib.fltLpDirectionalMode
fltLpRangeMode = _mgapilib.fltLpRangeMode
fltLpMinPixelSize = _mgapilib.fltLpMinPixelSize
fltLpMaxPixelSize = _mgapilib.fltLpMaxPixelSize
fltLpActualSize = _mgapilib.fltLpActualSize
fltLpTransparentPixelSize = _mgapilib.fltLpTransparentPixelSize
fltLpTransparentFallOffExp = _mgapilib.fltLpTransparentFallOffExp
fltLpTransparentScale = _mgapilib.fltLpTransparentScale
fltLpTransparentClamp = _mgapilib.fltLpTransparentClamp
fltLpFogScale = _mgapilib.fltLpFogScale
fltLpFogIntensity = _mgapilib.fltLpFogIntensity
fltLpSizeThreshold = _mgapilib.fltLpSizeThreshold
fltLpDirectionalityType = _mgapilib.fltLpDirectionalityType
fltLpHorizLobeAngle = _mgapilib.fltLpHorizLobeAngle
fltLpVertLobeAngle = _mgapilib.fltLpVertLobeAngle
fltLpLobeRollAngle = _mgapilib.fltLpLobeRollAngle
fltLpLobeFallOff = _mgapilib.fltLpLobeFallOff
fltLpAmbientIntensity = _mgapilib.fltLpAmbientIntensity
fltLpPeriod = _mgapilib.fltLpPeriod
fltLpPhaseDelay = _mgapilib.fltLpPhaseDelay
fltLpTimeOn = _mgapilib.fltLpTimeOn
fltLpSignificance = _mgapilib.fltLpSignificance
fltLpDrawOrder = _mgapilib.fltLpDrawOrder
fltLpRgbMode = _mgapilib.fltLpRgbMode
fltLpNoBackColor = _mgapilib.fltLpNoBackColor
fltLpProximityOcculting = _mgapilib.fltLpProximityOcculting
fltLpReflective = _mgapilib.fltLpReflective
fltLpRandomizeIntensity = _mgapilib.fltLpRandomizeIntensity
fltLpPerspectiveMode = _mgapilib.fltLpPerspectiveMode
fltLpFlashing = _mgapilib.fltLpFlashing
fltLpRotating = _mgapilib.fltLpRotating
fltLpRotateCCW = _mgapilib.fltLpRotateCCW
fltLpConforming = _mgapilib.fltLpConforming
fltLpQuality = _mgapilib.fltLpQuality
fltLpDay = _mgapilib.fltLpDay
fltLpDusk = _mgapilib.fltLpDusk
fltLpNight = _mgapilib.fltLpNight
fltLpNumberOfPts = _mgapilib.fltLpNumberOfPts
fltLpNumberOfLods = _mgapilib.fltLpNumberOfLods
fltRoadType = _mgapilib.fltRoadType
fltRoadVertCurveLength = _mgapilib.fltRoadVertCurveLength
fltRoadMinCurveLength = _mgapilib.fltRoadMinCurveLength
fltRoadEntranceSlope = _mgapilib.fltRoadEntranceSlope
fltRoadExitSlope = _mgapilib.fltRoadExitSlope
fltRoadArcRadius = _mgapilib.fltRoadArcRadius
fltRoadEntranceSpiralLength = _mgapilib.fltRoadEntranceSpiralLength
fltRoadExitSpiralLength = _mgapilib.fltRoadExitSpiralLength
fltRoadSuperElevation = _mgapilib.fltRoadSuperElevation
fltRoadWidth = _mgapilib.fltRoadWidth
fltRoadCenterToLeft = _mgapilib.fltRoadCenterToLeft
fltRoadSpiralTwistType = _mgapilib.fltRoadSpiralTwistType
fltRoadVersion = _mgapilib.fltRoadVersion
fltCatInfrared = _mgapilib.fltCatInfrared
fltCatDrawType = _mgapilib.fltCatDrawType
fltCatTexture = _mgapilib.fltCatTexture
fltCatDetailTexture = _mgapilib.fltCatDetailTexture
fltCatMaterial = _mgapilib.fltCatMaterial
fltCatSmc = _mgapilib.fltCatSmc
fltCatTexmap = _mgapilib.fltCatTexmap
fltCatPrimeColor = _mgapilib.fltCatPrimeColor
fltCatPrimeIntensity = _mgapilib.fltCatPrimeIntensity
fltCatAltColor = _mgapilib.fltCatAltColor
fltCatAltIntensity = _mgapilib.fltCatAltIntensity
fltCatColorName = _mgapilib.fltCatColorName
fltCatColorName2 = _mgapilib.fltCatColorName2
fltCatIrMaterial = _mgapilib.fltCatIrMaterial
fltHdrEarthModel = _mgapilib.fltHdrEarthModel
fltSWIfmtX = _mgapilib.fltSWIfmtX
fltSWIfmtY = _mgapilib.fltSWIfmtY
fltClipPlane0Enabled = _mgapilib.fltClipPlane0Enabled
fltClipPlane1Enabled = _mgapilib.fltClipPlane1Enabled
fltClipPlane2Enabled = _mgapilib.fltClipPlane2Enabled
fltClipPlane3Enabled = _mgapilib.fltClipPlane3Enabled
fltClipPlane4Enabled = _mgapilib.fltClipPlane4Enabled
fltMappingType = _mgapilib.fltMappingType
fltMappingIndex = _mgapilib.fltMappingIndex
fltTMSphRepititions = _mgapilib.fltTMSphRepititions
fltTMRadRepititions = _mgapilib.fltTMRadRepititions
fltGridIntervalX = _mgapilib.fltGridIntervalX
fltGridIntervalY = _mgapilib.fltGridIntervalY
fltGridIncludeEdges = _mgapilib.fltGridIncludeEdges
fltGridType = _mgapilib.fltGridType
fltGridInvisible = _mgapilib.fltGridInvisible
fltHelperSnapRange = _mgapilib.fltHelperSnapRange
fltHelperType = _mgapilib.fltHelperType
fltHelperPointTarget = _mgapilib.fltHelperPointTarget
fltHelperAlignTarget = _mgapilib.fltHelperAlignTarget
fltHelperWeldTarget = _mgapilib.fltHelperWeldTarget
fltHelperInvisible = _mgapilib.fltHelperInvisible
fltVectordI = _mgapilib.fltVectordI
fltVectordJ = _mgapilib.fltVectordJ
fltVectordK = _mgapilib.fltVectordK
fltTorsionAttribute = _mgapilib.fltTorsionAttribute
fltSurfaceAttribute = _mgapilib.fltSurfaceAttribute
fltSurfaceParentLevel = _mgapilib.fltSurfaceParentLevel
fltPolySmartPalette = _mgapilib.fltPolySmartPalette
fltUTMZone = _mgapilib.fltUTMZone
fltTerTransX = _mgapilib.fltTerTransX
fltTerTransY = _mgapilib.fltTerTransY
fltTerTransZ = _mgapilib.fltTerTransZ
fltDBRadius = _mgapilib.fltDBRadius
fltLayerTexture1 = _mgapilib.fltLayerTexture1
fltLayerTexture2 = _mgapilib.fltLayerTexture2
fltLayerTexture3 = _mgapilib.fltLayerTexture3
fltLayerTexture4 = _mgapilib.fltLayerTexture4
fltLayerTexture5 = _mgapilib.fltLayerTexture5
fltLayerTexture6 = _mgapilib.fltLayerTexture6
fltLayerTexture7 = _mgapilib.fltLayerTexture7
fltLayerTexmap1 = _mgapilib.fltLayerTexmap1
fltLayerTexmap2 = _mgapilib.fltLayerTexmap2
fltLayerTexmap3 = _mgapilib.fltLayerTexmap3
fltLayerTexmap4 = _mgapilib.fltLayerTexmap4
fltLayerTexmap5 = _mgapilib.fltLayerTexmap5
fltLayerTexmap6 = _mgapilib.fltLayerTexmap6
fltLayerTexmap7 = _mgapilib.fltLayerTexmap7
fltLayerEffect1 = _mgapilib.fltLayerEffect1
fltLayerEffect2 = _mgapilib.fltLayerEffect2
fltLayerEffect3 = _mgapilib.fltLayerEffect3
fltLayerEffect4 = _mgapilib.fltLayerEffect4
fltLayerEffect5 = _mgapilib.fltLayerEffect5
fltLayerEffect6 = _mgapilib.fltLayerEffect6
fltLayerEffect7 = _mgapilib.fltLayerEffect7
fltLayerData1 = _mgapilib.fltLayerData1
fltLayerData2 = _mgapilib.fltLayerData2
fltLayerData3 = _mgapilib.fltLayerData3
fltLayerData4 = _mgapilib.fltLayerData4
fltLayerData5 = _mgapilib.fltLayerData5
fltLayerData6 = _mgapilib.fltLayerData6
fltLayerData7 = _mgapilib.fltLayerData7
fltLayerU1 = _mgapilib.fltLayerU1
fltLayerU2 = _mgapilib.fltLayerU2
fltLayerU3 = _mgapilib.fltLayerU3
fltLayerU4 = _mgapilib.fltLayerU4
fltLayerU5 = _mgapilib.fltLayerU5
fltLayerU6 = _mgapilib.fltLayerU6
fltLayerU7 = _mgapilib.fltLayerU7
fltLayerV1 = _mgapilib.fltLayerV1
fltLayerV2 = _mgapilib.fltLayerV2
fltLayerV3 = _mgapilib.fltLayerV3
fltLayerV4 = _mgapilib.fltLayerV4
fltLayerV5 = _mgapilib.fltLayerV5
fltLayerV6 = _mgapilib.fltLayerV6
fltLayerV7 = _mgapilib.fltLayerV7
fltMeshFlags = _mgapilib.fltMeshFlags
fltMeshNumPrimitives = _mgapilib.fltMeshNumPrimitives
fltMeshNumVtx = _mgapilib.fltMeshNumVtx
fltLodSignificantSize = _mgapilib.fltLodSignificantSize
fltGrpLoopCount = _mgapilib.fltGrpLoopCount
fltGrpLoopDuration = _mgapilib.fltGrpLoopDuration
fltGrpLastFrameDuration = _mgapilib.fltGrpLastFrameDuration
fltVAlpha = _mgapilib.fltVAlpha
fltLpAppearance = _mgapilib.fltLpAppearance
fltLpAnimation = _mgapilib.fltLpAnimation
fltGrpAnimationB = _mgapilib.fltGrpAnimationB
fltPolyRoofline = _mgapilib.fltPolyRoofline
fltHdrEarthMajorAxis = _mgapilib.fltHdrEarthMajorAxis
fltHdrEarthMinorAxis = _mgapilib.fltHdrEarthMinorAxis
fltLpAppearanceName = _mgapilib.fltLpAppearanceName
fltLpAppearanceIndex = _mgapilib.fltLpAppearanceIndex
fltLpAnimationName = _mgapilib.fltLpAnimationName
fltLpAnimationIndex = _mgapilib.fltLpAnimationIndex
fltGcLpPal = _mgapilib.fltGcLpPal
fltLpRange = _mgapilib.fltLpRange
fltLpFadeRangeRatio = _mgapilib.fltLpFadeRangeRatio
fltLpFadeInTime = _mgapilib.fltLpFadeInTime
fltLpFadeOutTime = _mgapilib.fltLpFadeOutTime
fltLpLodRangeRatio = _mgapilib.fltLpLodRangeRatio
fltLpLodScale = _mgapilib.fltLpLodScale
fltLpAnimationType = _mgapilib.fltLpAnimationType
fltLpMorseTiming = _mgapilib.fltLpMorseTiming
fltLpWordRate = _mgapilib.fltLpWordRate
fltLpCharacterRate = _mgapilib.fltLpCharacterRate
fltLpMorseString = _mgapilib.fltLpMorseString
fltLpSequenceLength = _mgapilib.fltLpSequenceLength
fltLpsAnimationState = _mgapilib.fltLpsAnimationState
fltLpsEnabled = _mgapilib.fltLpsEnabled
fltLpsIntensity = _mgapilib.fltLpsIntensity
fltShaderIndex = _mgapilib.fltShaderIndex
fltShaderType = _mgapilib.fltShaderType
fltShaderName = _mgapilib.fltShaderName
fltShaderVertexProgramFilename = _mgapilib.fltShaderVertexProgramFilename
fltShaderFragmentProgramFilename = _mgapilib.fltShaderFragmentProgramFilename
fltPolyShader = _mgapilib.fltPolyShader
fltGcShaderPal = _mgapilib.fltGcShaderPal
fltShaderVertexEntryName = _mgapilib.fltShaderVertexEntryName
fltShaderFragmentEntryName = _mgapilib.fltShaderFragmentEntryName
fltShaderVertexProfile = _mgapilib.fltShaderVertexProfile
fltShaderFragmentProfile = _mgapilib.fltShaderFragmentProfile
fltLpTexture = _mgapilib.fltLpTexture
fltShaderNumVertexPrograms = _mgapilib.fltShaderNumVertexPrograms
fltShaderNumFragmentPrograms = _mgapilib.fltShaderNumFragmentPrograms
fltGrpPreserveAtRuntime = _mgapilib.fltGrpPreserveAtRuntime
fltObjPreserveAtRuntime = _mgapilib.fltObjPreserveAtRuntime
fltXrefViewAsBox = _mgapilib.fltXrefViewAsBox
fltMatType = _mgapilib.fltMatType
fltMatShadeModel = _mgapilib.fltMatShadeModel
fltMatTexture = _mgapilib.fltMatTexture
fltMatLayer = _mgapilib.fltMatLayer
fltSpecularExShininess = _mgapilib.fltSpecularExShininess
fltAlphaExQuality = _mgapilib.fltAlphaExQuality
fltAlphaExAlpha = _mgapilib.fltAlphaExAlpha
fltLightMapExMaxIntensity = _mgapilib.fltLightMapExMaxIntensity
fltBumpMapExTangentLayer = _mgapilib.fltBumpMapExTangentLayer
fltBumpMapExBinormalLayer = _mgapilib.fltBumpMapExBinormalLayer
fltShadowMapExMaxIntensity = _mgapilib.fltShadowMapExMaxIntensity
fltTextDecimalPlaces = _mgapilib.fltTextDecimalPlaces
fltComment = _mgapilib.fltComment
fltPolyCreatorPrimeColor = _mgapilib.fltPolyCreatorPrimeColor
fltPolyCreatorAltColor = _mgapilib.fltPolyCreatorAltColor
fltVCreatorColor = _mgapilib.fltVCreatorColor
fltTextCreatorColor = _mgapilib.fltTextCreatorColor
fltTextCreatorAltColor = _mgapilib.fltTextCreatorAltColor
fltLpCreatorBackColor = _mgapilib.fltLpCreatorBackColor
fltLineStyleId = _mgapilib.fltLineStyleId
fltLineStylePatternMask = _mgapilib.fltLineStylePatternMask
fltLineStyleLineWidth = _mgapilib.fltLineStyleLineWidth
fltImgTextureType = _mgapilib.fltImgTextureType
FLT_DATA_MAX = _mgapilib.FLT_DATA_MAX
mgExtensionSiteGetName = _mgapilib.mgExtensionSiteGetName
mgExtensionFieldGetName = _mgapilib.mgExtensionFieldGetName
mgExtensionFieldGetAttach = _mgapilib.mgExtensionFieldGetAttach
mgExtensionFieldGetType = _mgapilib.mgExtensionFieldGetType
mgExtensionIterateSites = _mgapilib.mgExtensionIterateSites
mgExtensionIterateFields = _mgapilib.mgExtensionIterateFields
mgExtensionClearAll = _mgapilib.mgExtensionClearAll
mgExtensionMakeGUID = _mgapilib.mgExtensionMakeGUID
mgExtensionSiteAdd = _mgapilib.mgExtensionSiteAdd
mgExtensionSiteSetName = _mgapilib.mgExtensionSiteSetName
mgExtensionFieldAdd = _mgapilib.mgExtensionFieldAdd
mgExtensionFieldSetName = _mgapilib.mgExtensionFieldSetName
mgExtensionFieldSetAttach = _mgapilib.mgExtensionFieldSetAttach
mgExtensionFieldSetType = _mgapilib.mgExtensionFieldSetType
mgExtensionFieldGetIntegerBase = _mgapilib.mgExtensionFieldGetInteger
mgExtensionFieldSetInteger = _mgapilib.mgExtensionFieldSetInteger
mgExtensionFieldGetDoubleBase = _mgapilib.mgExtensionFieldGetDouble
mgExtensionFieldSetDouble = _mgapilib.mgExtensionFieldSetDouble
mgExtensionFieldGetFloatBase = _mgapilib.mgExtensionFieldGetFloat
mgExtensionFieldSetFloat = _mgapilib.mgExtensionFieldSetFloat
mgExtensionFieldGetBoolBase = _mgapilib.mgExtensionFieldGetBool
mgExtensionFieldSetBool = _mgapilib.mgExtensionFieldSetBool
mgExtensionFieldSetString = _mgapilib.mgExtensionFieldSetString
mgExtensionFieldSetXMLString = _mgapilib.mgExtensionFieldSetXMLString
mgExtensionFieldDelete = _mgapilib.mgExtensionFieldDelete
mgExtensionFieldDeleteAll = _mgapilib.mgExtensionFieldDeleteAll
mgExtensionFieldDefined = _mgapilib.mgExtensionFieldDefined
mgExtensionFieldSync = _mgapilib.mgExtensionFieldSync
mgExtensionFieldIterate = _mgapilib.mgExtensionFieldIterate
mgExtensionFieldCount = _mgapilib.mgExtensionFieldCount
mgExtensionFreeList = _mgapilib.mgExtensionFreeList
mgExtensionFieldCopy = _mgapilib.mgExtensionFieldCopy



# below this is mgapilibcustom.py

mgGetAttList = _mgapilib.mgGetAttList
mgSetAttList = _mgapilib.mgSetAttList
mgGetColorNameList = _mgapilib.mgGetColorNameList
mgPromptDialogFile = _mgapilib.mgPromptDialogFile
mgPromptDialogFolder = _mgapilib.mgPromptDialogFolder
mgPromptDialogTexture = _mgapilib.mgPromptDialogTexture
mgWalk = _mgapilib.mgWalk
mgWalkEx = _mgapilib.mgWalkEx
mgWalkGetMatrixBase = _mgapilib.mgWalkGetMatrix
mgIterateRecList = _mgapilib.mgIterateRecList
mgWalkRecList = _mgapilib.mgWalkRecList
mgEditorAddRedo = _mgapilib.mgEditorAddRedo
mgEditorAddUndo = _mgapilib.mgEditorAddUndo
mgEditorAddUndoForRedo = _mgapilib.mgEditorAddUndoForRedo
mgEditorAppendUndo = _mgapilib.mgEditorAppendUndo
mgExtensionFieldGetString = _mgapilib.mgExtensionFieldGetString
mgExtensionFieldGetXMLString = _mgapilib.mgExtensionFieldGetXMLString

MG_NULL = None

class mgselectlist_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgselectlist_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgselectlist_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = None
    __swig_getmethods__["value"] = None
    if _newclass:value = _swig_property(None, None)
    def __init__(self, index, *args):
        if index == 1:
            this = _mgapilib.mgNewRecListReturnNew(*args)
        elif index == 2:
            this = _mgapilib.mgGetSelectListReturnNew(*args)
        elif index == 3:
            this = _mgapilib.mgGetTriangleListReturnNew(*args)
        elif index == 4:
            this = _mgapilib.mgGetConstructListReturnNew(*args)
        elif index == 5:
            this = _mgapilib.mgFindReturnNew(*args)
        elif index == 6:
            this = _mgapilib.mgFindExReturnNew(*args)
        elif index == 7:
            this = _mgapilib.mgGetDisplayListReturnNew(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return None
    def __setitem__(self, index, value):
        return None
    __swig_destroy__ = _mgapilib.delete_mgselectlist_t
    __del__ = lambda self : None;
mgselectlist_t_swigregister = _mgapilib.mgselectlist_t_swigregister
mgselectlist_t_swigregister(mgselectlist_t)

class mgmatrixstack_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgmatrixstack_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgmatrixstack_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = None
    __swig_getmethods__["value"] = None
    if _newclass:value = _swig_property(None, None)
    def __init__(self, *args): 
        this = _mgapilib.mgNewMatrixStackReturnNew(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return None
    def __setitem__(self, index, value):
        return None
    __swig_destroy__ = _mgapilib.delete_mgmatrixstack_t
    __del__ = lambda self : None;
mgmatrixstack_t_swigregister = _mgapilib.mgmatrixstack_t_swigregister
mgmatrixstack_t_swigregister(mgmatrixstack_t)

class mgparamblock_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgparamblock_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgparamblock_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = None
    __swig_getmethods__["value"] = None
    if _newclass:value = _swig_property(None, None)
    def __init__(self, *args): 
        this = _mgapilib.mgGetParamBlockReturnNew(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return None
    def __setitem__(self, name, value):
        if (type(value).__name__ == 'int'):
		      return mgParamSetInteger(self.this, name, value)
        elif (type(value).__name__ == 'float'):
		      return mgParamSetDouble(self.this, name, value)
        elif (type(value).__name__ == 'str'):
            return mgParamSetString(self.this, name, value)
        elif (type(value).__name__ == 'bool'):
            return mgParamSetInteger(self.this, name, value)
        elif (type(value).__name__ == 'list'):
            if (len(value) == 2):
                return mgParamSetDouble2(self.this, name, value[0], value[1])
            else:
                return mgParamSetDouble3(self.this, name, value[0], value[1], value[2])
        else:
            return None
    __swig_destroy__ = _mgapilib.delete_mgparamblock_t
    __del__ = lambda self : None;
mgparamblock_t_swigregister = _mgapilib.mgparamblock_t_swigregister
mgparamblock_t_swigregister(mgparamblock_t)

class mgdouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgdouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgdouble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgdouble_value_set
    __swig_getmethods__["value"] = _mgapilib.mgdouble_value_get
    if _newclass:value = _swig_property(_mgapilib.mgdouble_value_get, _mgapilib.mgdouble_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgdouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgdouble_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgdouble_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgdouble
    __del__ = lambda self : None;
mgdouble_swigregister = _mgapilib.mgdouble_swigregister
mgdouble_swigregister(mgdouble)

class mgunsignedchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgunsignedchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgunsignedchar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgunsignedchar_value_set
    __swig_getmethods__["value"] = _mgapilib.mgunsignedchar_value_get
    if _newclass:value = _swig_property(_mgapilib.mgunsignedchar_value_get, _mgapilib.mgunsignedchar_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgunsignedchar(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgunsignedchar_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgunsignedchar_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgunsignedchar
    __del__ = lambda self : None;
mgunsignedchar_swigregister = _mgapilib.mgunsignedchar_swigregister
mgunsignedchar_swigregister(mgunsignedchar)

class mgunsignedcharlabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgunsignedcharlabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgunsignedcharlabel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgunsignedcharlabel_value_set
    __swig_getmethods__["value"] = _mgapilib.mgunsignedcharlabel_value_get
    if _newclass:value = _swig_property(_mgapilib.mgunsignedcharlabel_value_get, _mgapilib.mgunsignedcharlabel_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgunsignedcharlabel(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgunsignedcharlabel_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgunsignedcharlabel_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgunsignedcharlabel
    __del__ = lambda self : None;
mgunsignedcharlabel_swigregister = _mgapilib.mgunsignedcharlabel_swigregister
mgunsignedcharlabel_swigregister(mgunsignedcharlabel)

class mgunsignedint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgunsignedint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgunsignedint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgunsignedint_value_set
    __swig_getmethods__["value"] = _mgapilib.mgunsignedint_value_get
    if _newclass:value = _swig_property(_mgapilib.mgunsignedint_value_get, _mgapilib.mgunsignedint_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgunsignedint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgunsignedint_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgunsignedint_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgunsignedint
    __del__ = lambda self : None;
mgunsignedint_swigregister = _mgapilib.mgunsignedint_swigregister
mgunsignedint_swigregister(mgunsignedint)

class mgbool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgbool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgbool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgbool_value_set
    __swig_getmethods__["value"] = _mgapilib.mgbool_value_get
    if _newclass:value = _swig_property(_mgapilib.mgbool_value_get, _mgapilib.mgbool_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgbool(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgbool_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgbool_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgbool
    __del__ = lambda self : None;
mgbool_swigregister = _mgapilib.mgbool_swigregister
mgbool_swigregister(mgbool)

class mgshort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgshort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgshort, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgshort_value_set
    __swig_getmethods__["value"] = _mgapilib.mgshort_value_get
    if _newclass:value = _swig_property(_mgapilib.mgshort_value_get, _mgapilib.mgshort_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgshort(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgshort_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgshort_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgshort
    __del__ = lambda self : None;
mgshort_swigregister = _mgapilib.mgshort_swigregister
mgshort_swigregister(mgshort)

class mgint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgint_value_set
    __swig_getmethods__["value"] = _mgapilib.mgint_value_get
    if _newclass:value = _swig_property(_mgapilib.mgint_value_get, _mgapilib.mgint_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgint_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgint_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgint
    __del__ = lambda self : None;
mgint_swigregister = _mgapilib.mgint_swigregister
mgint_swigregister(mgint)

class mgfloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgfloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgfloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgfloat_value_set
    __swig_getmethods__["value"] = _mgapilib.mgfloat_value_get
    if _newclass:value = _swig_property(_mgapilib.mgfloat_value_get, _mgapilib.mgfloat_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgfloat_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgfloat_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgfloat
    __del__ = lambda self : None;
mgfloat_swigregister = _mgapilib.mgfloat_swigregister
mgfloat_swigregister(mgfloat)

class mgmatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgmatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgmatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mgapilib.mgmatrix_value_set
    __swig_getmethods__["value"] = _mgapilib.mgmatrix_value_get
    if _newclass:value = _swig_property(_mgapilib.mgmatrix_value_get, _mgapilib.mgmatrix_value_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgmatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgmatrix_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgmatrix_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgmatrix
    __del__ = lambda self : None;
mgmatrix_swigregister = _mgapilib.mgmatrix_swigregister
mgmatrix_swigregister(mgmatrix)

class mggeocoorddata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mggeocoorddata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mggeocoorddata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _mgapilib.mggeocoorddata_u_set
    __swig_getmethods__["u"] = _mgapilib.mggeocoorddata_u_get
    if _newclass:u = _swig_property(_mgapilib.mggeocoorddata_u_get, _mgapilib.mggeocoorddata_u_set)
    __swig_setmethods__["v"] = _mgapilib.mggeocoorddata_v_set
    __swig_getmethods__["v"] = _mgapilib.mggeocoorddata_v_get
    if _newclass:v = _swig_property(_mgapilib.mggeocoorddata_v_get, _mgapilib.mggeocoorddata_v_set)
    __swig_setmethods__["lat"] = _mgapilib.mggeocoorddata_lat_set
    __swig_getmethods__["lat"] = _mgapilib.mggeocoorddata_lat_get
    if _newclass:lat = _swig_property(_mgapilib.mggeocoorddata_lat_get, _mgapilib.mggeocoorddata_lat_set)
    __swig_setmethods__["lon"] = _mgapilib.mggeocoorddata_lon_set
    __swig_getmethods__["lon"] = _mgapilib.mggeocoorddata_lon_get
    if _newclass:lon = _swig_property(_mgapilib.mggeocoorddata_lon_get, _mgapilib.mggeocoorddata_lon_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mggeocoorddata(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mggeocoorddata_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mggeocoorddata_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mggeocoorddata
    __del__ = lambda self : None;
mggeocoorddata_swigregister = _mgapilib.mggeocoorddata_swigregister
mggeocoorddata_swigregister(mggeocoorddata)

class mgsubtexturedata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgsubtexturedata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgsubtexturedata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mgapilib.mgsubtexturedata_name_set
    __swig_getmethods__["name"] = _mgapilib.mgsubtexturedata_name_get
    if _newclass:name = _swig_property(_mgapilib.mgsubtexturedata_name_get, _mgapilib.mgsubtexturedata_name_set)
    __swig_setmethods__["l"] = _mgapilib.mgsubtexturedata_l_set
    __swig_getmethods__["l"] = _mgapilib.mgsubtexturedata_l_get
    if _newclass:l = _swig_property(_mgapilib.mgsubtexturedata_l_get, _mgapilib.mgsubtexturedata_l_set)
    __swig_setmethods__["b"] = _mgapilib.mgsubtexturedata_b_set
    __swig_getmethods__["b"] = _mgapilib.mgsubtexturedata_b_get
    if _newclass:b = _swig_property(_mgapilib.mgsubtexturedata_b_get, _mgapilib.mgsubtexturedata_b_set)
    __swig_setmethods__["r"] = _mgapilib.mgsubtexturedata_r_set
    __swig_getmethods__["r"] = _mgapilib.mgsubtexturedata_r_get
    if _newclass:r = _swig_property(_mgapilib.mgsubtexturedata_r_get, _mgapilib.mgsubtexturedata_r_set)
    __swig_setmethods__["t"] = _mgapilib.mgsubtexturedata_t_set
    __swig_getmethods__["t"] = _mgapilib.mgsubtexturedata_t_get
    if _newclass:t = _swig_property(_mgapilib.mgsubtexturedata_t_get, _mgapilib.mgsubtexturedata_t_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mgsubtexturedata(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mgsubtexturedata_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mgsubtexturedata_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mgsubtexturedata
    __del__ = lambda self : None;
mgsubtexturedata_swigregister = _mgapilib.mgsubtexturedata_swigregister
mgsubtexturedata_swigregister(mgsubtexturedata)

class mglightpointanimationsequencedata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mglightpointanimationsequencedata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mglightpointanimationsequencedata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mgapilib.mglightpointanimationsequencedata_state_set
    __swig_getmethods__["state"] = _mgapilib.mglightpointanimationsequencedata_state_get
    if _newclass:state = _swig_property(_mgapilib.mglightpointanimationsequencedata_state_get, _mgapilib.mglightpointanimationsequencedata_state_set)
    __swig_setmethods__["duration"] = _mgapilib.mglightpointanimationsequencedata_duration_set
    __swig_getmethods__["duration"] = _mgapilib.mglightpointanimationsequencedata_duration_get
    if _newclass:duration = _swig_property(_mgapilib.mglightpointanimationsequencedata_duration_get, _mgapilib.mglightpointanimationsequencedata_duration_set)
    __swig_setmethods__["colorIndex"] = _mgapilib.mglightpointanimationsequencedata_colorIndex_set
    __swig_getmethods__["colorIndex"] = _mgapilib.mglightpointanimationsequencedata_colorIndex_get
    if _newclass:colorIndex = _swig_property(_mgapilib.mglightpointanimationsequencedata_colorIndex_get, _mgapilib.mglightpointanimationsequencedata_colorIndex_set)
    __swig_setmethods__["colorIntensity"] = _mgapilib.mglightpointanimationsequencedata_colorIntensity_set
    __swig_getmethods__["colorIntensity"] = _mgapilib.mglightpointanimationsequencedata_colorIntensity_get
    if _newclass:colorIntensity = _swig_property(_mgapilib.mglightpointanimationsequencedata_colorIntensity_get, _mgapilib.mglightpointanimationsequencedata_colorIntensity_set)
    def __init__(self, *args): 
        this = _mgapilib.new_mglightpointanimationsequencedata(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, index):
        return _mgapilib.mglightpointanimationsequencedata_value_get(self, index)
    def __setitem__(self, index, value):
        return _mgapilib.mglightpointanimationsequencedata_value_set(self, value, index)
    __swig_destroy__ = _mgapilib.delete_mglightpointanimationsequencedata
    __del__ = lambda self : None;
mglightpointanimationsequencedata_swigregister = _mgapilib.mglightpointanimationsequencedata_swigregister
mglightpointanimationsequencedata_swigregister(mglightpointanimationsequencedata)

#def mgEditor calls?

def mgAppendRecList (recList, node, matrix):
    internalMatrix = None
    if matrix != None:
        internalMatrix = matrix.value
    return mgAppendRecListBase (recList, node, internalMatrix)

def mgCoord3dTransform (matrix, coord):
    return mgCoord3dTransformBase (matrix.value, coord)

def mgCoord3fTransform (matrix, coord):
    return mgCoord3fTransformBase (matrix.value, coord)
    
def mgConvexHullGetTriangleNth(hull, nth):
    tri = mgconvexhulltriangle()
    result = mgConvexHullGetTriangleNthBase(hull, nth, tri)
    if result: return result, tri
    else: return result, None

def mgGetBounds(rec):
    box = mgboxd()
    result = mgGetBoundsBase(rec, box)
    if result: return result, box
    else: return result, None
    
def mgGetBoundsForRecList(list):
    box = mgboxd()
    result = mgGetBoundsForRecListBase(list, box)
    if result: return result, box
    else: return result, None
    
def mgGetBoundsForSelect(db):
    box = mgboxd()
    result = mgGetBoundsForSelectBase(db, box)
    if result: return result, box
    else: return result, None
    
def mgGetColorIndexByName(db, name):
    index = mgint()
    result = mgGetColorIndexByNameBase(db, name, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetColorRGBA(rec, code):
    r = mgfloat()
    g = mgfloat()
    b = mgfloat()
    a = mgfloat()
    result = mgGetColorRGBABase(rec, code, r, g, b, a);
    if result: return result, r.value, g.value, b.value, a.value
    else: return result, None, None, None, None

def mgGetConstructVertexCoords(constructVtx):
    coord = mgcoord3d()
    sresult = mgGetConstructVertexCoordsBase(constructVtx, coord)
    if sresult==MSTAT_OK: return sresult, coord
    else: return sresult, None
    
def mgGetConstructEdgeCoords(constructEdge):
    coord1 = mgcoord3d()
    coord2 = mgcoord3d()
    sresult = mgGetConstructEdgeCoordsBase(constructEdge, coord1, coord2)
    if sresult==MSTAT_OK: return sresult, coord1, coord2
    else: return sresult, None, None
    
def mgGetCoord2i(rec, code):
    x = mgint()
    y = mgint()
    result = mgGetCoord2iBase(rec, code, x, y)
    if result: return result, x.value, y.value
    else: return result, None, None
        
def mgGetCoord3d(rec, code):
    x = mgdouble()
    y = mgdouble()
    z = mgdouble()
    result = mgGetCoord3dBase(rec, code, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None

def mgGetCoord3f(rec, code):
    x = mgfloat()
    y = mgfloat()
    z = mgfloat()
    result = mgGetCoord3fBase(rec, code, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None
    
def mgGetCurrentAltColor(db):
    index = mgunsignedint()
    intensity = mgfloat()
    result = mgGetCurrentAltColorBase(db, index, intensity)
    if result: return result, index.value, intensity.value
    else: return result, None, None

def mgGetCurrentAltColorRGB(db):
    red = mgshort()
    green = mgshort()
    blue = mgshort()
    result = mgGetCurrentAltColorRGBBase(db, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None

def mgGetCurrentColor(db):
    index = mgunsignedint()
    intensity = mgfloat()
    result = mgGetCurrentColorBase(db, index, intensity)
    if result: return result, index.value, intensity.value
    else: return result, None, None

def mgGetCurrentColorRGB(db):
    red = mgshort()
    green = mgshort()
    blue = mgshort()
    result = mgGetCurrentColorRGBBase(db, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None

def mgGetCurrentGridMatrix (db):
    matrix = mgmatrix()
    result = mgGetCurrentGridMatrixBase (db, matrix)
    if result: return result, matrix
    else: return result, None
        
def mgGetCurrentGridPoints(db):
    origin = mgcoord3d()
    xAxis = mgcoord3d()
    third = mgcoord3d()
    result = mgGetCurrentGridPointsBase(db, origin, xAxis, third)
    if result: return result, origin, xAxis, third
    else: return result, None, None, None
    
def mgGetCurrentLightPointAnimation(db):
    index = mgint()
    result = mgGetCurrentLightPointAnimationBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentLightPointAppearance(db):
    index = mgint()
    result = mgGetCurrentLightPointAppearanceBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentLightSource(db):
    index = mgint()
    result = mgGetCurrentLightSourceBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentLineStyle(db):
    index = mgint()
    result = mgGetCurrentLineStyleBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentLookAt(db):
    eyex = mgdouble()
    eyey = mgdouble()
    eyez = mgdouble()
    centerx = mgdouble()
    centery = mgdouble()
    centerz = mgdouble()
    upx = mgdouble()
    upy = mgdouble()
    upz = mgdouble()
    result = mgGetCurrentLookAtBase(db, eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz)
    if result: return result, eyex.value, eyey.value, eyez.value, centerx.value, centery.value, centerz.value, upx.value, upy.value, upz.value
    else: return result, None, None, None, None, None, None, None, None, None
    
def mgGetCurrentMaterial(db):
    index = mgint()
    result = mgGetCurrentMaterialBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentShader(db):
    index = mgint()
    result = mgGetCurrentShaderBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentSubTexture(db):
    index = mgint()
    result = mgGetCurrentSubTextureBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentTexture(db):
    index = mgint()
    result = mgGetCurrentTextureBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentTextureLayer(db):
    index = mgint()
    result = mgGetCurrentTextureLayerBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentTextureMapping(db):
    index = mgint()
    result = mgGetCurrentTextureMappingBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetCurrentTrackPlane(db):
    trackplane = mgplaned()
    result = mgGetCurrentTrackPlaneBase(db, trackplane)
    if result: return result, trackplane
    else: return result, None

def mgGetEyePointLookAt(eyerec):
    eyex = mgdouble()
    eyey = mgdouble()
    eyez = mgdouble()
    centerx = mgdouble()
    centery = mgdouble()
    centerz = mgdouble()
    upx = mgdouble()
    upy = mgdouble()
    upz = mgdouble()
    result = mgGetEyePointLookAtBase(eyerec, eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz)
    if result: return result, eyex.value, eyey.value, eyez.value, centerx.value, centery.value, centerz.value, upx.value, upy.value, upz.value
    else: return result, None, None, None, None, None, None, None, None, None
    
def mgGetFirstLightPointAnimation(db):
    index = mgint()
    result = mgGetFirstLightPointAnimationBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetFirstLightPointAppearance(db):
    index = mgint()
    result = mgGetFirstLightPointAppearanceBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetFirstLightSource(rec):
    index = mgint()
    result = mgGetFirstLightSourceBase(rec, index)
    if result: return result, index.value
    else: return result, None

def mgGetFirstLineStyle(rec):
    index = mgint()
    result = mgGetFirstLineStyleBase(rec, index)
    if result: return result, index.value
    else: return result, None

def mgGetFirstMaterial(db):
    index = mgint()
    result = mgGetFirstMaterialBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetFirstSelectedTexture(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetFirstSelectedTextureBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgGetFirstShader(db):
    index = mgint()
    result = mgGetFirstShaderBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetFirstSound(db):
    index = mgint()
    result = mgGetFirstSoundBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetFirstTexture(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetFirstTextureBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgGetAbsoluteFilename(db,relFilename):
    name = '\0' * 1024
    result = mgGetAbsoluteFilenameBase(db, relFilename, name, 1024)
    if result: return result, name.strip("\0")
    else: return result, None
    
def mgGetFirstTextureMapping(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetFirstTextureMappingBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgGetImageRowWidth(width, sampleSize, type):
    pad = mgint()
    result = mgGetImageRowWidthBase(width, sampleSize, type, pad)
    if result: return result, pad.value
    else: return result, None
    
def mgGetLastError():
    message = '\0' * 1024
    result = mgGetLastErrorBase(message, 1022)
    if result: return result, message.strip("\0")
    else: return result, None
    
def mgGetMaterialElem(rec):
    ambientR = mgfloat()
    ambientG = mgfloat()
    ambientB = mgfloat()
    diffuseR = mgfloat()
    diffuseG = mgfloat()
    diffuseB = mgfloat()
    specularR = mgfloat()
    specularG = mgfloat()
    specularB = mgfloat()
    emissiveR = mgfloat()
    emissiveG = mgfloat()
    emissiveB = mgfloat()
    shininess = mgfloat()
    alpha = mgfloat()
    result = mgGetMaterialElemBase(rec, ambientR, ambientG, ambientB, diffuseR, diffuseG, diffuseB, specularR, specularG, specularB, emissiveR, emissiveG, emissiveB, shininess, alpha)
    if result: return result, ambientR.value, ambientG.value, ambientB.value, diffuseR.value, diffuseG.value, diffuseB.value, specularR.value, specularG.value, specularB.value, emissiveR.value, emissiveG.value, emissiveB.value, shininess.value, alpha.value
    else: return result, None, None, None, None, None, None, None, None, None, None, None, None, None, None
    
def mgGetMatrix(rec, matrixCode):
    matrix = mgmatrix()
    result = mgGetMatrixBase(rec, matrixCode, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgGetMatTextureLayer(rec, matTextureCode):
    textureIndex = mgint()
    textureLayer = mgint()
    result = mgGetMatTextureLayerBase(rec, matTextureCode, textureIndex, textureLayer)
    if result: return result, textureIndex.value, textureLayer.value
    else: return result, None, None
    
def mgGetModelingParentMatrix(db):
    matrix = mgmatrix()
    result = mgGetModelingParentMatrixBase(db, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgGetNextLightPointAnimation(db):
    index = mgint()
    result = mgGetNextLightPointAnimationBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextLightPointAppearance(db):
    index = mgint()
    result = mgGetNextLightPointAppearanceBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextLightSource(rec):
    index = mgint()
    result = mgGetNextLightSourceBase(rec, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextLineStyle(rec):
    index = mgint()
    result = mgGetNextLineStyleBase(rec, index)
    if result: return result, index.value
    else: return result, None

def mgGetNextMaterial(db):
    index = mgint()
    result = mgGetNextMaterialBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextRecInList(recList):
    matrix = mgmatrix()
    result = mgGetNextRecInListBase(recList, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgGetNextSelectedTexture(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetNextSelectedTextureBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgGetNextShader(db):
    index = mgint()
    result = mgGetNextShaderBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextSound(db):
    index = mgint()
    result = mgGetNextSoundBase(db, index)
    if result: return result, index.value
    else: return result, None
    
def mgGetNextTexture(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetNextTextureBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgGetNextTextureMapping(db):
    index = mgint()
    name = '\0' * 1024
    result = mgGetNextTextureMappingBase(db, index, name)
    if result: return result, index.value, name.strip("\0")
    else: return result, None, None
    
def mgReadImageInfo(textureName):
    info = mgNewImageInfo (textureName)
    if (info == None): return 1, None
    else: return MIMG_NO_ERROR, info

def mgReadImageGeoInfo(textureName):
    info = mgNewImageGeoInfo (textureName)
    if (info == None): return 1, None
    else: return MIMG_NO_ERROR, info

def mgGetNormColor(rec, normColorCode):
    red = mgfloat()
    green = mgfloat()
    blue = mgfloat()
    result = mgGetNormColorBase(rec, normColorCode, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None
        
def mgGetNthRecInList(recList, nth):
    matrix = mgmatrix()
    result = mgGetNthRecInListBase(recList, matrix, nth)
    if result: return result, matrix
    else: return result, None
    
def mgGetOpenFlightVersion():
    version = 32 * '\0'
    result = mgGetOpenFlightVersionBase(version, 30)
    if result: return result, version.strip("\0")
    else: return result, None
    
def mgGetPlane(rec, planeCode):
    a = mgdouble()
    b = mgdouble()
    c = mgdouble()
    d = mgdouble()
    result = mgGetPlaneBase(rec, planeCode, a, b, c, d)
    if result: return result, a.value, b.value, c.value, d.value
    else: return result, None, None, None, None
        
def mgGetPolyAltColorRGB(rec):
    x = mgshort()
    y = mgshort()
    z = mgshort()
    result = mgGetPolyAltColorRGBBase(rec, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None
    
def mgGetPolyColorRGB(rec):
    x = mgshort()
    y = mgshort()
    z = mgshort()
    result = mgGetPolyColorRGBBase(rec, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None
    
def mgGetPolyNormal(rec):
    i = mgdouble()
    j = mgdouble()
    k = mgdouble()
    result = mgGetPolyNormalBase(rec, i, j, k)
    if result: return result, i.value, j.value, k.value
    else: return result, None, None, None
    
def mgGetRegistryRoot():
    rootString = 1024 * '\0'
    result = mgGetRegistryRootBase(rootString, 1022)
    if result: return result, rootString.strip("\0")
    else: return result, None
        
def mgGetRegistryString(keyName):
    keyString = 1024 * '\0'
    result = mgGetRegistryStringBase(keyName, keyString, 1022)
    if result: return result, keyString.strip("\0")
    else: return result, None
    
def mgGetSwitchBit(rec, maskNo, bitNo):
    on = mgbool()
    result = mgGetSwitchBitBase(rec, maskNo, bitNo, on)
    if result: return result, on.value
    else: return result, None
    
def mgGetSwitchDistance(db):
    distance = mgdouble()
    result = mgGetSwitchDistanceBase(db, distance)
    if result: return result, distance.value
    else: return result, None
    
def mgGetSwitchMaskNo(rec):
    maskNo = mgint()
    result = mgGetSwitchMaskNoBase(rec, maskNo)
    if result: return result, maskNo.value
    else: return result, None
    
def mgGetTextureGeoCtlPt(geoInfo, index):
    imageX = mgdouble()
    imageY = mgdouble()
    projX = mgdouble()
    projY = mgdouble()
    result = mgGetTextureGeoCtlPtBase(geoInfo, index, imageX, imageY, projX, projY)
    if result: return result, imageX.value, imageY.value, projX.value, projY.value
    else: return result, None, None, None, None
    
def mgGetTextureGeoEarthModel(geoInfo):
    earthModel = mgint()
    result = mgGetTextureGeoEarthModelBase(geoInfo, earthModel)
    if result: return result, earthModel.value
    else: return result, None
    
def mgGetTextureGeoImageOrigin(geoInfo):
    imageOrigin = mgint()
    result = mgGetTextureGeoImageOriginBase(geoInfo, imageOrigin)
    if result: return result, imageOrigin.value
    else: return result, None
    
def mgGetTextureGeoNumCtlPts(geoInfo):
    numCoords = mgint()
    result = mgGetTextureGeoNumCtlPtsBase(geoInfo, numCoords)
    if result: return result, numCoords.value
    else: return result, None
    
def mgGetTextureGeoProjection(geoInfo):
    projection = mgint()
    result = mgGetTextureGeoProjectionBase(geoInfo, projection)
    if result: return result, projection.value
    else: return result, None
    
def mgGetTextureGeoType(geoInfo):
    type = mgint()
    result = mgGetTextureGeoTypeBase(geoInfo, type)
    if result: return result, type.value
    else: return result, None
    
def mgGetTextureGeoUTMZone(geoInfo):
    zone = mgint()
    result = mgGetTextureGeoUTMZoneBase(geoInfo, zone)
    if result: return result, zone.value
    else: return result, None
    
def mgGetTextureGeoUTMHemisphere(geoInfo):
    hemisphere = mgint()
    result = mgGetTextureGeoUTMHemisphereBase(geoInfo, hemisphere)
    if result: return result, hemisphere.value
    else: return result, None
    
def mgGetTextureHeight(textureInfo):
    height = mgint()
    result = mgGetTextureHeightBase(textureInfo, height)
    if result: return result, height.value
    else: return result, None
    
def mgGetTextureMappingMatrix(db, index):
    matrix = mgmatrix()
    result = mgGetTextureMappingMatrixBase(db, index, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgGetTextureMinMax(textureInfo):
    min = mgfloat()
    max = mgfloat()
    result = mgGetTextureMinMaxBase(textureInfo, min, max)
    if result: return result, min.value, max.value
    else: return result, None, None
    
def mgGetTexturePosition(db, index):
    x = mgint()
    y = mgint()
    result = mgGetTexturePositionBase(db, index, x, y)
    if result: return result, x.value, y.value
    else: return result, None, None
    
def mgGetTextureSampleSize(textureInfo):
    sampleSize = mgint()
    result = mgGetTextureSampleSizeBase(textureInfo, sampleSize)
    if result: return result, sampleSize.value
    else: return result, None
   
def mgGetTextureSignedFlag(textureInfo):
    isSigned = mgbool()
    result = mgGetTextureSignedFlagBase(textureInfo, isSigned)
    if result: return result, isSigned.value
    else: return result, None
    
def mgGetTextureTiledFlag(textureInfo):
    isTiled = mgbool()
    result = mgGetTextureTiledFlagBase(textureInfo, isTiled)
    if result: return result, isTiled.value
    else: return result, None
    
def mgGetTextureTransparentValue(textureInfo):
    transparentValue = mgint()
    result = mgGetTextureTransparentValueBase(textureInfo, transparentValue)
    if result: return result, transparentValue.value
    else: return result, None
    
def mgGetTextureType(textureInfo):
    type = mgint()
    result = mgGetTextureTypeBase(textureInfo, type)
    if result: return result, type.value
    else: return result, None
    
def mgGetTextureWidth(textureInfo):
    width = mgint()
    result = mgGetTextureWidthBase(textureInfo, width)
    if result: return result, width.value
    else: return result, None
    
def mgGetVector(rec, vectorCode):
    i = mgfloat()    
    j = mgfloat()    
    k = mgfloat()    
    result = mgGetVectorBase(rec, vectorCode, i, j, k)
    if result: return result, i.value, j.value, k.value
    else: return result, None, None, None
    
def mgGetVectord(rec, vectorCode):
    i = mgdouble()    
    j = mgdouble()    
    k = mgdouble()    
    result = mgGetVectordBase(rec, vectorCode, i, j, k)
    if result: return result, i.value, j.value, k.value
    else: return result, None, None, None
    
def mgGetVersion():
    version = 32 * '\0'
    result = mgGetVersionBase(version, 30)
    if result: return result, version.strip("\0")
    else: return result, None
    
def mgGetVtxBackColorRGB(vtx):
    red = mgshort()
    green = mgshort()
    blue = mgshort()
    result = mgGetVtxBackColorRGBBase(vtx, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None
    
def mgGetVtxColorRGB(vtx):
    red = mgshort()
    green = mgshort()
    blue = mgshort()
    result = mgGetVtxColorRGBBase(vtx, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None

def mgGetVtxColorRGBA(vtx):
    red = mgshort()
    green = mgshort()
    blue = mgshort()
    alpha = mgshort()
    result = mgGetVtxColorRGBABase(vtx, red, green, blue, alpha)
    if result: return result, red.value, green.value, blue.value, alpha.value
    else: return result, None, None, None, None
    
def mgGetVtxCoord(vtx):
    x = mgdouble()
    y = mgdouble()    
    z = mgdouble()
    result = mgGetVtxCoordBase(vtx, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None
    
def mgGetVtxNormal(vtx):
    i = mgfloat()
    j = mgfloat()    
    k = mgfloat()
    result = mgGetVtxNormalBase(vtx, i, j, k)
    if result: return result, i.value, j.value, k.value
    else: return result, None, None, None
    
def mgGraphicsViewSettingGetDouble(db, settingName, defaultValue):
    settingValue = mgdouble()
    result = mgGraphicsViewSettingGetDoubleBase(db, settingName, settingValue, defaultValue)
    if result: return result, settingValue.value
    else: return result, None
    
def mgGraphicsViewSettingGetInteger(db, settingName, defaultValue):
    settingValue = mgint()
    result = mgGraphicsViewSettingGetIntegerBase(db, settingName, settingValue, defaultValue)
    if result: return result, settingValue.value
    else: return result, None
    
def mgGraphicsViewSettingGetMatrix(db, settingName, defaultValue):
    settingValue = mgmatrix()
    result = mgGraphicsViewSettingGetMatrixBase(db, settingName, settingValue, defaultValue.value)
    if result: return result, settingValue
    else: return result, None
    
def mgGraphicsViewSettingSetMatrix(db, settingName, settingValue, setMask):
    return mgGraphicsViewSettingSetMatrixBase(db, settingName, settingValue.value, setMask)

def mgHasTextureTransparentValue(textureInfo):
    hasTransparentValue = mgbool()
    result = mgHasTextureTransparentValueBase(textureInfo, hasTransparentValue)
    if result: return result, hasTransparentValue.value
    else: return result, None
    
def mgImageToXYZMatrix(imageAttr, geoinfo, db):
    matrix = mgmatrix()
    mgImageToXYZMatrixBase(imageAttr, geoinfo, db, matrix)
    return matrix
    
def mgIndex2RGB(db, index, intensity):
    red = mgshort()
    green = mgshort()
    blue = mgshort()        
    result = mgIndex2RGBBase(db, index, intensity, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None
    
def mgLightPointAnimationSequenceGet(lpaRec):
    result = mgGetAttList (lpaRec, fltLpSequenceLength)
    numItems = result[1]
    sequenceData = mglightpointanimationsequencedata(numItems)
    result = mgLightPointAnimationSequenceGetBase(lpaRec, sequenceData, numItems)
    if result: return result, sequenceData
    else: return result, None

def mgMatrixCompose (xAxis, yAxis, zAxis, translation):
    matrix = mgmatrix()
    mgMatrixComposeBase (matrix, xAxis, yAxis, zAxis, translation)
    return matrix

def mgMatrixCopy (srcMatrix):
    matrix = mgmatrix()
    result = mgMatrixCopyBase (matrix, srcMatrix.value)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixEqual (matrixA, matrixB):
    return mgMatrixEqualBase (matrixA.value, matrixB.value)
    
def mgMatrixFormNormal (geomMatrix):
    matrix = mgmatrix()
    mgMatrixFormNormalBase (matrix, geomMatrix.value)
    return matrix
    
def mgMatrixFormPitchDown90 ():
    matrix = mgmatrix()
    mgMatrixFormPitchDown90Base (matrix)
    return matrix
    
def mgMatrixFormPitchUp90 ():
    matrix = mgmatrix()
    mgMatrixFormPitchUp90Base (matrix)
    return matrix
    
def mgMatrixFormQuadToQuad (from1, from2, from3, from4, to1, to2, to3, to4):
    matrix = mgmatrix()
    result = mgMatrixFormQuadToQuadBase (matrix, from1, from2, from3, from4, to1, to2, to3, to4)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormReflect (coord):
    matrix = mgmatrix()
    mgMatrixFormReflectBase (matrix, coord)
    return matrix
    
def mgMatrixFormReflectX ():
    matrix = mgmatrix()
    _mgapilib.mgMatrixFormReflectX (matrix)
    return matrix
    
def mgMatrixFormReflectY ():
    matrix = mgmatrix()
    _mgapilib.mgMatrixFormReflectY (matrix)
    return matrix
    
def mgMatrixFormReflectZ ():
    matrix = mgmatrix()
    _mgapilib.mgMatrixFormReflectZ (matrix)
    return matrix
    
def mgMatrixFormRollLeft90 ():
    matrix = mgmatrix()
    mgMatrixFormRollLeft90Base (matrix)
    return matrix
    
def mgMatrixFormRollRight90 ():
    matrix = mgmatrix()
    mgMatrixFormRollRight90Base (matrix)
    return matrix
    
def mgMatrixFormRotate (theta, a, b, c):
    matrix = mgmatrix()
    result = mgMatrixFormRotateBase (matrix, theta, a, b, c)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormRotateX (theta):
    matrix = mgmatrix()
    result = mgMatrixFormRotateXBase (matrix, theta)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormRotateY (theta):
    matrix = mgmatrix()
    result = mgMatrixFormRotateYBase (matrix, theta)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormRotateZ (theta):
    matrix = mgmatrix()
    result = mgMatrixFormRotateZBase (matrix, theta)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormScale (x, y, z):
    matrix = mgmatrix()
    result = mgMatrixFormScaleBase (matrix, x, y, z)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormTranslate (x, y, z):
    matrix = mgmatrix()
    result = mgMatrixFormTranslateBase (matrix, x, y, z)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormXYZToUV (poly, layer):
    matrix = mgmatrix()
    result = mgMatrixFormXYZToUVBase (matrix, poly, layer)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormYawLeft90 ():
    matrix = mgmatrix()
    result = mgMatrixFormYawLeft90Base (matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixFormYawRight90 ():
    matrix = mgmatrix()
    result = mgMatrixFormYawRight90Base (matrix)
    if result: return result, matrix
    else: return result, None

def mgMatrixGetTranslation (matrix):
    return mgMatrixGetTranslationBase (matrix.value)

def mgMatrixGetXAxis (matrix):
    return mgMatrixGetXAxisBase (matrix.value)

def mgMatrixGetYAxis (matrix):
    return mgMatrixGetYAxisBase (matrix.value)

def mgMatrixGetZAxis (matrix):
    return mgMatrixGetZAxisBase (matrix.value)

def mgMatrixIdentity ():
    matrix = mgmatrix()
    result = mgMatrixIdentityBase (matrix)
    if result: return result, matrix
    else: return result, None

def mgMatrixInvert (srcMatrix):
    matrix = mgmatrix()
    result = mgMatrixInvertBase (srcMatrix.value, matrix)
    if result: return result, matrix
    else: return result, None

def mgMatrixIsIdentity (matrix):
    return mgMatrixIsIdentityBase (matrix.value)

def mgMatrixMultiply (matrixA, matrixB):
    matrix = mgmatrix()
    result = mgMatrixMultiplyBase (matrixA.value, matrixB.value, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixRotateX (srcMatrix, theta):
    matrix = mgmatrix()
    result = mgMatrixRotateXBase (srcMatrix.value, theta, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixRotateY (srcMatrix, theta):
    matrix = mgmatrix()
    result = mgMatrixRotateYBase (srcMatrix.value, theta, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixRotateZ (srcMatrix, theta):
    matrix = mgmatrix()
    result = mgMatrixRotateZBase (srcMatrix.value, theta, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixScale (srcMatrix, x, y, z):
    matrix = mgmatrix()
    result = mgMatrixScaleBase (srcMatrix.value, x, y, z, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixStackGetMatrix (stack):
    matrix = mgmatrix()
    result = mgMatrixStackGetMatrixBase (stack, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixStackLoadMatrix (stack, matrix):
    return mgMatrixStackLoadMatrixBase (stack, matrix.value)
    
def mgMatrixStackMultiply (stack, matrix):
    return mgMatrixStackMultiplyBase (stack, matrix.value)
    
def mgMatrixTranslate (srcMatrix, x, y, z):
    matrix = mgmatrix()
    result = mgMatrixTranslateBase (srcMatrix.value, x, y, z, matrix)
    if result: return result, matrix
    else: return result, None
    
def mgMatrixTranspose (srcMatrix):
    matrix = mgmatrix()
    mgMatrixTransposeBase (srcMatrix.value, matrix)
    return matrix
                                                                                                  
def mgMeshGetVtxColor(rec, vtxIndex):
    index = mgint()
    intensity = mgfloat()
    result = mgMeshGetVtxColorBase(rec, vtxIndex, index, intensity)
    if result: return result, index.value, intensity.value
    else: return result, None, None
    
def mgMeshGetVtxColorAlpha(rec, vtxIndex):
    alpha = mgshort()
    result = mgMeshGetVtxColorAlphaBase(rec, vtxIndex, alpha)
    if result: return result, alpha.value
    else: return result, None
    
def mgMeshGetVtxColorRGB(rec, vtxIndex):
    red = mgshort()
    green = mgshort()
    blue = mgshort()        
    result = mgMeshGetVtxColorRGBBase(rec, vtxIndex, red, green, blue)
    if result: return result, red.value, green.value, blue.value
    else: return result, None, None, None
    
def mgMeshGetVtxColorRGBA(rec, vtxIndex):
    red = mgshort()
    green = mgshort()
    blue = mgshort()        
    alpha = mgshort()        
    result = mgMeshGetVtxColorRGBABase(rec, vtxIndex, red, green, blue, alpha)
    if result: return result, red.value, green.value, blue.value, alpha.value
    else: return result, None, None, None, None
    
def mgMeshGetVtxCoord(rec, vtxIndex):
    x = mgdouble()
    y = mgdouble()    
    z = mgdouble()
    result = mgMeshGetVtxCoordBase(rec, vtxIndex, x, y, z)
    if result: return result, x.value, y.value, z.value
    else: return result, None, None, None
    
def mgMeshGetVtxNormal(rec, vtxIndex):
    i = mgfloat()
    j = mgfloat()    
    k = mgfloat()
    result = mgMeshGetVtxNormalBase(rec, vtxIndex, i, j, k)
    if result: return result, i.value, j.value, k.value
    else: return result, None, None, None
    
def mgMeshGetVtxUV(rec, vtxIndex, layer):
    u = mgfloat()
    v = mgfloat()    
    result = mgMeshGetVtxUVBase(rec, vtxIndex, layer, u, v)
    if result: return result, u.value, v.value
    else: return result, None, None
    
def mgMeshPrimitiveGetVtxIndexArray(rec, primNo):
    maxLen = mgMeshPrimitiveGetNumVtx(rec, primNo)
    indexArray = mgint(maxLen)
    result = mgMeshPrimitiveGetVtxIndexArrayBase(rec, primNo, indexArray, maxLen)
    if result: return result, indexArray
    else: return result, None
    
def mgModelingPrefGetDouble(prefName, defaultValue):
    prefValue = mgdouble()
    result = mgModelingPrefGetDoubleBase(prefName, prefValue, defaultValue)
    if result: return result, prefValue.value
    else: return result, None
    
def mgModelingPrefGetInteger(prefName, defaultValue):
    prefValue = mgint()
    result = mgModelingPrefGetIntegerBase(prefName, prefValue, defaultValue)
    if result: return result, prefValue.value    
    else: return result, None
    
def mgExtensionFieldGetInteger(rec, fieldGuid):
    fieldValue = mgint()
    result = mgExtensionFieldGetIntegerBase(rec, fieldGuid, fieldValue)
    if result: return result, fieldValue.value    
    else: return result, None

def mgExtensionFieldGetFloat(rec, fieldGuid):
    fieldValue = mgfloat()
    result = mgExtensionFieldGetFloatBase(rec, fieldGuid, fieldValue)
    if result: return result, fieldValue.value    
    else: return result, None

def mgExtensionFieldGetDouble(rec, fieldGuid):
    fieldValue = mgdouble()
    result = mgExtensionFieldGetDoubleBase(rec, fieldGuid, fieldValue)
    if result: return result, fieldValue.value    
    else: return result, None

def mgExtensionFieldGetBool(rec, fieldGuid):
    fieldValue = mgbool()
    result = mgExtensionFieldGetBoolBase(rec, fieldGuid, fieldValue)
    if result: return result, fieldValue.value    
    else: return result, None

def mgNewLightPointAnimation(db, name):
    index = mgint()
    result = mgNewLightPointAnimationBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewLightPointAppearance(db, name):
    index = mgint()
    result = mgNewLightPointAppearanceBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewLightSource(db, name):
    index = mgint()
    result = mgNewLightSourceBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewLineStyle(db):
    index = mgint()
    result = mgNewLineStyleBase(db, index)
    if result: return result, index.value
    else: return result, None

def mgNewMaterial(db, name):
    index = mgint()
    result = mgNewMaterialBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewShader(db, name):
    index = mgint()
    result = mgNewShaderBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewSound(db, name):
    index = mgint()
    result = mgNewSoundBase(db, name, index)
    if result: return result, index.value
    else: return result, None

def mgNewTextureMapping(db, type, name):
    index = mgint()
    result = mgNewTextureMappingBase(db, type, name, index)
    if result: return result, index.value
    else: return result, None
    
def mgPromptDialogString(dialog, numColumns, message, stringIn):
    pad = 258 - len(stringIn)
    if (pad <= 0): pad = 1
    stringOut = stringIn + (pad * '\0')
    sresult = mgPromptDialogStringBase(dialog, numColumns, message, stringOut, 256)
    if sresult==MSTAT_OK: return sresult, stringOut.strip("\0")
    else: return sresult, None

def mgPromptDialogColor(dialog, rIn, gIn, bIn):
    rOut = mgshort()
    gOut = mgshort()
    bOut = mgshort()
    sresult = mgPromptDialogColorBase(dialog, rIn, gIn, bIn, rOut, gOut, bOut)
    if sresult==MSTAT_OK: return sresult, rOut.value, gOut.value, bOut.value
    else: return sresult, None, None, None

def mgPromptDialogDouble(dialog, message, dIn):
    value = mgdouble()
    value.value = dIn
    sresult = mgPromptDialogDoubleBase(dialog, message, value)
    if sresult==MSTAT_OK: return sresult, value.value
    else: return sresult, None

def mgPromptDialogFloat(dialog, message, fIn):
    value = mgfloat()
    value.value = fIn
    sresult = mgPromptDialogFloatBase(dialog, message, value)
    if sresult==MSTAT_OK: return sresult, value.value
    else: return sresult, None

def mgPromptDialogInteger(dialog, message, iIn):
    value = mgint()
    value.value = iIn
    sresult = mgPromptDialogIntegerBase(dialog, message, value)
    if sresult==MSTAT_OK: return sresult, value.value
    else: return sresult, None

#def mgOptionMenu calls? NO

#def mgPluginPrefGet calls? No need for interface to plugins?

#def mgProgress calls? NO

#def mgPtrArray calls? NO

#def mgPtrStack calls? NO

def mgReadImage(textureName):
	pixels = mgunsignedcharlabel()
	type = mgint()
	width = mgint()
	height = mgint()
	result = mgReadImageBase (textureName, pixels, type, width, height)
	if result==0: return result, pixels.value, type.value, width.value, height.value
	else: return result, None, None, None, None

def mgReadImageHeader(textureName):
	type = mgint()
	width = mgint()
	height = mgint()
	result = mgReadImageHeaderBase (textureName, type, width, height)
	if result==0: return result, type.value, width.value, height.value
	else: return result, None, None, None

#def mgRegister calls?

def mgRGB2Index(db, red, green, blue):
    index = mgunsignedint()
    intensity = mgfloat()
    result = mgRGB2IndexBase(db, red, green, blue, index, intensity)
    if result: return result, index.value, intensity.value
    else: return result, None, None

#def mgScale calls? NO

def mgSetMatrix (rec, code, matrix):
    return mgSetMatrixBase (rec, code, matrix.value)

def mgSubTextureGet(imgRec):
    count = mgSubTextureCount (imgRec)
    subTextureData = mgsubtexturedata(count)
    result = mgSubTextureGetBase(imgRec, subTextureData, count)
    if result: return result, subTextureData
    else: return result, None
    
def mgSubTextureGetBounds(imgRec, index):
    left = mgint()
    bottom = mgint()
    right = mgint()
    top = mgint()
    result = mgSubTextureGetBoundsBase(imgRec, left, bottom, right, top, index)
    if result: return result, left.value, bottom.value, right.value, top.value
    else: return result, None, None, None, None
    
def mgVectordTransform (matrix, vec):
    return mgVectordTransformBase (matrix.value, vec)    
    
def mgVectorfTransform (matrix, vec):
    return mgVectorfTransformBase (matrix.value, vec)    

def mgWalkGetMatrix (userdata):
    resultMatrix = mgmatrix()
    result = mgWalkGetMatrixBase (userdata, resultMatrix)
    if result: return result, resultMatrix
    else: return result, None
    
def mgGeoCoordGet(imgRec):
    count = mgGeoCoordCount (imgRec)
    geoCoordData = mggeocoorddata(count)
    result = mgGeoCoordGetBase(imgRec, geoCoordData, count)
    if result: return result, geoCoordData
    else: return result, None

#def mgText calls? NO

#def mgToolAction calls? NO

#def mgWalk calls?

def mgNewRecList (*args):
	list = mgselectlist_t(1, *args)
	if list.this == None:
		return None
	else:
		return list

def mgGetSelectList (*args):
	list = mgselectlist_t(2, *args)
	if list.this == None:
		return None
	else:
		return list

def mgGetTriangleList (*args):
	list = mgselectlist_t(3, *args)
	if list.this == None:
		return None
	else:
		return list

def mgGetConstructList (*args):
	list = mgselectlist_t(4, *args)
	if list.this == None:
		return None
	else:
		return list
	
def mgFind (*args):
	list = mgselectlist_t(5, *args)
	if list.this == None:
		return None
	else:
		return list
	
def mgFindEx (node, startMatrix, matchFunc, userData, flags):
    if startMatrix == None:
        list = mgselectlist_t(6, node, None, matchFunc, userData, flags)
    else:
        list = mgselectlist_t(6, node, startMatrix.value, matchFunc, userData, flags)
    if list.this == None:
        return None
    else:
        return list

def mgGetDisplayList (*args):
	list = mgselectlist_t(7, *args)
	if list.this == None:
		return None
	else:
		return list

def mgNewMatrixStack (*args):
	stack = mgmatrixstack_t(*args)
	if stack.this == None:
		return None
	else:
		return stack

def mgGetParamBlock (*args):
	block = mgparamblock_t(*args)
	if block.this == None:
		return None
	else:
		return block

def mgParamSet (p, name, value):
	if (type(value).__name__ == 'int'):
		return mgParamSetInteger(p, name, value)
	elif (type(value).__name__ == 'float'):
		return mgParamSetDouble(p, name, value)
	elif (type(value).__name__ == 'str'):
		return mgParamSetString(p, name, value)
	elif (type(value).__name__ == 'bool'):
		return mgParamSetInteger(p, name, value)
	elif (type(value).__name__ == 'list'):
		if (len(value) == 2):
			return mgParamSetDouble2(p, name, value[0], value[1])
		else:
			return mgParamSetDouble3(p, name, value[0], value[1], value[2])
	else:
		return MG_FALSE

def mgParamGetInteger(p, name, defValue):
    value = mgint()
    result = mgParamGetIntegerBase(p, name, value, defValue)
    return result, value.value

def mgParamGetDouble(p, name, defValue):
    value = mgdouble()
    result = mgParamGetDoubleBase(p, name, value, defValue)
    return result, value.value

def mgParamGetDouble2(p, name, defValue1, defValue2):
    value1 = mgdouble()
    value2 = mgdouble()
    result = mgParamGetDouble2Base(p, name, value1, value2, defValue1, defValue2)
    return result, value1.value, value2.value

def mgParamGetDouble3(p, name, defValue1, defValue2, defValue3):
    value1 = mgdouble()
    value2 = mgdouble()
    value3 = mgdouble()
    result = mgParamGetDouble3Base(p, name, value1, value2, value3, defValue1, defValue2, defValue3)
    return result, value1.value, value2.value, value3.value

def mgParamGetFloat(p, name, defValue):
    value = mgfloat()
    result = mgParamGetFloatBase(p, name, value, defValue)
    return result, value.value

def mgParamGetBool(p, name, defValue):
    value = mgbool()
    result = mgParamGetBoolBase(p, name, value, defValue)
    return result, value.value

def mgParamGetString(p, name, defValue):
    value = '\0' * 1000
    result = mgParamGetStringBase(p, name, value, 998, defValue)
    return result, value

def mgParamAppend (p, name, value):
	if (type(value).__name__ == 'int'):
		return mgParamAppendInteger(p, name, value)
	elif (type(value).__name__ == 'float'):
		return mgParamAppendDouble(p, name, value)
	elif (type(value).__name__ == 'str'):
		return mgParamAppendString(p, name, value)
	elif (type(value).__name__ == 'bool'):
		return mgParamAppendInteger(p, name, value)
	elif (type(value).__name__ == 'list'):
		if (len(value) == 2):
			return mgParamAppendDouble2(p, name, value[0], value[1])
		else:
			return mgParamAppendDouble3(p, name, value[0], value[1], value[2])
	else:
		return MG_FALSE

def mgParamGetIntegerNth(p, name, nth, defValue):
    value = mgint()
    result = mgParamGetIntegerNthBase(p, name, value, defValue)
    return result, value.value

def mgParamGetDoubleNth(p, name, nth, defValue):
    value = mgdouble()
    result = mgParamGetDoubleNthBase(p, name, value, defValue)
    return result, value.value

def mgParamGetDouble2Nth(p, name, nth, defValue1, defValue2):
    value1 = mgdouble()
    value2 = mgdouble()
    result = mgParamGetDouble2NthBase(p, name, value1, value2, defValue1, defValue2)
    return result, value1.value, value2.value

def mgParamGetDouble3Nth(p, name, nth, defValue1, defValue2, defValue3):
    value1 = mgdouble()
    value2 = mgdouble()
    value3 = mgdouble()
    result = mgParamGetDouble3NthBase(p, name, value1, value2, value3, defValue1, defValue2, defValue3)
    return result, value1.value, value2.value, value3.value

def mgParamGetFloatNth(p, name, nth, defValue):
    value = mgfloat()
    result = mgParamGetFloatNthBase(p, name, value, defValue)
    return result, value.value

def mgParamGetBoolNth(p, name, nth, defValue):
    value = mgbool()
    result = mgParamGetBoolNthBase(p, name, nth, value, defValue)
    return result, value.value

def mgParamGetStringNth(p, name, nth, defValue):
    value = '\0' * 1000
    result = mgParamGetStringNthBase(p, name, nth, value, 998, defValue)
    return result, value

def mgNewMatrix(*args):
	list = mgmatrix()
	return list
	
def mgProjectionConvertLLEtoXYZ(projection, lleCoord):
   xyzCoord = mgcoord3d()
   result = mgProjectionConvertLLEtoXYZBase(projection, lleCoord, xyzCoord)
   return result, xyzCoord

def mgProjectionConvertXYZtoLLE(projection, xyzCoord):
   lleCoord = mgprojcoord()
   result = mgProjectionConvertXYZtoLLEBase(projection, xyzCoord, lleCoord)
   return result, lleCoord

def mgExit ():
	return 1

def MSTAT_ISOK (status):
	return status == 0

# this line must be last - this function is called when module is
# loaded the first time, it tells the API stand-alone program that
# python is running

_mgapilib.mgOnPythonModuleInit()
