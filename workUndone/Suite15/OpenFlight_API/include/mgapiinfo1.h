/* 
 ============================================================================== 

                                   PRESAGIS
                   Copyright (c) 2002-2015 Presagis USA Inc.

   No part of this source code may be reproduced or distributed in any form
   or by any means, or stored in a database or retrieval system, without the
   prior written consent of Presagis.

 ============================================================================== 
*/

/*----------------------------------------------------------------------------*/

#ifndef MGAPIINFO1_H_
#define MGAPIINFO1_H_
/* @doc EXTERNAL INFOFUNC */

/*----------------------------------------------------------------------------*/

#include "mgapibase.h"

/*----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C" {
#endif

//	@enumtype mgmessageseverityenum | mgmessageseverityenum | Severity level for
//	system messages
// @pyconstant Include this constant in OpenFlight Script |
typedef enum mgmessageseverityenum {
	MMSG_STATUS,			// @emem Severity level of <p status>
	MMSG_WARNING,			// @emem Severity level of <p warning>
	MMSG_ERROR,				// @emem Severity level of <p error>
	MMSG_TIP,				// @emem Severity level of <p tip>
} mgmessageseverityenum;

/*============================================================================*/

#ifndef DONTSWIGTHISFORPYTHON
#ifndef NOTAVAILABLEFORPYTHON
// @deprecated mgPrintField  | Use <f mgPrintRec>
MGAPIDEPRECATED(mgPrintRec) MGAPIFUNC(void) mgPrintField (
	mgrec* rec
	);
#endif /* NOTAVAILABLEFORPYTHON */
#endif /* DONTSWIGTHISFORPYTHON */

/*============================================================================*/
/*                                                                            */
/* @func void | mgPrintRec | prints the contents of a record.
	@desc <f mgPrintRec> prints all the information associated with a 
	record <p rec>.  If invoked from within the stand-alone program
	environment, output is directed to <p stdout>.  If invoked from the
	modeler environment, output is directed to the Status Log Window.

	@access Level 1
	@see <f mgPrintField>
*/
extern MGAPIFUNC(void) mgPrintRec (
	mgrec* rec		// @param the record to print
	);


/*============================================================================*/
/*                                                                            */
/* @func mgbool | mgGetLastError | retrieves the text of the last reported 
	message.

	@pytag DO NOT ADD a return tag to this function.

	@pyreturn mgbool | <e mgbool.MG_TRUE> if last error message retrieved successfully, 
	<e mgbool.MG_FALSE> otherwise.
	@pyreturn string | If function is successful, string contains the message, otherwise undefined.

	@desc The text of every message generated by a call to <f mgSendMessage>,
	<f mgSendStatus>, <f mgSendWarning>, and <f mgSendError> 
	is saved until the next call, and can be retrieved by <f mgGetLastError>.
	
	@cdesc A copy of the message is stored in <p message>, up to the length 
	defined by <p maxLen>.

	@access Level 1
	@see <f mgSendMessage>, <f mgSendStatus>, <f mgSendWarning>, <f mgSendError>
*/
extern MGAPIFUNC(mgbool) mgGetLastError (
	char* message,				// @param character buffer to hold the message retrieved
	int maxLen					// @param maximum number of characters to store in <p message>
	);

/*============================================================================*/
/*                                                                            */
/* @func mgbool | mgSendMessage | reports a system message.
	@desc <f mgSendMessage> reports a system message containing the text <p message>
	tagged with the specified severity level <p severity>.

	@desc If invoked from within the stand-alone program environment, the reported
	message is directed to <p stdout>.  If invoked from the modeler environment,
	the reported message is directed to the Status Bar/Status Log Window.

	@desc The message string can contain <f printf> style formatting, in which
	case the appropriate number of additional parameters must be passed using
	variable argument style.

	@return Returns <e mgbool.MG_TRUE> if successful, <e mgbool.MG_FALSE> otherwise.
   This function will fail if messages are not enabled.

	@access Level 1
	@see <f mgSendStatus>, <f mgSendWarning>, <f mgSendError>, <f mgSetMessagesEnabled>
*/
extern MGAPIFUNC(mgbool) mgSendMessage (
	mgmessageseverityenum severity,		// @param severity level of the message
	const char* message,						// @param message string, which may contain formatting,
													// and should be followed with the appropriate parameters, 
													// if any
	...											// @param | ... | optional additional parameters to 
													// support formatted output
	);	


/*============================================================================*/
/*                                                                            */
/* @func void | mgSetMessagesEnabled | enables or disables system messages.
	@desc According to the switch <p enabled>, <f mgSetMessagesEnabled>  
	either enables (<e mgbool.MG_TRUE>) or disables (<e mgbool.MG_FALSE>)  
	the display of messages of level <p severity> within the stand-alone
	program environment. By default, messages for all severities are enabled.

	@desc Note: Within the modeler environment, messages are always enabled
	and cannot be disabled.  For this reason, this function is ignored when
	invoked from within the modeler environment.  
	
	@desc You can invoke this function before you call <f mgInit> in the stand
	alone program environment to turn on or off messages displayed by
	the OpenFlight API initialization function. 
	
	@exref The following examples (in C and Python) show how to disable all messages
	before calling <f mgInit> and then re-enabling them after. |

	@ex |
	// disable all messages
	mgSetMessagesEnabled (MMSG_STATUS, MG_FALSE);
	mgSetMessagesEnabled (MMSG_WARNING, MG_FALSE);
	mgSetMessagesEnabled (MMSG_ERROR, MG_FALSE);

	mgInit (argc, argv);

	// re-enable all messages
	mgSetMessagesEnabled (MMSG_STATUS, MG_TRUE);
	mgSetMessagesEnabled (MMSG_WARNING, MG_TRUE);
	mgSetMessagesEnabled (MMSG_ERROR, MG_TRUE);

	// continue with stand-alone application processing

	@pyex |
	# disable all messages
	mgSetMessagesEnabled (MMSG_STATUS, MG_FALSE)
	mgSetMessagesEnabled (MMSG_WARNING, MG_FALSE)
	mgSetMessagesEnabled (MMSG_ERROR, MG_FALSE)

	mgInit (argc, argv)

	# re-enable all messages
	mgSetMessagesEnabled (MMSG_STATUS, MG_TRUE)
	mgSetMessagesEnabled (MMSG_WARNING, MG_TRUE)
	mgSetMessagesEnabled (MMSG_ERROR, MG_TRUE)

	# continue with stand-alone script processing

	@access Level 1
	@see <f mgGetMessagesEnabled>
*/
extern MGAPIFUNC(void) mgSetMessagesEnabled (
	mgmessageseverityenum severity,		// @param severity level of the messages
													// to enable or disable
	mgbool enabled								// @param <e mgbool.MG_TRUE> to enable messages, 
													// <e mgbool.MG_FALSE> to disable them
	);

/*============================================================================*/
/*                                                                            */
/* @func mgbool | mgGetMessagesEnabled | determines if messages are enabled or
	disabled.
	@desc <f mgGetMessagesEnabled> determines if messages of level 
	<p severity> have been enabled or disabled via <f mgSetMessagesEnabled>.

	@desc Note: Within the modeler environment, messages are always enabled
	and cannot be disabled. For this reason, this function always returns
	<e mgbool.MG_TRUE> when invoked from within the modeler environment.

	@return Returns <e mgbool.MG_TRUE> if messages of level <p severity> are enabled, 
	<e mgbool.MG_FALSE> otherwise.

	@access Level 1
	@see <f mgSetMessagesEnabled>
*/
extern MGAPIFUNC(mgbool) mgGetMessagesEnabled (
	mgmessageseverityenum severity			// @param severity level of the messages
														// to check whether enabled or disabled
	);

/*============================================================================*/
/*                                                                            */
/* @func mgbool | mgGetVersion | returns the current OpenFlight API version running.
	@pytag DO NOT ADD a return tag to this function.

	@pyreturn mgbool | <e mgbool.MG_TRUE> if version retrieved successfully, 
	<e mgbool.MG_FALSE> otherwise.
	@pyreturn string | If function is successful, string contains the version, otherwise undefined.
	@desc <f mgGetVersion> returns the current OpenFlight API version loaded in the
	program runtime environment.  The version is returned in <p version>
	as a character string of the form "X.Y.Z" where:
	@desc <m X> is the major revision number <nl>
	<m Y> is the minor revision number <nl>
	<m Z> is the sub release number

	@desc Use this function to determine, at runtime, which version of the OpenFlight API
	is loaded.  Use the macro <m MVERSION_API> to determine which version of the API your c
	ode is compiled and linked against.  

	@ex In this example, the code was compiled against version 2.5.1 of the OpenFlight API
	and is running with version 2.6.0.|
   char runTimeVersion [20];
   char linkTimeVersion [20];

   // runTimeVersion will contain "2.6.0"
   mgGetVersion (runTimeVersion, 20);

   // linkTimeVersion will contain "2.5.1"
   strncpy (linkTimeVersion, MVERSION_API, 20);

	@access Level 1
	@see <m MVERSION_API>, <f mgGetOpenFlightVersion>
*/
extern MGAPIFUNC(mgbool) mgGetVersion (
	char* version,			// @param address of string to receive version string
	int maxLen				// @param maximum number of characters to store in 
								// <p version>
	);

/*============================================================================*/

/*============================================================================*/
/*                                                                            */
/* @func mgbool | mgGetOpenFlightVersion | returns the OpenFlight file format
	version corresponding to the current OpenFlight API version running.
	@pytag DO NOT ADD a return tag to this function.

	@pyreturn mgbool | <e mgbool.MG_TRUE> if version retrieved successfully, 
	<e mgbool.MG_FALSE> otherwise.
	@pyreturn string | If function is successful, string contains the version, otherwise undefined.
	@desc <f mgGetOpenFlightVersion> returns the version of the OpenFlight file
	format that will be written out by the current OpenFlight API version loaded in the
	program runtime environment.  The version is returned in <p version>
	as a character string of the form "MMmm" where:
	@desc <m MM> is the major revision number, e.g. 15<nl>
	<m mm> is the minor revision number, e.g. 80<nl>

	@desc Use this function to determine, at runtime, which version of the 
	OpenFlight file format would be written out by the API. Use the macro
	<m MVERSION_OPENFLIGHT> to determine which version
	of the OpenFlight Format your code is compiled and linked against.  

	@ex In this example, the code was compiled against version 1560 of 
	the OpenFlight Format and is running with version 1580.|
   char runTimeVersion [20];
   char linkTimeVersion [20];

   // runTimeVersion will contain "1580"
   mgGetOpenFlightVersion (runTimeVersion, 20);

   // linkTimeVersion will contain "1560"
   strncpy (linkTimeVersion, MVERSION_OPENFLIGHT, 20);

	@access Level 1
	@see <m MVERSION_API>, <f mgGetVersion>
*/
extern MGAPIFUNC(mgbool) mgGetOpenFlightVersion (
	char* version,			// @param address of string to receive OpenFlight version string
	int maxLen				// @param maximum number of characters to store in 
								// <p version>
	);

/*============================================================================*/

#ifdef __cplusplus
}
#endif

#endif
/* DON'T ADD STUFF AFTER THIS #endif */
