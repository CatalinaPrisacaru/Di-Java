<HTML>
<HEAD>
<TITLE>mgGetTriangleList</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgGetTriangleList><H1 CLASS="APISYMBOL">mgGetTriangleList</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgGetTriangleList</B> - gets the triangles composing 
a polygon in a database.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgreclist <B>mgGetTriangleList</B> (</TD><TD><A HREF=mgrec.htm#mgrec>mgrec*</A></TD><TD><I>poly</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgGetTriangleList</B> decomposes the given <I>poly</I> into 
triangles and returns a list of vertex records representing those 
resulting triangles.</P></DD><DD><P>The record list returned contains N*3 vertex records where N 
is the number of unique triangles composing <I>poly</I>.  Vertex 1, 2 
and 3 in the list form the first triangle, vertex 4, 5 and 6, the 
second triangle and so forth.  The vertex records in the list are 
the actual vertex records (not copies) from <I>poly</I> so a vertex 
may appear in the list multiple times.</P></DD><DD><P>When you are done accessing the record list returned by this 
function, you should dispose of it using <A HREF=mgFreeRecList.htm#mgFreeRecList>mgFreeRecList</A>.  Since 
the vertices in the list are owned by <I>poly</I>, you do not need to 
dispose of them (unless you intend to affect the original polygon).</P></DD><DD><P>Note: This function works for convex or concave polygons 
with at least 3 vertices.  For polygons with less than 3 vertices, 
this function will return <A HREF=MG_NULL.htm#MG_NULL>MG_NULL</A>.  For convex polygons with 3 
vertices, this function will return a list containing 3 
vertices representing the original polygon (triangle).</P></DD><DD><P>Examples of polygons for which this function will fail include:<BR> 
Polygons with less than 3 vertices<BR> 
Polygons with no area<BR> 
Polygons whose "front" side cannot be determined</P></DD></DT></DL>
<DL><DT><H3>PYTHON NOTES</H3><DD><P>It is not necessary to dispose of the record list returned in Python.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>poly</I></DT><DD>the polygon to decompose into triangles</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Returns a record list object containing vertex record triples 
composing the triangles of the input <I>poly</I>, <A HREF=MG_NULL.htm#MG_NULL>MG_NULL</A> if <I>poly</I> 
is not a valid polygon (see examples above) or does not contain at 
least 3 vertices.
</DD></DL><DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example builds a new polygon for each of the 
triangles contained in an input polygon.</DT><DT><PRE CLASS="EXAMPLE">mgrec* vtx;
mgrec* newPoly;
mgrec* newVtx;
mgreclist recList = mgGetTriangleList (poly);
int numVtx = mgGetRecListCount (recList);
int numTris = numVtx / 3;
int i, j, tri;
i = 1;

// for each triangle returned, build a new polgyon
for (tri = 1; tri &lt= numTris; tri++) {
   newPoly = mgNewRec (fltPolygon);
   // 3 vertices in a row define this triangle
   for (j = 1; j &lt= 3; j++) {
      vtx = mgGetNthRecInList (recList, MG_NULL, i);
      // vtx is owned by poly, make a copy for new polygon
      newVtx = mgDuplicate (vtx);
      // append this vertex to preserve ordering of original poly
      mgAppend (newPoly, newVtx);
      i++;
   }
   // don't forget to attach newPoly somewhere!!
}
// all done with list, dispose of it to prevent memory leak
mgFreeRecList (recList);</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 1</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgreclist.htm#mgreclist>mgreclist</A>, <A HREF=mgFreeRecList.htm#mgFreeRecList>mgFreeRecList</A>, <A HREF=mgResetRecList.htm#mgResetRecList>mgResetRecList</A>, 
<A HREF=mgGetNextRecInList.htm#mgGetNextRecInList>mgGetNextRecInList</A>, <A HREF=mgGetNthRecInList.htm#mgGetNthRecInList>mgGetNthRecInList</A>, <A HREF=mgGetRecListCount.htm#mgGetRecListCount>mgGetRecListCount</A></DD></DL></BODY>

</HTML>
