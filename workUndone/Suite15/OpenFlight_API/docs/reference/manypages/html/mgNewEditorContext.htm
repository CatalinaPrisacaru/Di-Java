<HTML>
<HEAD>
<TITLE>mgNewEditorContext</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgNewEditorContext><H1 CLASS="APISYMBOL">mgNewEditorContext</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgNewEditorContext</B> - creates an editor context.<P></DD>
</DL>
<DL>
<DT><H3>PYTHON SPECIFICATION &nbsp; &nbsp; &nbsp; (Not Available For C)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgeditorcontext <B>mgNewEditorContext</B> (</TD><TD>const char*</TD><TD><I>toolName</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgNewEditorContext</B> creates an editor context for a script plug-in 
named <I>toolName</I>.</P></DD><DD><P>A unique editor context is required when running an OpenFlight script 
that edits an open database.  Use this function in your script to create and 
return an editor context.</P></DD></DT></DL>
<DL><DT><H3>C NOTES</H3><DD><P>Note that this function is for OpenFlight Scripts only and should not 
be used by your C language plug-in.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>toolName</I></DT><DD>the name of the tool in your 
plug-in script</DD></DL></DD></DL>
<DL><DT><H3>PYTHON EXAMPLE</H3></DT><DD><DL><DT>The following shows how you might use this function in your script:</DT><DT><PRE CLASS="EXAMPLE">def Delete():
   toolName = "Delete"
   editorContext = mgNewEditorContext(toolName)

   if (not editorContext):
      mgSendMessage (MMSG_ERROR, "Failed creating Editor Context")
      return

   mgSendMessage (MMSG_STATUS, "Editor Context Created");

   db = mgEditorGetDbRec (editorContext)
   geometry = mgGetSelectList (db)
   num = mgGetRecListCount (geometry)

   if (num == 0):
      mgSendMessage (MMSG_ERROR, "Nothing Selected")
      return

   for i in range (1, num+1):
      rec,matrix = mgGetNextRecInList (geometry)
      if (i==1): mgEditorAddUndoForDelete (editorContext, toolName, rec)
      else: mgEditorAppendUndoForDelete (editorContext, rec)

Delete ()</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 4</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgEditorGetDbRec.htm#mgEditorGetDbRec>mgEditorGetDbRec</A>, <A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A>, 
<A HREF=mgEditorAppendUndo.htm#mgEditorAppendUndo>mgEditorAppendUndo</A>, <A HREF=mgEditorResetUndo.htm#mgEditorResetUndo>mgEditorResetUndo</A>, 
<A HREF=mgEditorAddRedo.htm#mgEditorAddRedo>mgEditorAddRedo</A>, <A HREF=mgEditorAddUndoForRedo.htm#mgEditorAddUndoForRedo>mgEditorAddUndoForRedo</A>, 
<A HREF=mgEditorAddUndoForCreate.htm#mgEditorAddUndoForCreate>mgEditorAddUndoForCreate</A>, <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A>, 
<A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A>, <A HREF=mgEditorAppendUndoForDelete.htm#mgEditorAppendUndoForDelete>mgEditorAppendUndoForDelete</A>, 
<A HREF=mgEditorAddUndoForMove.htm#mgEditorAddUndoForMove>mgEditorAddUndoForMove</A>, <A HREF=mgEditorAppendUndoForMove.htm#mgEditorAppendUndoForMove>mgEditorAppendUndoForMove</A></DD></DL></BODY>

</HTML>
