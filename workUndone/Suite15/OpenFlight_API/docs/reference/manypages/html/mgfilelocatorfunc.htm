<HTML>
<HEAD>
<TITLE>mgfilelocatorfunc</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgfilelocatorfunc><H1 CLASS="APISYMBOL">mgfilelocatorfunc</H1></A></LEFT>
<DL>
<DT><H3>CALLBACK NAME</H3></DT>
<DD><B>mgfilelocatorfunc</B> - File locator function<P></DD>
<DT><H3>SYNOPSIS</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgbool (*<B>mgfilelocatorfunc</B>) ( <TD><A HREF=mgrec.htm#mgrec>mgrec*</A> <TD><I>db</I>, 
<TR><TD></TD><TD>const char* <TD><I>inputFileName</I>, 
<TR><TD></TD><TD>char** <TD><I>outputFileName</I>, 
<TR><TD></TD><TD>void* <TD><I>userData</I> );</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P>This is the signature for the file locator function.  You can 
register file locator functions for texture files and external reference 
files.  When you do this, the OpenFlight API will use the functions 
you register to "locate" files referenced by databases being read. 
This allows you to override the file location strategy normally 
used by the OpenFlight API.</P></DD><DD><P>When the OpenFlight API calls your file locator function, your 
function will search for the file using a strategy that is appropriate 
for your application.  If your function can locate the file, it will 
return to the OpenFlight API, the full path to where it was found.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>db</I></DT><DD>the database being opened</DD><DT><I>inputFileName</I></DT><DD>the original name of the file 
being located (texture or external 
reference) including the full path 
and name</DD><DT><I>outputFileName</I></DT><DD>the full path and name of the 
file where it was located.  Your file 
locator functions must use <A HREF=mgMalloc.htm#mgMalloc>mgMalloc</A> 
to allocate this memory.  Upon return 
of your file locator function, the OpenFlight 
API will call <A HREF=mgFree.htm#mgFree>mgFree</A> to deallocate the 
memory</DD><DT><I>userData</I></DT><DD>user defined data specified 
when file locator function was set 
by <A HREF=mgTextureSetLocatorFunc.htm#mgTextureSetLocatorFunc>mgTextureSetLocatorFunc</A>, 
<A HREF=mgExtRefSetLocatorFunc.htm#mgExtRefSetLocatorFunc>mgExtRefSetLocatorFunc</A> or 
<A HREF=mgShaderSetLocatorFunc.htm#mgShaderSetLocatorFunc>mgShaderSetLocatorFunc</A></DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Return <A HREF=mgbool.htm#mgbool>MG_TRUE</A> if the file was located, 
<A HREF=mgbool.htm#mgbool>MG_FALSE</A> otherwise.
</DD></DL><DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example shows a typical file locator function.</DT><DT><PRE CLASS="EXAMPLE">static mgbool MyLocator (mgrec* db, char* inFile,
&#32&#32&#32  char** outFile, void* userData)
{
   // userData was setup as the default texture locator
   mgfilelocatorfunc defLocator = (mgfilelocatorfunc) userData;
   mgbool found;
   char path [1024];

   // Call my function that searches for the file and
   // loads up path with the full path of where the
   // file was located.
   found = LocateFile (inFile, path, 1024);
   if (found) {
      // Allocate the output file buffer. OpenFlight API
      // will call mgFree to deallocate *outFile.
      *outFile = mgMalloc (strlen(path) + 1);
      strcpy (*outFile, path);
   }
   else {
      // My function could not find it, let the default
      // locator function try.
      found = (*defLocator) (db, inFile, outFile, MG_NULL);
   }
   // Tell the OpenFlight API whether or not the file was found
   return (found);
}

static void SetupLocator (void)
{
   mgfilelocatorfunc locator;
   mgbool status;

   // Setup my texture locator.  Have the default texture
   // locator passed to my function so it can be used by
   // my function if my function cannot locate the file.
   locator = mgTextureGetLocatorFunc ();
   status = mgTextureSetLocatorFunc (MyLocator, locator);
}</PRE></DT></DL></DD></DL>

<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgTextureSetLocatorFunc.htm#mgTextureSetLocatorFunc>mgTextureSetLocatorFunc</A>, <A HREF=mgTextureGetLocatorFunc.htm#mgTextureGetLocatorFunc>mgTextureGetLocatorFunc</A>, 
<A HREF=mgExtRefSetLocatorFunc.htm#mgExtRefSetLocatorFunc>mgExtRefSetLocatorFunc</A>, <A HREF=mgExtRefGetLocatorFunc.htm#mgExtRefGetLocatorFunc>mgExtRefGetLocatorFunc</A>, 
<A HREF=mgShaderSetLocatorFunc.htm#mgShaderSetLocatorFunc>mgShaderSetLocatorFunc</A>, <A HREF=mgShaderGetLocatorFunc.htm#mgShaderGetLocatorFunc>mgShaderGetLocatorFunc</A></DD></DL></BODY>

</HTML>
