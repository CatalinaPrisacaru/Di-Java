<HTML>
<HEAD>
<TITLE>mgNodeExpressionSetVariableInt</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgNodeExpressionSetVariableInt><H1 CLASS="APISYMBOL">mgNodeExpressionSetVariableInt</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgNodeExpressionSetVariableInt</B> - sets a integer variable in an mgnodeexpression<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>void <B>mgNodeExpressionSetVariableInt</B> (</TD><TD><A HREF=mgnodeexpression.htm#mgnodeexpression>mgnodeexpression</A></TD><TD><I>node</I>,</TD></TR>
<TR><TD></TD><TD>const char*</TD><TD><I>variableName</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>val</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgNodeExpressionSetVariableInt</B> Sets a integer variable in an mgnodeexpression. 
If the variable exists the value is overwritten.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>node</I></DT><DD>the expression root to get the variable</DD><DT><I>variableName</I></DT><DD>the variable name</DD><DT><I>val</I></DT><DD>the value of the variable to set</DD></DL></DD></DL>
<DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example generates an expression from a string, 
sets up the variables in the string, and then evaluates the expression.</DT><DT><PRE CLASS="EXAMPLE">mgnodeexpression exp = mgNodeExpressionLoadFromString("$myDbl == 2.1 && $myInt == -1" && $myStr == "foo");
mgNodeExpressionSetVariableDouble (exp, "myVal1", 2.1);
mgNodeExpressionSetVariableInt (exp, "myVal2", -1);
mgNodeExpressionSetVariableString (exp, "myStr", "foo");
mgbool istrue = mgNodeExpressionEvaluateAsBool (exp);</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 1</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgNodeExpressionEvaluateAsBool.htm#mgNodeExpressionEvaluateAsBool>mgNodeExpressionEvaluateAsBool</A>, <A HREF=mgNodeExpressionLoadFromString.htm#mgNodeExpressionLoadFromString>mgNodeExpressionLoadFromString</A>, 
<A HREF=mgNodeExpressionSetVariableDouble.htm#mgNodeExpressionSetVariableDouble>mgNodeExpressionSetVariableDouble</A>, <B>mgNodeExpressionSetVariableInt</B>, 
<A HREF=mgNodeExpressionSetVariableString.htm#mgNodeExpressionSetVariableString>mgNodeExpressionSetVariableString</A></DD></DL></BODY>

</HTML>
