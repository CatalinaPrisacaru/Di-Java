<HTML>
<HEAD>
<TITLE>mgEditorAppendUndo</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgEditorAppendUndo><H1 CLASS="APISYMBOL">mgEditorAppendUndo</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgEditorAppendUndo</B> - append an undo callback action 
to an existing undo entry for an editor tool instance.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgstatus <B>mgEditorAppendUndo</B> (</TD><TD><A HREF=mgeditorcontext.htm#mgeditorcontext>mgeditorcontext</A></TD><TD><I>editorContext</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgeditorundofunc.htm#mgeditorundofunc>mgeditorundofunc</A></TD><TD><I>undoFunc</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgeditorundocleanupfunc.htm#mgeditorundocleanupfunc>mgeditorundocleanupfunc</A></TD><TD><I>undoCleanupFunc</I>,</TD></TR>
<TR><TD></TD><TD>void*</TD><TD><I>undoData</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgEditorAppendUndo</B> creates an undo-able action and appends 
it to an existing entry in the undo menu for the specified editor context, 
<I>editorContext</I>.</P></DD><DD><P>Using this function after calling <A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A> within the 
same editor tool instance, an editor tool instance can register multiple 
undo callback actions that all are represented by a single undo entry 
in the Edit->Undo menu.</P></DD><DD><P>When the user selects an undo entry from the Edit->Undo menu that 
corresponds to multiple undo callback actions, the undo callback functions 
(including the undo cleanup callback) are called in the reverse order in 
which they were appended.  That is, the last undo callback action to be 
appended is called first and the undo callback action registered by 
<A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A> is called last.</P></DD><DD><P>Calling <B>mgEditorAppendUndo</B> without first calling 
<A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A> within the editor tool instance is equivalent to 
calling <A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A> and specifying <A HREF=MUML_USETOOLNAME.htm#MUML_USETOOLNAME>MUML_USETOOLNAME</A> 
for the menu label.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>editorContext</I></DT><DD>the editor context in 
which to register undo callback</DD><DT><I>undoFunc</I></DT><DD>the undo callback function 
for this undo-able action to be 
appended</DD><DT><I>undoCleanupFunc</I></DT><DD>the undo cleanup callback 
function for this undo-able action 
to be appended</DD><DT><I>undoData</I></DT><DD>user data to be passed to 
callback functions <I>undoFunc</I> 
and <I>undoCleanupFunc</I> when they 
are called</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Use <A HREF=MSTAT_ISOK.htm#MSTAT_ISOK>MSTAT_ISOK</A> to check return value for success.
</DD></DL><DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example shows how an editor tool 
might register multiple undo callback actions.<BR><BR> 
When the first undo callback action is registered, an undo entry 
labeled "My Action" is created in the Edit->Undo menu:</DT><DT><PRE CLASS="EXAMPLE">// Register the first undo callback action
mgEditorAddUndo (editorContext, "My Action",
&#32&#32  MyUndoFunc, MyUndoCleanupFunc,
&#32&#32  MyUndoData);</PRE></DT><DT>Then when subsequent undo callback actions are registered (appended) 
within the same editor tool instance, the undo callback functions are 
appended to the "My Action" undo entry added above:</DT><DT><PRE CLASS="EXAMPLE">// Register the "next" undo callback action
mgEditorAppendUndo (editorContext,
&#32&#32     MyUndoFunc, MyUndoCleanupFunc,
&#32&#32     myUndoData);</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 4</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgRegisterEditor.htm#mgRegisterEditor>mgRegisterEditor</A>, 
<A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A>, <A HREF=mgEditorResetUndo.htm#mgEditorResetUndo>mgEditorResetUndo</A>, 
<A HREF=mgEditorAddRedo.htm#mgEditorAddRedo>mgEditorAddRedo</A>, <A HREF=mgEditorAddUndoForRedo.htm#mgEditorAddUndoForRedo>mgEditorAddUndoForRedo</A>, 
<A HREF=mgEditorAddUndoForCreate.htm#mgEditorAddUndoForCreate>mgEditorAddUndoForCreate</A>, <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A>, 
<A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A>, <A HREF=mgEditorAppendUndoForDelete.htm#mgEditorAppendUndoForDelete>mgEditorAppendUndoForDelete</A>, 
<A HREF=mgEditorAddUndoForMove.htm#mgEditorAddUndoForMove>mgEditorAddUndoForMove</A>, <A HREF=mgEditorAppendUndoForMove.htm#mgEditorAppendUndoForMove>mgEditorAppendUndoForMove</A></DD></DL></BODY>

</HTML>
