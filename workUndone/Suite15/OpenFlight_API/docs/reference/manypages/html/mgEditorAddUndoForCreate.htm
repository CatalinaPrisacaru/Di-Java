<HTML>
<HEAD>
<TITLE>mgEditorAddUndoForCreate</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgEditorAddUndoForCreate><H1 CLASS="APISYMBOL">mgEditorAddUndoForCreate</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgEditorAddUndoForCreate</B> - registers undo/redo callback 
actions for an editor tool instance that creates new geometry in the scene.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgstatus <B>mgEditorAddUndoForCreate</B> (</TD><TD><A HREF=mgeditorcontext.htm#mgeditorcontext>mgeditorcontext</A></TD><TD><I>editorContext</I>,</TD></TR>
<TR><TD></TD><TD>const char*</TD><TD><I>menuLabel</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgrec.htm#mgrec>mgrec*</A></TD><TD><I>node</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgEditorAddUndoForCreate</B> and <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A> 
perform all the undo/redo actions automatically for an editor tool instance 
that creates new geometry in the scene.</P></DD><DD><P>When an editor tool instance creates new geometry and attaches 
that new geometry into the scene, it can register this action using 
<B>mgEditorAddUndoForCreate</B> or <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A>.  Doing 
so causes all the processing required for undo/redo of the node creation 
to be performed by the modeling system automatically.  This can greatly 
reduce the amount of undo/redo support code you must write for your 
editor tool.</P></DD><DD><P>After calling <B>mgEditorAddUndoForCreate</B>, an undo entry is created 
in the Edit->Undo menu with the specified label string <I>menuLabel</I>. 
If <A HREF=MUML_USETOOLNAME.htm#MUML_USETOOLNAME>MUML_USETOOLNAME</A> is specified for <I>menuLabel</I>, the name of the 
editor tool is used as the menu label string.</P></DD><DD><P>When this undo entry is selected by the user, the specified 
<I>node</I> is un-created and removed from the scene and a redo entry is 
created in the Edit->Redo menu with the same label as that used for 
the undo entry.  When this redo entry is selected, <I>node</I> will be 
re-created and attached into the scene, at which point another undo 
entry will be created.  As long as the user selects undo/redo of this 
action, the proper actions will be automatically performed by the 
modeling system with no further action required of the editor tool.</P></DD><DD><P>For <B>mgEditorAddUndoForCreate</B> and <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A> 
to work correctly, they must be called <B>after</B> the <I>node</I> is 
created and attached into the scene.  This is required so the information 
required by the undo/redo can be captured correctly.  Note that this is 
different from the requirements of <A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A> and 
<A HREF=mgEditorAddUndoForMove.htm#mgEditorAddUndoForMove>mgEditorAddUndoForMove</A> which must be called <B>before</B> the node 
is deleted or moved, respectively.</P></DD><DD><P>Both <B>mgEditorAddUndoForCreate</B> and <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A> 
can be used in combination with the other automatic and non-automatic 
undo/redo functions.  So, for example, if your editor tool deletes one 
node and creates another, you could call <A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A> 
to automatically handle the undo/redo for the deleted node, then call 
<A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A> to handle the undo/redo for the node 
you created.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>editorContext</I></DT><DD>the editor context to 
register automatic undo/redo 
for node creation action</DD><DT><I>menuLabel</I></DT><DD>the text of the undo/redo 
menu items to display</DD><DT><I>node</I></DT><DD>the node created for 
which undo/redo is desired</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Use <A HREF=MSTAT_ISOK.htm#MSTAT_ISOK>MSTAT_ISOK</A> to check return value for success.
</DD></DL><DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example shows how an editor tool, that creates new 
geometry in the scene, might register undo/redo for the new nodes it 
creates.</DT><DT><PRE CLASS="EXAMPLE">mgrec *newGroup;
mgrec *newObj1, *newObj2;
mgrec *newPoly1, *newPoly2;

// Create hierarchy of new nodes:
//
//    newGroup
//       |
//    newObj1
//       |
//    newPoly1
//
// and attach this hierarchy to an existing group in the scene

newGroup = mgNewRec (fltGroup);
newObj1 = mgNewRec (fltObject);
newPoly1 = mgNewRec (fltPolygon);

mgAttach (newGroup, newObj1);
mgAttach (newObj1, newPoly1);
mgAttach (existingGroup, newGroup);

// Set up undo/redo for node creation.  You only need to register
// the "root" node that you create.  Since newObj1 and newPoly1 are
// children of newGroup, you don't need to register them separately.
// Use mgEditorAddUndoForCreate because this is the first undo-able
// action performed by the editor tool.  Remember to register the
// undo after you attach new nodes into the scene.
mgEditorAddUndoForCreate (editorContext, "New Geometry Example", newGroup);

// Create another hierarchy of new nodes:
//
//    newObj2
//       |
//    newPoly2
//
// and attach this hierarchy to another existing group in the scene

newObj2 = mgNewRec (fltObject);
newPoly2 = mgNewRec (fltPolygon);
mgAttach (newObj2, newPoly2);
mgAttach (anotherGroup, newObj2);

// Set up undo/redo for node creation, only need to register the
// "root" node that you created.  Since newPoly2 is a child of
// newObj2, you don't need to register newPoly2 separately.
// Use mgEditorAppendUndoForCreate to "append" this undo
// callback action to the existing undo menu entry created
// above by mgEditorAddUndoForCreate.  Note that you could
// use mgEditorAddUndoForCreate here if you want another
// undo entry created in the menu.  This would make the
// creation of newGroup and newObj2 undo-able individually.
// Remember again, to register the undo after you attach
// new nodes into the scene.
mgEditorAppendUndoForCreate (editorContext, newObj2);

// The undo entry labeled "New Geometry Example", when selected
// by the user, will un-create both newGroup and newObj2. When
// that happens, a redo entry labeled "New Geometry Example" will
// be automatically created in the Edit-&gtRedo menu.  When that redo
// entry is selected by the user, both newGroup and newObj2 will be
// re-created and attached into the scene and yet another undo entry
// will be automatically created, and so forth.</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 4</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgRegisterEditor.htm#mgRegisterEditor>mgRegisterEditor</A>, 
<A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A>, <A HREF=mgEditorAppendUndo.htm#mgEditorAppendUndo>mgEditorAppendUndo</A>, <A HREF=mgEditorResetUndo.htm#mgEditorResetUndo>mgEditorResetUndo</A>, 
<A HREF=mgEditorAddRedo.htm#mgEditorAddRedo>mgEditorAddRedo</A>, <A HREF=mgEditorAddUndoForRedo.htm#mgEditorAddUndoForRedo>mgEditorAddUndoForRedo</A>, 
<A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A>, 
<A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A>, <A HREF=mgEditorAppendUndoForDelete.htm#mgEditorAppendUndoForDelete>mgEditorAppendUndoForDelete</A>, 
<A HREF=mgEditorAddUndoForMove.htm#mgEditorAddUndoForMove>mgEditorAddUndoForMove</A>, <A HREF=mgEditorAppendUndoForMove.htm#mgEditorAppendUndoForMove>mgEditorAppendUndoForMove</A></DD></DL></BODY>

</HTML>
