<HTML>
<HEAD>
<TITLE>mgGLMaterialIndex</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgGLMaterialIndex><H1 CLASS="APISYMBOL">mgGLMaterialIndex</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgGLMaterialIndex</B> - specifies a material for GL rendering.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgbool <B>mgGLMaterialIndex</B> (</TD><TD><A HREF=mgglcontext.htm#mgglcontext>mgglcontext</A></TD><TD><I>glContext</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgrec.htm#mgrec>mgrec*</A></TD><TD><I>db</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>index</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgGLMaterialIndex</B> sets the current material for GL rendering to 
that specified by palette <I>index</I>, in database <I>db</I>.</P></DD><DD><P>This function loads the material definition associated with the specified 
material in preparation for rendering into GL controls.  It is the equivalent of 
calling the OpenGL routine <B>glMaterial*()</B> for each of the material components 
<B>GL_SHININESS</B>, <B>GL_AMBIENT</B>, <B>GL_DIFFUSE</B>, <B>GL_SPECULAR</B> and <B>GL_EMISSION</B>.</P></DD><DD><P>If you are rendering into a user defined GL control, you must explicitly 
enable lighting before <B>mgGLMaterialIndex</B> will have any affect. 
If you are rendering into a graphics view, material and lighting rendering will 
be enabled according to the settings of the viewing parameters of that graphic 
view.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>glContext</I></DT><DD>Gl rendering context into which 
material is to be loaded</DD><DT><I>db</I></DT><DD>database whose material palette defines 
the material to load</DD><DT><I>index</I></DT><DD>index of material in database's palette to 
load</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Returns <A HREF=mgbool.htm#mgbool>MG_TRUE</A> if material could be loaded successfully, 
<A HREF=mgbool.htm#mgbool>MG_FALSE</A> otherwise.
</DD></DL><DL><DT><H3>ACCESS LEVEL</H3><DD>Level 4</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgGLTextureIndex.htm#mgGLTextureIndex>mgGLTextureIndex</A>, <A HREF=mgGLColorIndex.htm#mgGLColorIndex>mgGLColorIndex</A>, <A HREF=mgSetGuiCallback.htm#mgSetGuiCallback>mgSetGuiCallback</A>, 
<A HREF=MGCB_DRAW.htm#MGCB_DRAW>MGCB_DRAW</A>, <A HREF=mgGetCurrentMaterial.htm#mgGetCurrentMaterial>mgGetCurrentMaterial</A></DD></DL></BODY>

</HTML>
