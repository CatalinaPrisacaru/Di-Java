<HTML>
<HEAD>
<TITLE>mgEditorAddUndoForRedo</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgEditorAddUndoForRedo><H1 CLASS="APISYMBOL">mgEditorAddUndoForRedo</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgEditorAddUndoForRedo</B> - registers a new undo callback 
action after the redo of an editor tool instance.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>mgstatus <B>mgEditorAddUndoForRedo</B> (</TD><TD><A HREF=mgeditorundofunc.htm#mgeditorundofunc>mgeditorundofunc</A></TD><TD><I>undoFunc</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgeditorundocleanupfunc.htm#mgeditorundocleanupfunc>mgeditorundocleanupfunc</A></TD><TD><I>undoCleanupFunc</I>,</TD></TR>
<TR><TD></TD><TD>void*</TD><TD><I>undoData</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgEditorAddUndoForRedo</B> creates a new undo-able action item 
in the undo menu.  This undo-able action results from the user invoking 
the redo for an editor tool instance.</P></DD><DD><P>If the action "re-done" by the redo function of an editor tool 
instance is "undo-able", the editor tool registers this undo-able 
action using this function.  Doing so causes an undo entry to be created 
in the Edit->Undo menu with the same label as the corresponding redo.</P></DD><DD><P>When this undo entry is selected by the user, the specified 
undo callback function, <I>undoFunc</I> is called and passed the specified 
undo data <I>undoData</I>.  In this function, the editor tool instance is 
responsible for restoring the database to the state it was in prior to 
the editor tool redo function being called.  This is critical for 
previous undo/redo callback actions to correctly perform their processing.</P></DD><DD><P><B>mgEditorAddUndoForRedo</B> may only be called from within a 
redo callback function of the editor tool.  This provides the necessary 
"context" for the undo-able action (editor context, menu label, etc). 
If your redo callback function does not register an undo-able action 
using this function, all the items already in the Edit->Undo menu 
will be cleared.</P></DD><DD><P>Generally, after the undo callback function is called, the undo 
cleanup callback function, <I>undoCleanupFunc</I> is called.  In this 
function, the editor tool instance can deallocate the undo data. 
Alternatively, the undo cleanup callback function may be called 
when the undo entry in the Edit->Undo menu becomes unreachable. 
In this case, the undo callback function will not be called 
before the undo cleanup callback function.</P></DD><DD><P>The undo data <I>undoData</I> specified may be the same data as 
was specified when the redo was registered.  In fact, this is 
very common since the undo and redo data for a specific editor tool 
instance may be very similar in content.  When the <I>undoData</I> specified 
to <B>mgEditorAddUndoForRedo</B> is the same address as the redo data, the 
undo and redo cleanup functions are automatically deferred by the 
modeling system until this "shared" data is really not needed anymore. 
When an undo or redo cleanup function is called, it is always safe (and 
required) to free the associated memory.</P></DD><DD><P>See the example shown for <A HREF=mgEditorAddRedo.htm#mgEditorAddRedo>mgEditorAddRedo</A> to see how 
an editor tool instance might use <B>mgEditorAddUndoForRedo</B>.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>undoFunc</I></DT><DD>the undo callback function 
for this undo-able action</DD><DT><I>undoCleanupFunc</I></DT><DD>the undo cleanup callback 
function for this undo-able action</DD><DT><I>undoData</I></DT><DD>user data to be passed to 
callback functions <I>undoFunc</I> 
and <I>undoCleanupFunc</I> when they 
are called</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Use <A HREF=MSTAT_ISOK.htm#MSTAT_ISOK>MSTAT_ISOK</A> to check return value for success.
</DD></DL><DL><DT><H3>ACCESS LEVEL</H3><DD>Level 4</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgRegisterEditor.htm#mgRegisterEditor>mgRegisterEditor</A>, 
<A HREF=mgEditorAddUndo.htm#mgEditorAddUndo>mgEditorAddUndo</A>, <A HREF=mgEditorAppendUndo.htm#mgEditorAppendUndo>mgEditorAppendUndo</A>, <A HREF=mgEditorResetUndo.htm#mgEditorResetUndo>mgEditorResetUndo</A>, 
<A HREF=mgEditorAddRedo.htm#mgEditorAddRedo>mgEditorAddRedo</A>, 
<A HREF=mgEditorAddUndoForCreate.htm#mgEditorAddUndoForCreate>mgEditorAddUndoForCreate</A>, <A HREF=mgEditorAppendUndoForCreate.htm#mgEditorAppendUndoForCreate>mgEditorAppendUndoForCreate</A>, 
<A HREF=mgEditorAddUndoForDelete.htm#mgEditorAddUndoForDelete>mgEditorAddUndoForDelete</A>, <A HREF=mgEditorAppendUndoForDelete.htm#mgEditorAppendUndoForDelete>mgEditorAppendUndoForDelete</A>, 
<A HREF=mgEditorAddUndoForMove.htm#mgEditorAddUndoForMove>mgEditorAddUndoForMove</A>, <A HREF=mgEditorAppendUndoForMove.htm#mgEditorAppendUndoForMove>mgEditorAppendUndoForMove</A></DD></DL></BODY>

</HTML>
