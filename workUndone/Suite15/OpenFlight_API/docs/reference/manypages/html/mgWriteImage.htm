<HTML>
<HEAD>
<TITLE>mgWriteImage</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgWriteImage><H1 CLASS="APISYMBOL">mgWriteImage</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgWriteImage</B> - writes an image to disk.<P></DD>
</DL>
<DL>
<DT><H3>SYNOPSIS &nbsp; &nbsp; &nbsp; (C and Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>int <B>mgWriteImage</B> (</TD><TD>const char*</TD><TD><I>textureName</I>,</TD></TR>
<TR><TD></TD><TD>unsigned char*</TD><TD><I>pixels</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>type</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>width</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>height</I>,</TD></TR>
<TR><TD></TD><TD><A HREF=mgbool.htm#mgbool>mgbool</A></TD><TD><I>compress</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgWriteImage</B> writes an image to disk in the SGI RGB format 
with the given <I>textureName</I>.  The <I>pixels</I> you supply are expected 
to be packed in one of the formats supported by the OpenFlight API: <A HREF=MIMG_INT.htm#MIMG_INT>MIMG_INT</A>, 
<A HREF=MIMG_INTA.htm#MIMG_INTA>MIMG_INTA</A>, <A HREF=MIMG_RGB.htm#MIMG_RGB>MIMG_RGB</A>, or <A HREF=MIMG_RGBA.htm#MIMG_RGBA>MIMG_RGBA</A>.  These are the formats returned 
by functions such as <A HREF=mgReadImage.htm#mgReadImage>mgReadImage</A> or <A HREF=mgGetTextureTexels.htm#mgGetTextureTexels>mgGetTextureTexels</A>. 
If <B>compress</B> is <A HREF=mgbool.htm#mgbool>MG_TRUE</A>, 
the image is compressed using SGI&#146s run-length encoding scheme.</P></DD><DD><P>See <A HREF=mgReadImage.htm#mgReadImage>mgReadImage</A> for a description of the expected memory layout 
for <I>pixels</I>.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>textureName</I></DT><DD>the name of the image file to create</DD><DT><I>pixels</I></DT><DD>the image pixels</DD><DT><I>type</I></DT><DD>the image type specifying how the <I>pixels</I> 
are packed - possible values are <A HREF=MIMG_INT.htm#MIMG_INT>MIMG_INT</A>, 
<A HREF=MIMG_INTA.htm#MIMG_INTA>MIMG_INTA</A>, <A HREF=MIMG_RGB.htm#MIMG_RGB>MIMG_RGB</A> and <A HREF=MIMG_RGBA.htm#MIMG_RGBA>MIMG_RGBA</A></DD><DT><I>width</I></DT><DD>the image width</DD><DT><I>height</I></DT><DD>the image height</DD><DT><I>compress</I></DT><DD>a flag specifying whether or not 
to compress the image</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Returns <A HREF=MIMG_NO_ERROR.htm#MIMG_NO_ERROR>MIMG_NO_ERROR</A> if successful, otherwise applicable 
texture error code.
</DD></DL><DL><DT><H3>ACCESS LEVEL</H3><DD>Level 2</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgReadImage.htm#mgReadImage>mgReadImage</A>, <A HREF=mgReadImageHeader.htm#mgReadImageHeader>mgReadImageHeader</A>, <A HREF=mgWriteTexture.htm#mgWriteTexture>mgWriteTexture</A></DD></DL></BODY>

</HTML>
