<HTML>
<HEAD>
<TITLE>mgPtrArrayRemove</TITLE>

<STYLE type='text/css'>
pre.EXAMPLE {background-color: #F1F1F1; padding: 2px; border: 1px solid #D1D1D1; font-family: monospace;}
table.SYNOPSIS {font-family: monospace;}
table.SIMPLE {border: 1px solid #D1D1D1; border-collapse: collapse;}
span.MONOSPACE {font-family: monospace;}
td.BORDER {border: 1px solid #D1D1D1; padding: 2px;}
tr.HEADER {background-color: #F1F1F1; color:#326db9; font-weight: bold;}
td.QUESTION {font-weight: bold; background-color: #C2C7E2;}
table.FAQ {width: 100%; border: 1px solid #D1D1D1; padding: 0px;}
li.NOINDENT {margin-left: 0px;}
img {margin:5px 0px;}
h1.APISYMBOL {background-color:#F1F1F1; color:#326db9;}
h1 {color:#326db9;}
h2 {color:#326db9;}
h3 {color:#326db9;}
h4 {color:#326db9;}
h5 {color:#326db9;}
</STYLE>

</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" >
<A NAME=top></A>


<LEFT><A NAME=mgPtrArrayRemove><H1 CLASS="APISYMBOL">mgPtrArrayRemove</H1></A></LEFT>
<DL>
<DT><H3>FUNCTION NAME</H3></DT>
<DD><B>mgPtrArrayRemove</B> - remove an item from a pointer array.<P></DD>
</DL>
<DL>
<DT><H3>C SPECIFICATION &nbsp; &nbsp; &nbsp; (Not Available For Python)</H3></DT>
<DD><TABLE CLASS="SYNOPSIS">
<TR>
<TD>void* <B>mgPtrArrayRemove</B> (</TD><TD><A HREF=mgptrarray.htm#mgptrarray>mgptrarray</A></TD><TD><I>ptrArray</I>,</TD></TR>
<TR><TD></TD><TD>int</TD><TD><I>pos</I> );</TD>
</TR>
</TABLE></DD>
</DL>
<DL><DT><H3>DESCRIPTION</H3><DD><P><B>mgPtrArrayRemove</B> removes the item in pointer array <I>ptrArray</I> 
at position <I>pos</I>.</P></DD><DD><P>Note that this function does not free or otherwise affect the actual 
item that was removed from the array.  If this item was dynamically 
allocated, it is the callers responsibility to deallocate it.</P></DD><DD><P>The first item in a pointer array is at index 1.  Therefore, 
to remove the first item of the array, specify <I>pos</I> as 1. 
To remove the item at the end of the array, specify <I>pos</I> as 
the length of the pointer array.</P></DD></DT></DL>
<DL><DT><H3>PARAMETERS</H3></DT><DD><DL><DT><I>ptrArray</I></DT><DD>the pointer array</DD><DT><I>pos</I></DT><DD>the position of the item in 
the array to remove (in range 1..length)</DD></DL></DD></DL>
<DL><DT><H3>RETURNS</H3></DT><DD>Returns the item removed from the pointer array, <A HREF=MG_NULL.htm#MG_NULL>MG_NULL</A> if 
item not found.
</DD></DL><DL><DT><H3>C EXAMPLE</H3></DT><DD><DL><DT>The following example shows how to remove all items from a pointer 
array and deallocate the memory allocated for each.  The items in this 
pointer array are dynamically allocated strings.</DT><DT><PRE CLASS="EXAMPLE">char* thisString;
while (thisString = (char*) mgPtrArrayRemove (ptrArray, 1))
   mgFree (thisString);</PRE></DT></DL></DD></DL>

<DL><DT><H3>ACCESS LEVEL</H3><DD>Level 1</DD></DT></DL>
<DL><DT><H3>SEE ALSO</H3></DT><DD><A HREF=mgNewPtrArray.htm#mgNewPtrArray>mgNewPtrArray</A>, <A HREF=mgFreePtrArray.htm#mgFreePtrArray>mgFreePtrArray</A>, <A HREF=mgPtrArrayAppend.htm#mgPtrArrayAppend>mgPtrArrayAppend</A>, 
<A HREF=mgPtrArrayInsert.htm#mgPtrArrayInsert>mgPtrArrayInsert</A>, <A HREF=mgPtrArrayReplace.htm#mgPtrArrayReplace>mgPtrArrayReplace</A>, <A HREF=mgPtrArrayClear.htm#mgPtrArrayClear>mgPtrArrayClear</A>, 
<A HREF=mgPtrArrayGet.htm#mgPtrArrayGet>mgPtrArrayGet</A>, <A HREF=mgPtrArrayLength.htm#mgPtrArrayLength>mgPtrArrayLength</A>, <A HREF=mgPtrArraySort.htm#mgPtrArraySort>mgPtrArraySort</A>, 
<A HREF=mgPtrArraySearch.htm#mgPtrArraySearch>mgPtrArraySearch</A>, <A HREF=mgPtrArrayBSearch.htm#mgPtrArrayBSearch>mgPtrArrayBSearch</A></DD></DL></BODY>

</HTML>
